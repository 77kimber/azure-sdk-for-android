/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.compute;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.core.OperationStatus;
import com.microsoft.azure.core.OperationStatusResponse;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.utils.BOMInputStream;
import com.microsoft.azure.core.utils.Base64;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.compute.models.AccessControlListRule;
import com.microsoft.azure.management.compute.models.ConfigurationSet;
import com.microsoft.azure.management.compute.models.DataVirtualHardDisk;
import com.microsoft.azure.management.compute.models.DeploymentChangeConfigurationParameters;
import com.microsoft.azure.management.compute.models.DeploymentCreateParameters;
import com.microsoft.azure.management.compute.models.DeploymentDeleteRoleInstanceParameters;
import com.microsoft.azure.management.compute.models.DeploymentGetPackageParameters;
import com.microsoft.azure.management.compute.models.DeploymentGetResponse;
import com.microsoft.azure.management.compute.models.DeploymentRollbackUpdateOrUpgradeParameters;
import com.microsoft.azure.management.compute.models.DeploymentSlot;
import com.microsoft.azure.management.compute.models.DeploymentStatus;
import com.microsoft.azure.management.compute.models.DeploymentSwapParameters;
import com.microsoft.azure.management.compute.models.DeploymentUpdateStatusParameters;
import com.microsoft.azure.management.compute.models.DeploymentUpgradeParameters;
import com.microsoft.azure.management.compute.models.DeploymentUpgradeType;
import com.microsoft.azure.management.compute.models.DeploymentWalkUpgradeDomainParameters;
import com.microsoft.azure.management.compute.models.DnsServer;
import com.microsoft.azure.management.compute.models.DnsSettings;
import com.microsoft.azure.management.compute.models.DomainJoinCredentials;
import com.microsoft.azure.management.compute.models.DomainJoinProvisioning;
import com.microsoft.azure.management.compute.models.DomainJoinSettings;
import com.microsoft.azure.management.compute.models.EndpointAcl;
import com.microsoft.azure.management.compute.models.ExtensionConfiguration;
import com.microsoft.azure.management.compute.models.FrontendIPConfiguration;
import com.microsoft.azure.management.compute.models.GuestAgentFormattedMessage;
import com.microsoft.azure.management.compute.models.GuestAgentMessage;
import com.microsoft.azure.management.compute.models.GuestAgentStatus;
import com.microsoft.azure.management.compute.models.InputEndpoint;
import com.microsoft.azure.management.compute.models.InstanceEndpoint;
import com.microsoft.azure.management.compute.models.LoadBalancer;
import com.microsoft.azure.management.compute.models.LoadBalancerProbe;
import com.microsoft.azure.management.compute.models.LoadBalancerProbeTransportProtocol;
import com.microsoft.azure.management.compute.models.OSVirtualHardDisk;
import com.microsoft.azure.management.compute.models.PersistentVMDowntime;
import com.microsoft.azure.management.compute.models.ResourceExtensionConfigurationStatus;
import com.microsoft.azure.management.compute.models.ResourceExtensionParameterValue;
import com.microsoft.azure.management.compute.models.ResourceExtensionReference;
import com.microsoft.azure.management.compute.models.ResourceExtensionStatus;
import com.microsoft.azure.management.compute.models.ResourceExtensionSubStatus;
import com.microsoft.azure.management.compute.models.Role;
import com.microsoft.azure.management.compute.models.RoleInstance;
import com.microsoft.azure.management.compute.models.RoleInstancePowerState;
import com.microsoft.azure.management.compute.models.SshSettingKeyPair;
import com.microsoft.azure.management.compute.models.SshSettingPublicKey;
import com.microsoft.azure.management.compute.models.SshSettings;
import com.microsoft.azure.management.compute.models.StoredCertificateSettings;
import com.microsoft.azure.management.compute.models.UpgradeDomainState;
import com.microsoft.azure.management.compute.models.UpgradeStatus;
import com.microsoft.azure.management.compute.models.VirtualIPAddress;
import com.microsoft.azure.management.compute.models.VirtualMachineWindowsRemoteManagementListenerType;
import com.microsoft.azure.management.compute.models.WindowsRemoteManagementListener;
import com.microsoft.azure.management.compute.models.WindowsRemoteManagementSettings;
import com.microsoft.azure.tracing.ClientRequestTrackingHandler;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

/**
* The Service Management API includes operations for managing the deployments
* in your subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for more
* information)
*/
public class DeploymentOperationsImpl implements ServiceOperations<ComputeManagementClientImpl>, DeploymentOperations {
    /**
    * Initializes a new instance of the DeploymentOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    DeploymentOperationsImpl(ComputeManagementClientImpl client) {
        this.client = client;
    }
    
    private ComputeManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.compute.ComputeManagementClientImpl.
    * @return The Client value.
    */
    public ComputeManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * The Begin Changing Deployment Configuration By Name operation initiates a
    * change to the deployment configuration. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentName Required. The deployment to change configuration
    * for.
    * @param parameters Required. Parameters supplied to the Begin Changing
    * Configuration Deployment By Name operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginChangingConfigurationByNameAsync(final String serviceName, final String deploymentName, final DeploymentChangeConfigurationParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginChangingConfigurationByName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Changing Deployment Configuration By Name operation initiates a
    * change to the deployment configuration. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentName Required. The deployment to change configuration
    * for.
    * @param parameters Required. Parameters supplied to the Begin Changing
    * Configuration Deployment By Name operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginChangingConfigurationByName(String serviceName, String deploymentName, DeploymentChangeConfigurationParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getConfiguration() == null) {
            throw new NullPointerException("parameters.Configuration");
        }
        if (parameters.getExtensionConfiguration() != null) {
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                for (ExtensionConfiguration.Extension allRolesParameterItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    if (allRolesParameterItem.getId() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
            }
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                for (ExtensionConfiguration.NamedRole namedRolesParameterItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    if (namedRolesParameterItem.getExtensions() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    if (namedRolesParameterItem.getExtensions() != null) {
                        for (ExtensionConfiguration.Extension extensionsParameterItem : namedRolesParameterItem.getExtensions()) {
                            if (extensionsParameterItem.getId() == null) {
                                throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                            }
                        }
                    }
                    if (namedRolesParameterItem.getRoleName() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginChangingConfigurationByNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/" + "?" + "comp=config";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ChangeConfiguration");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        xmlSerializer.text(Base64.encode(parameters.getConfiguration().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        
        if (parameters.isTreatWarningsAsError() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TreatWarningsAsError");
            xmlSerializer.text(Boolean.toString(parameters.isTreatWarningsAsError()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TreatWarningsAsError");
        }
        
        if (parameters.getMode() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Mode");
            xmlSerializer.text(parameters.getMode().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Mode");
        }
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        
        if (parameters.getExtensionConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
            
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
                for (ExtensionConfiguration.Extension allRolesItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.text(allRolesItem.getId());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
            }
            
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
                for (ExtensionConfiguration.NamedRole namedRolesItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Role");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    xmlSerializer.text(namedRolesItem.getRoleName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    for (ExtensionConfiguration.Extension extensionsItem : namedRolesItem.getExtensions()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.text(extensionsItem.getId());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Role");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ChangeConfiguration");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Changing Deployment Configuration By Slot operation initiates a
    * change to the deployment configuration. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentSlot Required. The slot to change deployment
    * configuration for.
    * @param parameters Required. Parameters supplied to the Begin Changing
    * Configuration Deployment By Slot operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginChangingConfigurationBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentChangeConfigurationParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginChangingConfigurationBySlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Begin Changing Deployment Configuration By Slot operation initiates a
    * change to the deployment configuration. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentSlot Required. The slot to change deployment
    * configuration for.
    * @param parameters Required. Parameters supplied to the Begin Changing
    * Configuration Deployment By Slot operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginChangingConfigurationBySlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getConfiguration() == null) {
            throw new NullPointerException("parameters.Configuration");
        }
        if (parameters.getExtensionConfiguration() != null) {
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                for (ExtensionConfiguration.Extension allRolesParameterItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    if (allRolesParameterItem.getId() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
            }
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                for (ExtensionConfiguration.NamedRole namedRolesParameterItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    if (namedRolesParameterItem.getExtensions() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    if (namedRolesParameterItem.getExtensions() != null) {
                        for (ExtensionConfiguration.Extension extensionsParameterItem : namedRolesParameterItem.getExtensions()) {
                            if (extensionsParameterItem.getId() == null) {
                                throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                            }
                        }
                    }
                    if (namedRolesParameterItem.getRoleName() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginChangingConfigurationBySlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/" + "?" + "comp=config";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ChangeConfiguration");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        xmlSerializer.text(Base64.encode(parameters.getConfiguration().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        
        if (parameters.isTreatWarningsAsError() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TreatWarningsAsError");
            xmlSerializer.text(Boolean.toString(parameters.isTreatWarningsAsError()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TreatWarningsAsError");
        }
        
        if (parameters.getMode() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Mode");
            xmlSerializer.text(parameters.getMode().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Mode");
        }
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        
        if (parameters.getExtensionConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
            
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
                for (ExtensionConfiguration.Extension allRolesItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.text(allRolesItem.getId());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
            }
            
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
                for (ExtensionConfiguration.NamedRole namedRolesItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Role");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    xmlSerializer.text(namedRolesItem.getRoleName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    for (ExtensionConfiguration.Extension extensionsItem : namedRolesItem.getExtensions()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.text(extensionsItem.getId());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Role");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ChangeConfiguration");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Creating Deployment operation uploads a new service package and
    * creates a new deployment in the staging or production environments. This
    * operation is an asynchronous operation. To determine whether the
    * management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to create a deployment for.
    * @param deploymentSlot Required. The slot to create a deployment for.
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Deployment operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginCreatingAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginCreating(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Begin Creating Deployment operation uploads a new service package and
    * creates a new deployment in the staging or production environments. This
    * operation is an asynchronous operation. To determine whether the
    * management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to create a deployment for.
    * @param deploymentSlot Required. The slot to create a deployment for.
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Deployment operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginCreating(String serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getConfiguration() == null) {
            throw new NullPointerException("parameters.Configuration");
        }
        if (parameters.getExtensionConfiguration() != null) {
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                for (ExtensionConfiguration.Extension allRolesParameterItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    if (allRolesParameterItem.getId() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
            }
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                for (ExtensionConfiguration.NamedRole namedRolesParameterItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    if (namedRolesParameterItem.getExtensions() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    if (namedRolesParameterItem.getExtensions() != null) {
                        for (ExtensionConfiguration.Extension extensionsParameterItem : namedRolesParameterItem.getExtensions()) {
                            if (extensionsParameterItem.getId() == null) {
                                throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                            }
                        }
                    }
                    if (namedRolesParameterItem.getRoleName() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
        }
        if (parameters.getLabel() == null) {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getLabel().length() > 100) {
            throw new IllegalArgumentException("parameters.Label");
        }
        if (parameters.getName() == null) {
            throw new NullPointerException("parameters.Name");
        }
        if (parameters.getPackageUri() == null) {
            throw new NullPointerException("parameters.PackageUri");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginCreatingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot;
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CreateDeployment");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
        xmlSerializer.text(parameters.getName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PackageUrl");
        xmlSerializer.text(parameters.getPackageUri().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PackageUrl");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
        xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        xmlSerializer.text(Base64.encode(parameters.getConfiguration().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        
        if (parameters.isStartDeployment() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StartDeployment");
            xmlSerializer.text(Boolean.toString(parameters.isStartDeployment()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StartDeployment");
        }
        
        if (parameters.isTreatWarningsAsError() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TreatWarningsAsError");
            xmlSerializer.text(Boolean.toString(parameters.isTreatWarningsAsError()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TreatWarningsAsError");
        }
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        
        if (parameters.getExtensionConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
            
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
                for (ExtensionConfiguration.Extension allRolesItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.text(allRolesItem.getId());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
            }
            
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
                for (ExtensionConfiguration.NamedRole namedRolesItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Role");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    xmlSerializer.text(namedRolesItem.getRoleName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    for (ExtensionConfiguration.Extension extensionsItem : namedRolesItem.getExtensions()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.text(extensionsItem.getId());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Role");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CreateDeployment");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Deleting Deployment By Name operation deletes the specified
    * deployment. This operation is an asynchronous operation. To determine
    * whether the Management service has finished processing the request, call
    * Get Operation Status. For more information on asynchronous operations,
    * see Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param deleteFromStorage Required. Specifies that the source blob for the
    * disk should also be deleted from storage.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginDeletingByNameAsync(final String serviceName, final String deploymentName, final boolean deleteFromStorage) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginDeletingByName(serviceName, deploymentName, deleteFromStorage);
            }
         });
    }
    
    /**
    * The Begin Deleting Deployment By Name operation deletes the specified
    * deployment. This operation is an asynchronous operation. To determine
    * whether the Management service has finished processing the request, call
    * Get Operation Status. For more information on asynchronous operations,
    * see Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param deleteFromStorage Required. Specifies that the source blob for the
    * disk should also be deleted from storage.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginDeletingByName(String serviceName, String deploymentName, boolean deleteFromStorage) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("deleteFromStorage", deleteFromStorage);
            CloudTracing.enter(invocationId, this, "beginDeletingByNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "?";
        if (deleteFromStorage == true) {
            url = url + "comp=" + "media";
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Deleting Deployment By Slot operation deletes the specified
    * deployment. This operation is an asynchronous operation. To determine
    * whether the Management service has finished processing the request, call
    * Get Operation Status. For more information on asynchronous operations,
    * see Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginDeletingBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginDeletingBySlot(serviceName, deploymentSlot);
            }
         });
    }
    
    /**
    * The Begin Deleting Deployment By Slot operation deletes the specified
    * deployment. This operation is an asynchronous operation. To determine
    * whether the Management service has finished processing the request, call
    * Get Operation Status. For more information on asynchronous operations,
    * see Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginDeletingBySlot(String serviceName, DeploymentSlot deploymentSlot) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            CloudTracing.enter(invocationId, this, "beginDeletingBySlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot;
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Delete Role Instances operation deletes a role instance from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The name of the deployment slot.
    * @param parameters Required. The parameters to delete the role.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginDeletingRoleInstanceByBeploymentSlotAsync(final String serviceName, final String deploymentSlot, final DeploymentDeleteRoleInstanceParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginDeletingRoleInstanceByBeploymentSlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Delete Role Instances operation deletes a role instance from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The name of the deployment slot.
    * @param parameters Required. The parameters to delete the role.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginDeletingRoleInstanceByBeploymentSlot(String serviceName, String deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentSlot == null) {
            throw new NullPointerException("deploymentSlot");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginDeletingRoleInstanceByBeploymentSlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot.trim() + "/roleinstances/" + "?" + "comp=delete";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DeploymentDeleteRoleInstanceParameters");
        
        if (parameters.getName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleInstances");
            for (String roleInstancesItem : parameters.getName()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(roleInstancesItem);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleInstances");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DeploymentDeleteRoleInstanceParameters");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Delete Role Instances operation deletes a role instance from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of the deployment.
    * @param parameters Required. The parameters to delete the role.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginDeletingRoleInstanceByDeploymentNameAsync(final String serviceName, final String deploymentName, final DeploymentDeleteRoleInstanceParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginDeletingRoleInstanceByDeploymentName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Delete Role Instances operation deletes a role instance from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of the deployment.
    * @param parameters Required. The parameters to delete the role.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginDeletingRoleInstanceByDeploymentName(String serviceName, String deploymentName, DeploymentDeleteRoleInstanceParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginDeletingRoleInstanceByDeploymentNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + "?" + "comp=delete";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DeploymentDeleteRoleInstanceParameters");
        
        if (parameters.getName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleInstances");
            for (String roleInstancesItem : parameters.getName()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(roleInstancesItem);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleInstances");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DeploymentDeleteRoleInstanceParameters");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Rebooting Role Instance By Deployment Name operation requests a
    * reboot of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginRebootingRoleInstanceByDeploymentNameAsync(final String serviceName, final String deploymentName, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginRebootingRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName);
            }
         });
    }
    
    /**
    * The Begin Rebooting Role Instance By Deployment Name operation requests a
    * reboot of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginRebootingRoleInstanceByDeploymentName(String serviceName, String deploymentName, String roleInstanceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (roleInstanceName == null) {
            throw new NullPointerException("roleInstanceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "beginRebootingRoleInstanceByDeploymentNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + roleInstanceName.trim() + "?" + "comp=reboot";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Rebooting Role Instance By Deployment Slot operation requests a
    * reboot of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginRebootingRoleInstanceByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginRebootingRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName);
            }
         });
    }
    
    /**
    * The Begin Rebooting Role Instance By Deployment Slot operation requests a
    * reboot of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginRebootingRoleInstanceByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, String roleInstanceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (roleInstanceName == null) {
            throw new NullPointerException("roleInstanceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "beginRebootingRoleInstanceByDeploymentSlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/roleinstances/" + roleInstanceName.trim() + "?" + "comp=reboot";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Reimaging Role Instance By Deployment Name operation requests a
    * reimage of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginReimagingRoleInstanceByDeploymentNameAsync(final String serviceName, final String deploymentName, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginReimagingRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName);
            }
         });
    }
    
    /**
    * The Begin Reimaging Role Instance By Deployment Name operation requests a
    * reimage of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginReimagingRoleInstanceByDeploymentName(String serviceName, String deploymentName, String roleInstanceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (roleInstanceName == null) {
            throw new NullPointerException("roleInstanceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "beginReimagingRoleInstanceByDeploymentNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + roleInstanceName.trim() + "?" + "comp=reimage";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Reimaging Role Instance By Deployment Slot operation requests a
    * reimage of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginReimagingRoleInstanceByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginReimagingRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName);
            }
         });
    }
    
    /**
    * The Begin Reimaging Role Instance By Deployment Slot operation requests a
    * reimage of a role instance that is running in a deployment. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginReimagingRoleInstanceByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, String roleInstanceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (roleInstanceName == null) {
            throw new NullPointerException("roleInstanceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "beginReimagingRoleInstanceByDeploymentSlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/roleinstances/" + roleInstanceName.trim() + "?" + "comp=reimage";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Swapping Deployment operation initiates a virtual IP address
    * swap between the staging and production deployment environments for a
    * service. If the service is currently running in the staging environment,
    * it will be swapped to the production environment. If it is running in
    * the production environment, it will be swapped to staging. For more
    * information on this type of upgrade, see Performing Virtual IP Swap
    * Upgrades at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param parameters Required. Parameters supplied to the Begin Swapping
    * Deployment operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginSwappingAsync(final String serviceName, final DeploymentSwapParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginSwapping(serviceName, parameters);
            }
         });
    }
    
    /**
    * The Begin Swapping Deployment operation initiates a virtual IP address
    * swap between the staging and production deployment environments for a
    * service. If the service is currently running in the staging environment,
    * it will be swapped to the production environment. If it is running in
    * the production environment, it will be swapped to staging. For more
    * information on this type of upgrade, see Performing Virtual IP Swap
    * Upgrades at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param parameters Required. Parameters supplied to the Begin Swapping
    * Deployment operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginSwapping(String serviceName, DeploymentSwapParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getSourceDeployment() == null) {
            throw new NullPointerException("parameters.SourceDeployment");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginSwappingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Swap");
        
        if (parameters.getProductionDeployment() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Production");
            xmlSerializer.text(parameters.getProductionDeployment());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Production");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SourceDeployment");
        xmlSerializer.text(parameters.getSourceDeployment());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SourceDeployment");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Swap");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Updating Deployment Status By Deployment Name operation
    * initiates a change in the running status of a deployment. The status of
    * a deployment can be running or suspended. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Deployment Status By Deployment Name operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUpdatingStatusByDeploymentNameAsync(final String serviceName, final String deploymentName, final DeploymentUpdateStatusParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUpdatingStatusByDeploymentName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Updating Deployment Status By Deployment Name operation
    * initiates a change in the running status of a deployment. The status of
    * a deployment can be running or suspended. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Deployment Status By Deployment Name operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUpdatingStatusByDeploymentName(String serviceName, String deploymentName, DeploymentUpdateStatusParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginUpdatingStatusByDeploymentNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/" + "?" + "comp=status";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpdateDeploymentStatus");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Status");
        xmlSerializer.text(parameters.getStatus().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Status");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpdateDeploymentStatus");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Updating Deployment Status By Deployment Slot operation
    * initiates a change in the running status of a deployment. The status of
    * a deployment can be running or suspended. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Deployment Status By Deployment Slot operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUpdatingStatusByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentUpdateStatusParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUpdatingStatusByDeploymentSlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Begin Updating Deployment Status By Deployment Slot operation
    * initiates a change in the running status of a deployment. The status of
    * a deployment can be running or suspended. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Deployment Status By Deployment Slot operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUpdatingStatusByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginUpdatingStatusByDeploymentSlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/" + "?" + "comp=status";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpdateDeploymentStatus");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Status");
        xmlSerializer.text(parameters.getStatus().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Status");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpdateDeploymentStatus");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Upgrading Deployment By Name operation initiates an update of
    * role instances in a deployment using the package and configuration that
    * you specify. For more information about updating role instances, see
    * Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentName Required. The deployment to upgrade.
    * @param parameters Required. Parameters supplied to the Begin Upgrading
    * Deployment By Name operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUpgradingByNameAsync(final String serviceName, final String deploymentName, final DeploymentUpgradeParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUpgradingByName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Upgrading Deployment By Name operation initiates an update of
    * role instances in a deployment using the package and configuration that
    * you specify. For more information about updating role instances, see
    * Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentName Required. The deployment to upgrade.
    * @param parameters Required. Parameters supplied to the Begin Upgrading
    * Deployment By Name operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUpgradingByName(String serviceName, String deploymentName, DeploymentUpgradeParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getConfiguration() == null) {
            throw new NullPointerException("parameters.Configuration");
        }
        if (parameters.getExtensionConfiguration() != null) {
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                for (ExtensionConfiguration.Extension allRolesParameterItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    if (allRolesParameterItem.getId() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
            }
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                for (ExtensionConfiguration.NamedRole namedRolesParameterItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    if (namedRolesParameterItem.getExtensions() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    if (namedRolesParameterItem.getExtensions() != null) {
                        for (ExtensionConfiguration.Extension extensionsParameterItem : namedRolesParameterItem.getExtensions()) {
                            if (extensionsParameterItem.getId() == null) {
                                throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                            }
                        }
                    }
                    if (namedRolesParameterItem.getRoleName() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
        }
        if (parameters.getLabel() == null) {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getLabel().length() > 100) {
            throw new IllegalArgumentException("parameters.Label");
        }
        if (parameters.getPackageUri() == null) {
            throw new NullPointerException("parameters.PackageUri");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginUpgradingByNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/" + "?" + "comp=upgrade";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpgradeDeployment");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Mode");
        xmlSerializer.text(parameters.getMode().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Mode");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PackageUrl");
        xmlSerializer.text(parameters.getPackageUri().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PackageUrl");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        xmlSerializer.text(Base64.encode(parameters.getConfiguration().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
        xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        
        if (parameters.getRoleToUpgrade() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleToUpgrade");
            xmlSerializer.text(parameters.getRoleToUpgrade());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleToUpgrade");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Force");
        xmlSerializer.text(Boolean.toString(parameters.isForce()).toLowerCase());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Force");
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        
        if (parameters.getExtensionConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
            
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
                for (ExtensionConfiguration.Extension allRolesItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.text(allRolesItem.getId());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
            }
            
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
                for (ExtensionConfiguration.NamedRole namedRolesItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Role");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    xmlSerializer.text(namedRolesItem.getRoleName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    for (ExtensionConfiguration.Extension extensionsItem : namedRolesItem.getExtensions()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.text(extensionsItem.getId());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Role");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpgradeDeployment");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Upgrading Deployment By Slot operation initiates an update of
    * role instances in a deployment using the package and configuration that
    * you specify. For more information about updating role instances, see
    * Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentSlot Required. The slot to upgrade.
    * @param parameters Required. Parameters supplied to the Begin Upgrading
    * Deployment By Slot operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUpgradingBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentUpgradeParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUpgradingBySlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Begin Upgrading Deployment By Slot operation initiates an update of
    * role instances in a deployment using the package and configuration that
    * you specify. For more information about updating role instances, see
    * Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentSlot Required. The slot to upgrade.
    * @param parameters Required. Parameters supplied to the Begin Upgrading
    * Deployment By Slot operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUpgradingBySlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getConfiguration() == null) {
            throw new NullPointerException("parameters.Configuration");
        }
        if (parameters.getExtensionConfiguration() != null) {
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                for (ExtensionConfiguration.Extension allRolesParameterItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    if (allRolesParameterItem.getId() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
            }
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                for (ExtensionConfiguration.NamedRole namedRolesParameterItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    if (namedRolesParameterItem.getExtensions() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    if (namedRolesParameterItem.getExtensions() != null) {
                        for (ExtensionConfiguration.Extension extensionsParameterItem : namedRolesParameterItem.getExtensions()) {
                            if (extensionsParameterItem.getId() == null) {
                                throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                            }
                        }
                    }
                    if (namedRolesParameterItem.getRoleName() == null) {
                        throw new NullPointerException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
        }
        if (parameters.getLabel() == null) {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getLabel().length() > 100) {
            throw new IllegalArgumentException("parameters.Label");
        }
        if (parameters.getPackageUri() == null) {
            throw new NullPointerException("parameters.PackageUri");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginUpgradingBySlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/" + "?" + "comp=upgrade";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpgradeDeployment");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Mode");
        xmlSerializer.text(parameters.getMode().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Mode");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PackageUrl");
        xmlSerializer.text(parameters.getPackageUri().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PackageUrl");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        xmlSerializer.text(Base64.encode(parameters.getConfiguration().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Configuration");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
        xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        
        if (parameters.getRoleToUpgrade() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleToUpgrade");
            xmlSerializer.text(parameters.getRoleToUpgrade());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleToUpgrade");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Force");
        xmlSerializer.text(Boolean.toString(parameters.isForce()).toLowerCase());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Force");
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        
        if (parameters.getExtensionConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
            
            if (parameters.getExtensionConfiguration().getAllRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
                for (ExtensionConfiguration.Extension allRolesItem : parameters.getExtensionConfiguration().getAllRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.text(allRolesItem.getId());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AllRoles");
            }
            
            if (parameters.getExtensionConfiguration().getNamedRoles() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
                for (ExtensionConfiguration.NamedRole namedRolesItem : parameters.getExtensionConfiguration().getNamedRoles()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Role");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    xmlSerializer.text(namedRolesItem.getRoleName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    for (ExtensionConfiguration.Extension extensionsItem : namedRolesItem.getExtensions()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.text(extensionsItem.getId());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extensions");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Role");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NamedRoles");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionConfiguration");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpgradeDeployment");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Walking Upgrade Domain By Deployment Name operation specifies
    * an update domain in which a role instance must be updated. For more
    * information about updating role instances, see Update an Azure Service
    * at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Walking
    * Upgrade Domain By Deployment Name operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginWalkingUpgradeDomainByDeploymentNameAsync(final String serviceName, final String deploymentName, final DeploymentWalkUpgradeDomainParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginWalkingUpgradeDomainByDeploymentName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Walking Upgrade Domain By Deployment Name operation specifies
    * an update domain in which a role instance must be updated. For more
    * information about updating role instances, see Update an Azure Service
    * at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Walking
    * Upgrade Domain By Deployment Name operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginWalkingUpgradeDomainByDeploymentName(String serviceName, String deploymentName, DeploymentWalkUpgradeDomainParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginWalkingUpgradeDomainByDeploymentNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "?" + "comp=walkupgradedomain";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WalkUpgradeDomain");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpgradeDomain");
        xmlSerializer.text(Integer.toString(parameters.getUpgradeDomain()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpgradeDomain");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WalkUpgradeDomain");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Walking Upgrade Domain By Deployment Slot operation specifies
    * an update domain in which a role instance must be updated. For more
    * information about updating role instances, see Update an Azure Service
    * at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Begin Walking
    * Upgrade Domain By Deployment Slot operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginWalkingUpgradeDomainByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentWalkUpgradeDomainParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginWalkingUpgradeDomainByDeploymentSlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Begin Walking Upgrade Domain By Deployment Slot operation specifies
    * an update domain in which a role instance must be updated. For more
    * information about updating role instances, see Update an Azure Service
    * at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Begin Walking
    * Upgrade Domain By Deployment Slot operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginWalkingUpgradeDomainByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginWalkingUpgradeDomainByDeploymentSlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/" + "?" + "comp=walkupgradedomain";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WalkUpgradeDomain");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpgradeDomain");
        xmlSerializer.text(Integer.toString(parameters.getUpgradeDomain()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpgradeDomain");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WalkUpgradeDomain");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Change Deployment Configuration By Name operation initiates a change
    * to the deployment configuration. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentName Required. The deployment to change configuration
    * for.
    * @param parameters Required. Parameters supplied to the Change
    * ConfigurationDeployment By Name operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> changeConfigurationByNameAsync(final String serviceName, final String deploymentName, final DeploymentChangeConfigurationParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return changeConfigurationByName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Change Deployment Configuration By Name operation initiates a change
    * to the deployment configuration. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentName Required. The deployment to change configuration
    * for.
    * @param parameters Required. Parameters supplied to the Change
    * ConfigurationDeployment By Name operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse changeConfigurationByName(String serviceName, String deploymentName, DeploymentChangeConfigurationParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "changeConfigurationByNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginChangingConfigurationByNameAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Change Deployment Configuration By Slot operation initiates a change
    * to the deployment configuration. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentSlot Required. The slot to change deployment
    * configuration for.
    * @param parameters Required. Parameters supplied to the Change
    * Configuration Deployment By Slot operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> changeConfigurationBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentChangeConfigurationParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return changeConfigurationBySlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Change Deployment Configuration By Slot operation initiates a change
    * to the deployment configuration. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to change deployment
    * configuration for.
    * @param deploymentSlot Required. The slot to change deployment
    * configuration for.
    * @param parameters Required. Parameters supplied to the Change
    * Configuration Deployment By Slot operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse changeConfigurationBySlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "changeConfigurationBySlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginChangingConfigurationBySlotAsync(serviceName, deploymentSlot, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Create Deployment operation uploads a new service package and creates
    * a new deployment in the staging or production environments. This
    * operation is an asynchronous operation. To determine whether the
    * management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to create a deployment for.
    * @param deploymentSlot Required. The slot to create a deployment for.
    * @param parameters Required. Parameters supplied to the Create Deployment
    * operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> createAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return create(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Create Deployment operation uploads a new service package and creates
    * a new deployment in the staging or production environments. This
    * operation is an asynchronous operation. To determine whether the
    * management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to create a deployment for.
    * @param deploymentSlot Required. The slot to create a deployment for.
    * @param parameters Required. Parameters supplied to the Create Deployment
    * operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse create(String serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters) throws InterruptedException, ExecutionException, ServiceException, MalformedURLException, ProtocolException, IOException, XmlPullParserException, URISyntaxException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginCreatingAsync(serviceName, deploymentSlot, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Delete Deployment By Name operation deletes the specified deployment.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param deleteFromStorage Required. Specifies that the source blob for the
    * disk should also be deleted from storage.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> deleteByNameAsync(final String serviceName, final String deploymentName, final boolean deleteFromStorage) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return deleteByName(serviceName, deploymentName, deleteFromStorage);
            }
         });
    }
    
    /**
    * The Delete Deployment By Name operation deletes the specified deployment.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param deleteFromStorage Required. Specifies that the source blob for the
    * disk should also be deleted from storage.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse deleteByName(String serviceName, String deploymentName, boolean deleteFromStorage) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("deleteFromStorage", deleteFromStorage);
            CloudTracing.enter(invocationId, this, "deleteByNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginDeletingByNameAsync(serviceName, deploymentName, deleteFromStorage).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Delete Deployment By Slot operation deletes the specified deployment.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> deleteBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return deleteBySlot(serviceName, deploymentSlot);
            }
         });
    }
    
    /**
    * The Delete Deployment By Slot operation deletes the specified deployment.
    * This operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse deleteBySlot(String serviceName, DeploymentSlot deploymentSlot) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            CloudTracing.enter(invocationId, this, "deleteBySlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginDeletingBySlotAsync(serviceName, deploymentSlot).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Delete Role Instances operation deletes a role instance from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of the deployment.
    * @param roleInstanceName Required. The parameters to delete the role.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> deleteRoleInstanceByDeploymentNameAsync(final String serviceName, final String deploymentName, final DeploymentDeleteRoleInstanceParameters roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return deleteRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName);
            }
         });
    }
    
    /**
    * The Delete Role Instances operation deletes a role instance from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of the deployment.
    * @param roleInstanceName Required. The parameters to delete the role.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse deleteRoleInstanceByDeploymentName(String serviceName, String deploymentName, DeploymentDeleteRoleInstanceParameters roleInstanceName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "deleteRoleInstanceByDeploymentNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginDeletingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Delete Role Instances operation deletes the role instances from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The name of the deployment slot.
    * @param parameters Required. The parameters to delete the role.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> deleteRoleInstanceByDeploymentSlotAsync(final String serviceName, final String deploymentSlot, final DeploymentDeleteRoleInstanceParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return deleteRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Delete Role Instances operation deletes the role instances from a
    * deployment in a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The name of the deployment slot.
    * @param parameters Required. The parameters to delete the role.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse deleteRoleInstanceByDeploymentSlot(String serviceName, String deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "deleteRoleInstanceByDeploymentSlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationStatusResponse response = client2.getDeploymentsOperations().deleteRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).get();
        if (response.getStatus() == OperationStatus.Succeeded) {
            return response;
        }
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Get Deployment By Name operation returns configuration information,
    * status, and system properties for a deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of the deployment.
    * @return A deployment that exists in the cloud service.
    */
    @Override
    public Future<DeploymentGetResponse> getByNameAsync(final String serviceName, final String deploymentName) {
        return this.getClient().getExecutorService().submit(new Callable<DeploymentGetResponse>() { 
            @Override
            public DeploymentGetResponse call() throws Exception {
                return getByName(serviceName, deploymentName);
            }
         });
    }
    
    /**
    * The Get Deployment By Name operation returns configuration information,
    * status, and system properties for a deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of the deployment.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return A deployment that exists in the cloud service.
    */
    @Override
    public DeploymentGetResponse getByName(String serviceName, String deploymentName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            CloudTracing.enter(invocationId, this, "getByNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DeploymentGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new DeploymentGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Deployment".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Deployment".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance = xmlPullParser.getText();
                                    result.setName(nameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "DeploymentSlot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "DeploymentSlot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                DeploymentSlot deploymentSlotInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    deploymentSlotInstance = DeploymentSlot.valueOf(xmlPullParser.getText());
                                    result.setDeploymentSlot(deploymentSlotInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PrivateID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PrivateID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String privateIDInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    privateIDInstance = xmlPullParser.getText();
                                    result.setPrivateId(privateIDInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                DeploymentStatus statusInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    statusInstance = DeploymentStatus.valueOf(xmlPullParser.getText());
                                    result.setStatus(statusInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String labelInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    labelInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                    result.setLabel(labelInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI urlInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    urlInstance = new URI(xmlPullParser.getText());
                                    result.setUri(urlInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Configuration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Configuration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String configurationInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    configurationInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                    result.setConfiguration(configurationInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RoleInstanceList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RoleInstanceList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "RoleInstance".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    RoleInstance roleInstanceInstance = new RoleInstance();
                                    result.getRoleInstances().add(roleInstanceInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleNameInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setRoleName(roleNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceNameInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceName(instanceNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceStatusInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceStatusInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceStatus(instanceStatusInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceFaultDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceFaultDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceSizeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceSizeInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceSize(instanceSizeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceStateDetails".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceStateDetails".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceStateDetailsInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceStateDetailsInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceStateDetails(instanceStateDetailsInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceErrorCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceErrorCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceErrorCodeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceErrorCodeInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceErrorCode(instanceErrorCodeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "IpAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "IpAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            InetAddress ipAddressInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                ipAddressInstance = InetAddress.getByName(xmlPullParser.getText());
                                                roleInstanceInstance.setIPAddress(ipAddressInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "InstanceEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                                roleInstanceInstance.getInstanceEndpoints().add(instanceEndpointInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance2 = xmlPullParser.getText();
                                                            instanceEndpointInstance.setName(nameInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "PublicPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "PublicPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        int publicPortInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            publicPortInstance = Integer.parseInt(xmlPullParser.getText());
                                                            instanceEndpointInstance.setPort(publicPortInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String protocolInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            protocolInstance = xmlPullParser.getText();
                                                            instanceEndpointInstance.setProtocol(protocolInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        InetAddress vipInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            vipInstance = InetAddress.getByName(xmlPullParser.getText());
                                                            instanceEndpointInstance.setVirtualIPAddress(vipInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "GuestAgentStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "GuestAgentStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            GuestAgentStatus guestAgentStatusInstance = new GuestAgentStatus();
                                            roleInstanceInstance.setGuestAgentStatus(guestAgentStatusInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "ProtocolVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "ProtocolVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String protocolVersionInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        protocolVersionInstance = xmlPullParser.getText();
                                                        guestAgentStatusInstance.setProtocolVersion(protocolVersionInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "GuestAgentVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "GuestAgentVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String guestAgentVersionInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        guestAgentVersionInstance = xmlPullParser.getText();
                                                        guestAgentStatusInstance.setGuestAgentVersion(guestAgentVersionInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String statusInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        statusInstance2 = xmlPullParser.getText();
                                                        guestAgentStatusInstance.setStatus(statusInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    GuestAgentMessage messageInstance = new GuestAgentMessage();
                                                    guestAgentStatusInstance.setMessage(messageInstance);
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String messageResourceIdInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                messageResourceIdInstance = xmlPullParser.getText();
                                                                messageInstance.setMessageResourceId(messageResourceIdInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                messageInstance.getParamList().add(xmlPullParser.getText());
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    GuestAgentFormattedMessage formattedMessageInstance = new GuestAgentFormattedMessage();
                                                    guestAgentStatusInstance.setFormattedMessage(formattedMessageInstance);
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String languageInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                languageInstance = xmlPullParser.getText();
                                                                formattedMessageInstance.setLanguage(languageInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String messageInstance2;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                messageInstance2 = xmlPullParser.getText();
                                                                formattedMessageInstance.setMessage(messageInstance2);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ResourceExtensionStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "ResourceExtensionStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                ResourceExtensionStatus resourceExtensionStatusInstance = new ResourceExtensionStatus();
                                                roleInstanceInstance.getResourceExtensionStatusList().add(resourceExtensionStatusInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "HandlerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "HandlerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String handlerNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            handlerNameInstance = xmlPullParser.getText();
                                                            resourceExtensionStatusInstance.setHandlerName(handlerNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String versionInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            versionInstance = xmlPullParser.getText();
                                                            resourceExtensionStatusInstance.setVersion(versionInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String statusInstance3;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            statusInstance3 = xmlPullParser.getText();
                                                            resourceExtensionStatusInstance.setStatus(statusInstance3);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        GuestAgentMessage messageInstance3 = new GuestAgentMessage();
                                                        resourceExtensionStatusInstance.setMessage(messageInstance3);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String messageResourceIdInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    messageResourceIdInstance2 = xmlPullParser.getText();
                                                                    messageInstance3.setMessageResourceId(messageResourceIdInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    messageInstance3.getParamList().add(xmlPullParser.getText());
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        GuestAgentFormattedMessage formattedMessageInstance2 = new GuestAgentFormattedMessage();
                                                        resourceExtensionStatusInstance.setFormattedMessage(formattedMessageInstance2);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String languageInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    languageInstance2 = xmlPullParser.getText();
                                                                    formattedMessageInstance2.setLanguage(languageInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String messageInstance4;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    messageInstance4 = xmlPullParser.getText();
                                                                    formattedMessageInstance2.setMessage(messageInstance4);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ExtensionSettingStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ExtensionSettingStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        ResourceExtensionConfigurationStatus extensionSettingStatusInstance = new ResourceExtensionConfigurationStatus();
                                                        resourceExtensionStatusInstance.setExtensionSettingStatus(extensionSettingStatusInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ConfigurationAppliedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ConfigurationAppliedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String nameInstance3;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    nameInstance3 = xmlPullParser.getText();
                                                                    extensionSettingStatusInstance.setName(nameInstance3);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String operationInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    operationInstance = xmlPullParser.getText();
                                                                    extensionSettingStatusInstance.setOperation(operationInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String statusInstance4;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    statusInstance4 = xmlPullParser.getText();
                                                                    extensionSettingStatusInstance.setStatus(statusInstance4);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                GuestAgentMessage messageInstance5 = new GuestAgentMessage();
                                                                extensionSettingStatusInstance.setMessage(messageInstance5);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String messageResourceIdInstance3;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            messageResourceIdInstance3 = xmlPullParser.getText();
                                                                            messageInstance5.setMessageResourceId(messageResourceIdInstance3);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            messageInstance5.getParamList().add(xmlPullParser.getText());
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                GuestAgentFormattedMessage formattedMessageInstance3 = new GuestAgentFormattedMessage();
                                                                extensionSettingStatusInstance.setFormattedMessage(formattedMessageInstance3);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String languageInstance3;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            languageInstance3 = xmlPullParser.getText();
                                                                            formattedMessageInstance3.setLanguage(languageInstance3);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String messageInstance6;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            messageInstance6 = xmlPullParser.getText();
                                                                            formattedMessageInstance3.setMessage(messageInstance6);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "SubStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "SubStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "SubStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    ResourceExtensionSubStatus subStatusInstance = new ResourceExtensionSubStatus();
                                                                    extensionSettingStatusInstance.getSubStatusList().add(subStatusInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String nameInstance4;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                nameInstance4 = xmlPullParser.getText();
                                                                                subStatusInstance.setName(nameInstance4);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String statusInstance5;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                statusInstance5 = xmlPullParser.getText();
                                                                                subStatusInstance.setStatus(statusInstance5);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            GuestAgentMessage messageInstance7 = new GuestAgentMessage();
                                                                            subStatusInstance.setMessage(messageInstance7);
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    String messageResourceIdInstance4;
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        messageResourceIdInstance4 = xmlPullParser.getText();
                                                                                        messageInstance7.setMessageResourceId(messageResourceIdInstance4);
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        messageInstance7.getParamList().add(xmlPullParser.getText());
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            GuestAgentFormattedMessage formattedMessageInstance4 = new GuestAgentFormattedMessage();
                                                                            subStatusInstance.setFormattedMessage(formattedMessageInstance4);
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    String languageInstance4;
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        languageInstance4 = xmlPullParser.getText();
                                                                                        formattedMessageInstance4.setLanguage(languageInstance4);
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    String messageInstance8;
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        messageInstance8 = xmlPullParser.getText();
                                                                                        formattedMessageInstance4.setMessage(messageInstance8);
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "PowerState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "PowerState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            RoleInstancePowerState powerStateInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                powerStateInstance = RoleInstancePowerState.valueOf(xmlPullParser.getText());
                                                roleInstanceInstance.setPowerState(powerStateInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String hostNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                hostNameInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setHostName(hostNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RemoteAccessCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RemoteAccessCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String remoteAccessCertificateThumbprintInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                remoteAccessCertificateThumbprintInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setRemoteAccessCertificateThumbprint(remoteAccessCertificateThumbprintInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                RoleInstance.PublicIP publicIPInstance = new RoleInstance.PublicIP();
                                                roleInstanceInstance.getPublicIPs().add(publicIPInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance5;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance5 = xmlPullParser.getText();
                                                            publicIPInstance.setName(nameInstance5);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        InetAddress addressInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            addressInstance = InetAddress.getByName(xmlPullParser.getText());
                                                            publicIPInstance.setAddress(addressInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "UpgradeStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UpgradeStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                                result.setUpgradeStatus(upgradeStatusInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "UpgradeType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "UpgradeType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        DeploymentUpgradeType upgradeTypeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            upgradeTypeInstance = DeploymentUpgradeType.valueOf(xmlPullParser.getText());
                                            upgradeStatusInstance.setUpgradeType(upgradeTypeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "CurrentUpgradeDomainState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "CurrentUpgradeDomainState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        UpgradeDomainState currentUpgradeDomainStateInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            currentUpgradeDomainStateInstance = UpgradeDomainState.valueOf(xmlPullParser.getText());
                                            upgradeStatusInstance.setCurrentUpgradeDomainState(currentUpgradeDomainStateInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "CurrentUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "CurrentUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        int currentUpgradeDomainInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            currentUpgradeDomainInstance = Integer.parseInt(xmlPullParser.getText());
                                            upgradeStatusInstance.setCurrentUpgradeDomain(currentUpgradeDomainInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "UpgradeDomainCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UpgradeDomainCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int upgradeDomainCountInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    upgradeDomainCountInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setUpgradeDomainCount(upgradeDomainCountInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RoleList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RoleList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Role".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    Role roleInstance = new Role();
                                    result.getRoles().add(roleInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleNameInstance2;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleNameInstance2 = xmlPullParser.getText();
                                                roleInstance.setRoleName(roleNameInstance2);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String osVersionInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                osVersionInstance = xmlPullParser.getText();
                                                roleInstance.setOSVersion(osVersionInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleTypeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleTypeInstance = xmlPullParser.getText();
                                                roleInstance.setRoleType(roleTypeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "ConfigurationSet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                                roleInstance.getConfigurationSets().add(configurationSetInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String configurationSetTypeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            configurationSetTypeInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setConfigurationSetType(configurationSetTypeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "InputEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                            configurationSetInstance.getInputEndpoints().add(inputEndpointInstance);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String loadBalancedEndpointSetNameInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        loadBalancedEndpointSetNameInstance = xmlPullParser.getText();
                                                                        inputEndpointInstance.setLoadBalancedEndpointSetName(loadBalancedEndpointSetNameInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String nameInstance6;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        nameInstance6 = xmlPullParser.getText();
                                                                        inputEndpointInstance.setName(nameInstance6);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                                    inputEndpointInstance.setLoadBalancerProbe(loadBalancerProbeInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String pathInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                pathInstance = xmlPullParser.getText();
                                                                                loadBalancerProbeInstance.setPath(pathInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            int portInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                portInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                loadBalancerProbeInstance.setPort(portInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            LoadBalancerProbeTransportProtocol protocolInstance2;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                protocolInstance2 = ComputeManagementClientImpl.parseLoadBalancerProbeTransportProtocol(xmlPullParser.getText());
                                                                                loadBalancerProbeInstance.setProtocol(protocolInstance2);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String protocolInstance3;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        protocolInstance3 = xmlPullParser.getText();
                                                                        inputEndpointInstance.setProtocol(protocolInstance3);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    InetAddress vipInstance2;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        vipInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                                        inputEndpointInstance.setVirtualIPAddress(vipInstance2);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String loadBalancerNameInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        loadBalancerNameInstance = xmlPullParser.getText();
                                                                        inputEndpointInstance.setLoadBalancerName(loadBalancerNameInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    EndpointAcl endpointAclInstance = new EndpointAcl();
                                                                    inputEndpointInstance.setEndpointAcl(endpointAclInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            if (eventType == XmlPullParser.START_TAG && "Rule".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                AccessControlListRule ruleInstance = new AccessControlListRule();
                                                                                endpointAclInstance.getRules().add(ruleInstance);
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String actionInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            actionInstance = xmlPullParser.getText();
                                                                                            ruleInstance.setAction(actionInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String remoteSubnetInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            remoteSubnetInstance = xmlPullParser.getText();
                                                                                            ruleInstance.setRemoteSubnet(remoteSubnetInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String descriptionInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            descriptionInstance = xmlPullParser.getText();
                                                                                            ruleInstance.setDescription(descriptionInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            configurationSetInstance.getSubnetNames().add(xmlPullParser.getText());
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String staticVirtualNetworkIPAddressInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            staticVirtualNetworkIPAddressInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setStaticVirtualNetworkIPAddress(staticVirtualNetworkIPAddressInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            ConfigurationSet.PublicIP publicIPInstance2 = new ConfigurationSet.PublicIP();
                                                            configurationSetInstance.getPublicIPs().add(publicIPInstance2);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String nameInstance7;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        nameInstance7 = xmlPullParser.getText();
                                                                        publicIPInstance2.setName(nameInstance7);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String computerNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            computerNameInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setComputerName(computerNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String adminPasswordInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            adminPasswordInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setAdminPassword(adminPasswordInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String timeZoneInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            timeZoneInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setTimeZone(timeZoneInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                                        configurationSetInstance.setDomainJoin(domainJoinInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                                domainJoinInstance.setCredentials(credentialsInstance);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String domainInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            domainInstance = xmlPullParser.getText();
                                                                            credentialsInstance.setDomain(domainInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String usernameInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            usernameInstance = xmlPullParser.getText();
                                                                            credentialsInstance.setUserName(usernameInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String passwordInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            passwordInstance = xmlPullParser.getText();
                                                                            credentialsInstance.setPassword(passwordInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String joinDomainInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    joinDomainInstance = xmlPullParser.getText();
                                                                    domainJoinInstance.setDomainToJoin(joinDomainInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String machineObjectOUInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    machineObjectOUInstance = xmlPullParser.getText();
                                                                    domainJoinInstance.setLdapMachineObjectOU(machineObjectOUInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                                domainJoinInstance.setProvisioning(provisioningInstance);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String accountDataInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            accountDataInstance = xmlPullParser.getText();
                                                                            provisioningInstance.setAccountData(accountDataInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "CertificateSetting".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                            configurationSetInstance.getStoredCertificateSettings().add(certificateSettingInstance);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String storeNameInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        storeNameInstance = xmlPullParser.getText();
                                                                        certificateSettingInstance.setStoreName(storeNameInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String thumbprintInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        thumbprintInstance = xmlPullParser.getText();
                                                                        certificateSettingInstance.setThumbprint(thumbprintInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                                        configurationSetInstance.setWindowsRemoteManagement(winRMInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "Listener".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                                    winRMInstance.getListeners().add(listenerInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            VirtualMachineWindowsRemoteManagementListenerType protocolInstance4;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                protocolInstance4 = VirtualMachineWindowsRemoteManagementListenerType.valueOf(xmlPullParser.getText());
                                                                                listenerInstance.setListenerType(protocolInstance4);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String certificateThumbprintInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                certificateThumbprintInstance = xmlPullParser.getText();
                                                                                listenerInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String adminUsernameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            adminUsernameInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setAdminUserName(adminUsernameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String hostNameInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            hostNameInstance2 = xmlPullParser.getText();
                                                            configurationSetInstance.setHostName(hostNameInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String userNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            userNameInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setUserName(userNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String userPasswordInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            userPasswordInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setUserPassword(userPasswordInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        SshSettings sSHInstance = new SshSettings();
                                                        configurationSetInstance.setSshSettings(sSHInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "PublicKey".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                                    sSHInstance.getPublicKeys().add(publicKeyInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String fingerprintInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                fingerprintInstance = xmlPullParser.getText();
                                                                                publicKeyInstance.setFingerprint(fingerprintInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String pathInstance2;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                pathInstance2 = xmlPullParser.getText();
                                                                                publicKeyInstance.setPath(pathInstance2);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "KeyPair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                                    sSHInstance.getKeyPairs().add(keyPairInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String fingerprintInstance2;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                fingerprintInstance2 = xmlPullParser.getText();
                                                                                keyPairInstance.setFingerprint(fingerprintInstance2);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String pathInstance3;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                pathInstance3 = xmlPullParser.getText();
                                                                                keyPairInstance.setPath(pathInstance3);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String customDataInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            customDataInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setCustomData(customDataInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ResourceExtensionReferences".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionReferences".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "ResourceExtensionReference".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                ResourceExtensionReference resourceExtensionReferenceInstance = new ResourceExtensionReference();
                                                roleInstance.getResourceExtensionReferences().add(resourceExtensionReferenceInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ReferenceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ReferenceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String referenceNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            referenceNameInstance = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setReferenceName(referenceNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Publisher".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Publisher".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String publisherInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            publisherInstance = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setPublisher(publisherInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance8;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance8 = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setName(nameInstance8);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String versionInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            versionInstance2 = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setVersion(versionInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ResourceExtensionParameterValues".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionParameterValues".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "ResourceExtensionParameterValue".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            ResourceExtensionParameterValue resourceExtensionParameterValueInstance = new ResourceExtensionParameterValue();
                                                            resourceExtensionReferenceInstance.getResourceExtensionParameterValues().add(resourceExtensionParameterValueInstance);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Key".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Key".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String keyInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        keyInstance = xmlPullParser.getText();
                                                                        resourceExtensionParameterValueInstance.setKey(keyInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String valueInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        valueInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                                                        resourceExtensionParameterValueInstance.setValue(valueInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String typeInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        typeInstance = xmlPullParser.getText();
                                                                        resourceExtensionParameterValueInstance.setType(typeInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String stateInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            stateInstance = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setState(stateInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "VMImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "VMImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String vMImageNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                vMImageNameInstance = xmlPullParser.getText();
                                                roleInstance.setVMImageName(vMImageNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "MediaLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "MediaLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            URI mediaLocationInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                mediaLocationInstance = new URI(xmlPullParser.getText());
                                                roleInstance.setMediaLocation(mediaLocationInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String availabilitySetNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                availabilitySetNameInstance = xmlPullParser.getText();
                                                roleInstance.setAvailabilitySetName(availabilitySetNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                                roleInstance.getDataVirtualHardDisks().add(dataVirtualHardDiskInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String hostCachingInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            hostCachingInstance = xmlPullParser.getText();
                                                            dataVirtualHardDiskInstance.setHostCaching(hostCachingInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String diskLabelInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            diskLabelInstance = xmlPullParser.getText();
                                                            dataVirtualHardDiskInstance.setLabel(diskLabelInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String diskNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            diskNameInstance = xmlPullParser.getText();
                                                            dataVirtualHardDiskInstance.setName(diskNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        URI mediaLinkInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            mediaLinkInstance = new URI(xmlPullParser.getText());
                                                            dataVirtualHardDiskInstance.setMediaLink(mediaLinkInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        URI sourceMediaLinkInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            sourceMediaLinkInstance = new URI(xmlPullParser.getText());
                                                            dataVirtualHardDiskInstance.setSourceMediaLink(sourceMediaLinkInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String labelInstance2;
                                            if (eventType == XmlPullParser.TEXT) {
                                                labelInstance2 = xmlPullParser.getText();
                                                roleInstance.setLabel(labelInstance2);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                            roleInstance.setOSVirtualHardDisk(oSVirtualHardDiskInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String hostCachingInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        hostCachingInstance2 = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setHostCaching(hostCachingInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String diskLabelInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        diskLabelInstance2 = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setLabel(diskLabelInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String diskNameInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        diskNameInstance2 = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setName(diskNameInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    URI mediaLinkInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        mediaLinkInstance2 = new URI(xmlPullParser.getText());
                                                        oSVirtualHardDiskInstance.setMediaLink(mediaLinkInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String sourceImageNameInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        sourceImageNameInstance = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setSourceImageName(sourceImageNameInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String osInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        osInstance = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setOperatingSystem(osInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleSizeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleSizeInstance = xmlPullParser.getText();
                                                roleInstance.setRoleSize(roleSizeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String defaultWinRmCertificateThumbprintInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                defaultWinRmCertificateThumbprintInstance = xmlPullParser.getText();
                                                roleInstance.setDefaultWinRmCertificateThumbprint(defaultWinRmCertificateThumbprintInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ProvisionGuestAgent".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ProvisionGuestAgent".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SdkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SdkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String sdkVersionInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    sdkVersionInstance = xmlPullParser.getText();
                                    result.setSdkVersion(sdkVersionInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Locked".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Locked".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RollbackAllowed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RollbackAllowed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "VirtualNetworkName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "VirtualNetworkName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String virtualNetworkNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    virtualNetworkNameInstance = xmlPullParser.getText();
                                    result.setVirtualNetworkName(virtualNetworkNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar createdTimeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    createdTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    result.setCreatedTime(createdTimeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar lastModifiedTimeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    lastModifiedTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    result.setLastModifiedTime(lastModifiedTimeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String key = null;
                                        String value = null;
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    key = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    value = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        if (key != null && value != null) {
                                            result.getExtendedProperties().put(key, xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Dns".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Dns".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                DnsSettings dnsInstance = new DnsSettings();
                                result.setDnsSettings(dnsInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "DnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "DnsServer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            DnsServer dnsServerInstance = new DnsServer();
                                            dnsInstance.getDnsServers().add(dnsServerInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String nameInstance9;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        nameInstance9 = xmlPullParser.getText();
                                                        dnsServerInstance.setName(nameInstance9);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    InetAddress addressInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        addressInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                        dnsServerInstance.setAddress(addressInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PersistentVMDowntime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PersistentVMDowntime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                                result.setPersistentVMDowntime(persistentVMDowntimeInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar startTimeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            startTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            persistentVMDowntimeInstance.setStartTime(startTimeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar endTimeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            endTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            persistentVMDowntimeInstance.setEndTime(endTimeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String statusInstance6;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusInstance6 = xmlPullParser.getText();
                                            persistentVMDowntimeInstance.setStatus(statusInstance6);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "VirtualIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "VirtualIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                    result.getVirtualIPAddresses().add(virtualIPInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            InetAddress addressInstance3;
                                            if (eventType == XmlPullParser.TEXT) {
                                                addressInstance3 = InetAddress.getByName(xmlPullParser.getText());
                                                virtualIPInstance.setAddress(addressInstance3);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String nameInstance10;
                                            if (eventType == XmlPullParser.TEXT) {
                                                nameInstance10 = xmlPullParser.getText();
                                                virtualIPInstance.setName(nameInstance10);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "IsDnsProgrammed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "IsDnsProgrammed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ExtensionConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ExtensionConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ExtensionConfiguration extensionConfigurationInstance = new ExtensionConfiguration();
                                result.setExtensionConfiguration(extensionConfigurationInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "AllRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AllRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            ExtensionConfiguration.Extension extensionInstance = new ExtensionConfiguration.Extension();
                                            extensionConfigurationInstance.getAllRoles().add(extensionInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String idInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        idInstance = xmlPullParser.getText();
                                                        extensionInstance.setId(idInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "NamedRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "NamedRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Role".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            ExtensionConfiguration.NamedRole roleInstance2 = new ExtensionConfiguration.NamedRole();
                                            extensionConfigurationInstance.getNamedRoles().add(roleInstance2);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String roleNameInstance3;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        roleNameInstance3 = xmlPullParser.getText();
                                                        roleInstance2.setRoleName(roleNameInstance3);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Extensions".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Extensions".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    if (eventType == XmlPullParser.START_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        ExtensionConfiguration.Extension extensionInstance2 = new ExtensionConfiguration.Extension();
                                                        roleInstance2.getExtensions().add(extensionInstance2);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String idInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    idInstance2 = xmlPullParser.getText();
                                                                    extensionInstance2.setId(idInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ReservedIPName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ReservedIPName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String reservedIPNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    reservedIPNameInstance = xmlPullParser.getText();
                                    result.setReservedIPName(reservedIPNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LoadBalancers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LoadBalancers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "LoadBalancer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    LoadBalancer loadBalancerInstance = new LoadBalancer();
                                    result.getLoadBalancers().add(loadBalancerInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String nameInstance11;
                                            if (eventType == XmlPullParser.TEXT) {
                                                nameInstance11 = xmlPullParser.getText();
                                                loadBalancerInstance.setName(nameInstance11);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "FrontendIpConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "FrontendIpConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            FrontendIPConfiguration frontendIpConfigurationInstance = new FrontendIPConfiguration();
                                            loadBalancerInstance.setFrontendIPConfiguration(frontendIpConfigurationInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String typeInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        typeInstance2 = xmlPullParser.getText();
                                                        frontendIpConfigurationInstance.setType(typeInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "SubnetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "SubnetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String subnetNameInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        subnetNameInstance = xmlPullParser.getText();
                                                        frontendIpConfigurationInstance.setSubnetName(subnetNameInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    InetAddress staticVirtualNetworkIPAddressInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        staticVirtualNetworkIPAddressInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                        frontendIpConfigurationInstance.setStaticVirtualNetworkIPAddress(staticVirtualNetworkIPAddressInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Get Deployment By Slot operation returns configuration information,
    * status, and system properties for a deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @return A deployment that exists in the cloud service.
    */
    @Override
    public Future<DeploymentGetResponse> getBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot) {
        return this.getClient().getExecutorService().submit(new Callable<DeploymentGetResponse>() { 
            @Override
            public DeploymentGetResponse call() throws Exception {
                return getBySlot(serviceName, deploymentSlot);
            }
         });
    }
    
    /**
    * The Get Deployment By Slot operation returns configuration information,
    * status, and system properties for a deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return A deployment that exists in the cloud service.
    */
    @Override
    public DeploymentGetResponse getBySlot(String serviceName, DeploymentSlot deploymentSlot) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            CloudTracing.enter(invocationId, this, "getBySlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot;
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DeploymentGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new DeploymentGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Deployment".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Deployment".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance = xmlPullParser.getText();
                                    result.setName(nameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "DeploymentSlot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "DeploymentSlot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                DeploymentSlot deploymentSlotInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    deploymentSlotInstance = DeploymentSlot.valueOf(xmlPullParser.getText());
                                    result.setDeploymentSlot(deploymentSlotInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PrivateID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PrivateID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String privateIDInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    privateIDInstance = xmlPullParser.getText();
                                    result.setPrivateId(privateIDInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                DeploymentStatus statusInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    statusInstance = DeploymentStatus.valueOf(xmlPullParser.getText());
                                    result.setStatus(statusInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String labelInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    labelInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                    result.setLabel(labelInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI urlInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    urlInstance = new URI(xmlPullParser.getText());
                                    result.setUri(urlInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Configuration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Configuration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String configurationInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    configurationInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                    result.setConfiguration(configurationInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RoleInstanceList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RoleInstanceList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "RoleInstance".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    RoleInstance roleInstanceInstance = new RoleInstance();
                                    result.getRoleInstances().add(roleInstanceInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleNameInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setRoleName(roleNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceNameInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceName(instanceNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceStatusInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceStatusInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceStatus(instanceStatusInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceFaultDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceFaultDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceSizeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceSizeInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceSize(instanceSizeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceStateDetails".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceStateDetails".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceStateDetailsInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceStateDetailsInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceStateDetails(instanceStateDetailsInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceErrorCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceErrorCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String instanceErrorCodeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                instanceErrorCodeInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setInstanceErrorCode(instanceErrorCodeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "IpAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "IpAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            InetAddress ipAddressInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                ipAddressInstance = InetAddress.getByName(xmlPullParser.getText());
                                                roleInstanceInstance.setIPAddress(ipAddressInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InstanceEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InstanceEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "InstanceEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                                roleInstanceInstance.getInstanceEndpoints().add(instanceEndpointInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance2 = xmlPullParser.getText();
                                                            instanceEndpointInstance.setName(nameInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "PublicPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "PublicPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        int publicPortInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            publicPortInstance = Integer.parseInt(xmlPullParser.getText());
                                                            instanceEndpointInstance.setPort(publicPortInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String protocolInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            protocolInstance = xmlPullParser.getText();
                                                            instanceEndpointInstance.setProtocol(protocolInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        InetAddress vipInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            vipInstance = InetAddress.getByName(xmlPullParser.getText());
                                                            instanceEndpointInstance.setVirtualIPAddress(vipInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "GuestAgentStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "GuestAgentStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            GuestAgentStatus guestAgentStatusInstance = new GuestAgentStatus();
                                            roleInstanceInstance.setGuestAgentStatus(guestAgentStatusInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "ProtocolVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "ProtocolVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String protocolVersionInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        protocolVersionInstance = xmlPullParser.getText();
                                                        guestAgentStatusInstance.setProtocolVersion(protocolVersionInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "GuestAgentVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "GuestAgentVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String guestAgentVersionInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        guestAgentVersionInstance = xmlPullParser.getText();
                                                        guestAgentStatusInstance.setGuestAgentVersion(guestAgentVersionInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String statusInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        statusInstance2 = xmlPullParser.getText();
                                                        guestAgentStatusInstance.setStatus(statusInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    GuestAgentMessage messageInstance = new GuestAgentMessage();
                                                    guestAgentStatusInstance.setMessage(messageInstance);
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String messageResourceIdInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                messageResourceIdInstance = xmlPullParser.getText();
                                                                messageInstance.setMessageResourceId(messageResourceIdInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                messageInstance.getParamList().add(xmlPullParser.getText());
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    GuestAgentFormattedMessage formattedMessageInstance = new GuestAgentFormattedMessage();
                                                    guestAgentStatusInstance.setFormattedMessage(formattedMessageInstance);
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String languageInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                languageInstance = xmlPullParser.getText();
                                                                formattedMessageInstance.setLanguage(languageInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String messageInstance2;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                messageInstance2 = xmlPullParser.getText();
                                                                formattedMessageInstance.setMessage(messageInstance2);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ResourceExtensionStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "ResourceExtensionStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                ResourceExtensionStatus resourceExtensionStatusInstance = new ResourceExtensionStatus();
                                                roleInstanceInstance.getResourceExtensionStatusList().add(resourceExtensionStatusInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "HandlerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "HandlerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String handlerNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            handlerNameInstance = xmlPullParser.getText();
                                                            resourceExtensionStatusInstance.setHandlerName(handlerNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String versionInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            versionInstance = xmlPullParser.getText();
                                                            resourceExtensionStatusInstance.setVersion(versionInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String statusInstance3;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            statusInstance3 = xmlPullParser.getText();
                                                            resourceExtensionStatusInstance.setStatus(statusInstance3);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        GuestAgentMessage messageInstance3 = new GuestAgentMessage();
                                                        resourceExtensionStatusInstance.setMessage(messageInstance3);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String messageResourceIdInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    messageResourceIdInstance2 = xmlPullParser.getText();
                                                                    messageInstance3.setMessageResourceId(messageResourceIdInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    messageInstance3.getParamList().add(xmlPullParser.getText());
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        GuestAgentFormattedMessage formattedMessageInstance2 = new GuestAgentFormattedMessage();
                                                        resourceExtensionStatusInstance.setFormattedMessage(formattedMessageInstance2);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String languageInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    languageInstance2 = xmlPullParser.getText();
                                                                    formattedMessageInstance2.setLanguage(languageInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String messageInstance4;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    messageInstance4 = xmlPullParser.getText();
                                                                    formattedMessageInstance2.setMessage(messageInstance4);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ExtensionSettingStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ExtensionSettingStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        ResourceExtensionConfigurationStatus extensionSettingStatusInstance = new ResourceExtensionConfigurationStatus();
                                                        resourceExtensionStatusInstance.setExtensionSettingStatus(extensionSettingStatusInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ConfigurationAppliedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ConfigurationAppliedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String nameInstance3;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    nameInstance3 = xmlPullParser.getText();
                                                                    extensionSettingStatusInstance.setName(nameInstance3);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String operationInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    operationInstance = xmlPullParser.getText();
                                                                    extensionSettingStatusInstance.setOperation(operationInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String statusInstance4;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    statusInstance4 = xmlPullParser.getText();
                                                                    extensionSettingStatusInstance.setStatus(statusInstance4);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                GuestAgentMessage messageInstance5 = new GuestAgentMessage();
                                                                extensionSettingStatusInstance.setMessage(messageInstance5);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String messageResourceIdInstance3;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            messageResourceIdInstance3 = xmlPullParser.getText();
                                                                            messageInstance5.setMessageResourceId(messageResourceIdInstance3);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            messageInstance5.getParamList().add(xmlPullParser.getText());
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                GuestAgentFormattedMessage formattedMessageInstance3 = new GuestAgentFormattedMessage();
                                                                extensionSettingStatusInstance.setFormattedMessage(formattedMessageInstance3);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String languageInstance3;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            languageInstance3 = xmlPullParser.getText();
                                                                            formattedMessageInstance3.setLanguage(languageInstance3);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String messageInstance6;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            messageInstance6 = xmlPullParser.getText();
                                                                            formattedMessageInstance3.setMessage(messageInstance6);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "SubStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "SubStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "SubStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    ResourceExtensionSubStatus subStatusInstance = new ResourceExtensionSubStatus();
                                                                    extensionSettingStatusInstance.getSubStatusList().add(subStatusInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String nameInstance4;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                nameInstance4 = xmlPullParser.getText();
                                                                                subStatusInstance.setName(nameInstance4);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String statusInstance5;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                statusInstance5 = xmlPullParser.getText();
                                                                                subStatusInstance.setStatus(statusInstance5);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            GuestAgentMessage messageInstance7 = new GuestAgentMessage();
                                                                            subStatusInstance.setMessage(messageInstance7);
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    String messageResourceIdInstance4;
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        messageResourceIdInstance4 = xmlPullParser.getText();
                                                                                        messageInstance7.setMessageResourceId(messageResourceIdInstance4);
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        messageInstance7.getParamList().add(xmlPullParser.getText());
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            GuestAgentFormattedMessage formattedMessageInstance4 = new GuestAgentFormattedMessage();
                                                                            subStatusInstance.setFormattedMessage(formattedMessageInstance4);
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    String languageInstance4;
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        languageInstance4 = xmlPullParser.getText();
                                                                                        formattedMessageInstance4.setLanguage(languageInstance4);
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    String messageInstance8;
                                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                                        messageInstance8 = xmlPullParser.getText();
                                                                                        formattedMessageInstance4.setMessage(messageInstance8);
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "PowerState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "PowerState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            RoleInstancePowerState powerStateInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                powerStateInstance = RoleInstancePowerState.valueOf(xmlPullParser.getText());
                                                roleInstanceInstance.setPowerState(powerStateInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String hostNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                hostNameInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setHostName(hostNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RemoteAccessCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RemoteAccessCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String remoteAccessCertificateThumbprintInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                remoteAccessCertificateThumbprintInstance = xmlPullParser.getText();
                                                roleInstanceInstance.setRemoteAccessCertificateThumbprint(remoteAccessCertificateThumbprintInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                RoleInstance.PublicIP publicIPInstance = new RoleInstance.PublicIP();
                                                roleInstanceInstance.getPublicIPs().add(publicIPInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance5;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance5 = xmlPullParser.getText();
                                                            publicIPInstance.setName(nameInstance5);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        InetAddress addressInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            addressInstance = InetAddress.getByName(xmlPullParser.getText());
                                                            publicIPInstance.setAddress(addressInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "UpgradeStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UpgradeStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                                result.setUpgradeStatus(upgradeStatusInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "UpgradeType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "UpgradeType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        DeploymentUpgradeType upgradeTypeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            upgradeTypeInstance = DeploymentUpgradeType.valueOf(xmlPullParser.getText());
                                            upgradeStatusInstance.setUpgradeType(upgradeTypeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "CurrentUpgradeDomainState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "CurrentUpgradeDomainState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        UpgradeDomainState currentUpgradeDomainStateInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            currentUpgradeDomainStateInstance = UpgradeDomainState.valueOf(xmlPullParser.getText());
                                            upgradeStatusInstance.setCurrentUpgradeDomainState(currentUpgradeDomainStateInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "CurrentUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "CurrentUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        int currentUpgradeDomainInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            currentUpgradeDomainInstance = Integer.parseInt(xmlPullParser.getText());
                                            upgradeStatusInstance.setCurrentUpgradeDomain(currentUpgradeDomainInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "UpgradeDomainCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UpgradeDomainCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int upgradeDomainCountInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    upgradeDomainCountInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setUpgradeDomainCount(upgradeDomainCountInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RoleList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RoleList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Role".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    Role roleInstance = new Role();
                                    result.getRoles().add(roleInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleNameInstance2;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleNameInstance2 = xmlPullParser.getText();
                                                roleInstance.setRoleName(roleNameInstance2);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String osVersionInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                osVersionInstance = xmlPullParser.getText();
                                                roleInstance.setOSVersion(osVersionInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleTypeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleTypeInstance = xmlPullParser.getText();
                                                roleInstance.setRoleType(roleTypeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "ConfigurationSet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                                roleInstance.getConfigurationSets().add(configurationSetInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String configurationSetTypeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            configurationSetTypeInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setConfigurationSetType(configurationSetTypeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "InputEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                            configurationSetInstance.getInputEndpoints().add(inputEndpointInstance);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String loadBalancedEndpointSetNameInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        loadBalancedEndpointSetNameInstance = xmlPullParser.getText();
                                                                        inputEndpointInstance.setLoadBalancedEndpointSetName(loadBalancedEndpointSetNameInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String nameInstance6;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        nameInstance6 = xmlPullParser.getText();
                                                                        inputEndpointInstance.setName(nameInstance6);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                                    inputEndpointInstance.setLoadBalancerProbe(loadBalancerProbeInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String pathInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                pathInstance = xmlPullParser.getText();
                                                                                loadBalancerProbeInstance.setPath(pathInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            int portInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                portInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                loadBalancerProbeInstance.setPort(portInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            LoadBalancerProbeTransportProtocol protocolInstance2;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                protocolInstance2 = ComputeManagementClientImpl.parseLoadBalancerProbeTransportProtocol(xmlPullParser.getText());
                                                                                loadBalancerProbeInstance.setProtocol(protocolInstance2);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String protocolInstance3;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        protocolInstance3 = xmlPullParser.getText();
                                                                        inputEndpointInstance.setProtocol(protocolInstance3);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    InetAddress vipInstance2;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        vipInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                                        inputEndpointInstance.setVirtualIPAddress(vipInstance2);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String loadBalancerNameInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        loadBalancerNameInstance = xmlPullParser.getText();
                                                                        inputEndpointInstance.setLoadBalancerName(loadBalancerNameInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    EndpointAcl endpointAclInstance = new EndpointAcl();
                                                                    inputEndpointInstance.setEndpointAcl(endpointAclInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            if (eventType == XmlPullParser.START_TAG && "Rule".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                AccessControlListRule ruleInstance = new AccessControlListRule();
                                                                                endpointAclInstance.getRules().add(ruleInstance);
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String actionInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            actionInstance = xmlPullParser.getText();
                                                                                            ruleInstance.setAction(actionInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String remoteSubnetInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            remoteSubnetInstance = xmlPullParser.getText();
                                                                                            ruleInstance.setRemoteSubnet(remoteSubnetInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String descriptionInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            descriptionInstance = xmlPullParser.getText();
                                                                                            ruleInstance.setDescription(descriptionInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            configurationSetInstance.getSubnetNames().add(xmlPullParser.getText());
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String staticVirtualNetworkIPAddressInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            staticVirtualNetworkIPAddressInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setStaticVirtualNetworkIPAddress(staticVirtualNetworkIPAddressInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            ConfigurationSet.PublicIP publicIPInstance2 = new ConfigurationSet.PublicIP();
                                                            configurationSetInstance.getPublicIPs().add(publicIPInstance2);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String nameInstance7;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        nameInstance7 = xmlPullParser.getText();
                                                                        publicIPInstance2.setName(nameInstance7);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String computerNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            computerNameInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setComputerName(computerNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String adminPasswordInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            adminPasswordInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setAdminPassword(adminPasswordInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String timeZoneInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            timeZoneInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setTimeZone(timeZoneInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                                        configurationSetInstance.setDomainJoin(domainJoinInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                                domainJoinInstance.setCredentials(credentialsInstance);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String domainInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            domainInstance = xmlPullParser.getText();
                                                                            credentialsInstance.setDomain(domainInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String usernameInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            usernameInstance = xmlPullParser.getText();
                                                                            credentialsInstance.setUserName(usernameInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String passwordInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            passwordInstance = xmlPullParser.getText();
                                                                            credentialsInstance.setPassword(passwordInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String joinDomainInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    joinDomainInstance = xmlPullParser.getText();
                                                                    domainJoinInstance.setDomainToJoin(joinDomainInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String machineObjectOUInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    machineObjectOUInstance = xmlPullParser.getText();
                                                                    domainJoinInstance.setLdapMachineObjectOU(machineObjectOUInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                                domainJoinInstance.setProvisioning(provisioningInstance);
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String accountDataInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            accountDataInstance = xmlPullParser.getText();
                                                                            provisioningInstance.setAccountData(accountDataInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "CertificateSetting".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                            configurationSetInstance.getStoredCertificateSettings().add(certificateSettingInstance);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String storeNameInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        storeNameInstance = xmlPullParser.getText();
                                                                        certificateSettingInstance.setStoreName(storeNameInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String thumbprintInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        thumbprintInstance = xmlPullParser.getText();
                                                                        certificateSettingInstance.setThumbprint(thumbprintInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                                        configurationSetInstance.setWindowsRemoteManagement(winRMInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "Listener".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                                    winRMInstance.getListeners().add(listenerInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            VirtualMachineWindowsRemoteManagementListenerType protocolInstance4;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                protocolInstance4 = VirtualMachineWindowsRemoteManagementListenerType.valueOf(xmlPullParser.getText());
                                                                                listenerInstance.setListenerType(protocolInstance4);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String certificateThumbprintInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                certificateThumbprintInstance = xmlPullParser.getText();
                                                                                listenerInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String adminUsernameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            adminUsernameInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setAdminUserName(adminUsernameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String hostNameInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            hostNameInstance2 = xmlPullParser.getText();
                                                            configurationSetInstance.setHostName(hostNameInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String userNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            userNameInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setUserName(userNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String userPasswordInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            userPasswordInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setUserPassword(userPasswordInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        SshSettings sSHInstance = new SshSettings();
                                                        configurationSetInstance.setSshSettings(sSHInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "PublicKey".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                                    sSHInstance.getPublicKeys().add(publicKeyInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String fingerprintInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                fingerprintInstance = xmlPullParser.getText();
                                                                                publicKeyInstance.setFingerprint(fingerprintInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String pathInstance2;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                pathInstance2 = xmlPullParser.getText();
                                                                                publicKeyInstance.setPath(pathInstance2);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "KeyPair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                                    sSHInstance.getKeyPairs().add(keyPairInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String fingerprintInstance2;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                fingerprintInstance2 = xmlPullParser.getText();
                                                                                keyPairInstance.setFingerprint(fingerprintInstance2);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String pathInstance3;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                pathInstance3 = xmlPullParser.getText();
                                                                                keyPairInstance.setPath(pathInstance3);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String customDataInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            customDataInstance = xmlPullParser.getText();
                                                            configurationSetInstance.setCustomData(customDataInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ResourceExtensionReferences".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionReferences".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "ResourceExtensionReference".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                ResourceExtensionReference resourceExtensionReferenceInstance = new ResourceExtensionReference();
                                                roleInstance.getResourceExtensionReferences().add(resourceExtensionReferenceInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ReferenceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ReferenceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String referenceNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            referenceNameInstance = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setReferenceName(referenceNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Publisher".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Publisher".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String publisherInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            publisherInstance = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setPublisher(publisherInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance8;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance8 = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setName(nameInstance8);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String versionInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            versionInstance2 = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setVersion(versionInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "ResourceExtensionParameterValues".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionParameterValues".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "ResourceExtensionParameterValue".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            ResourceExtensionParameterValue resourceExtensionParameterValueInstance = new ResourceExtensionParameterValue();
                                                            resourceExtensionReferenceInstance.getResourceExtensionParameterValues().add(resourceExtensionParameterValueInstance);
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Key".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Key".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String keyInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        keyInstance = xmlPullParser.getText();
                                                                        resourceExtensionParameterValueInstance.setKey(keyInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String valueInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        valueInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                                                        resourceExtensionParameterValueInstance.setValue(valueInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                    String typeInstance;
                                                                    if (eventType == XmlPullParser.TEXT) {
                                                                        typeInstance = xmlPullParser.getText();
                                                                        resourceExtensionParameterValueInstance.setType(typeInstance);
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String stateInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            stateInstance = xmlPullParser.getText();
                                                            resourceExtensionReferenceInstance.setState(stateInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "VMImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "VMImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String vMImageNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                vMImageNameInstance = xmlPullParser.getText();
                                                roleInstance.setVMImageName(vMImageNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "MediaLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "MediaLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            URI mediaLocationInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                mediaLocationInstance = new URI(xmlPullParser.getText());
                                                roleInstance.setMediaLocation(mediaLocationInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String availabilitySetNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                availabilitySetNameInstance = xmlPullParser.getText();
                                                roleInstance.setAvailabilitySetName(availabilitySetNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                                roleInstance.getDataVirtualHardDisks().add(dataVirtualHardDiskInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String hostCachingInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            hostCachingInstance = xmlPullParser.getText();
                                                            dataVirtualHardDiskInstance.setHostCaching(hostCachingInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String diskLabelInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            diskLabelInstance = xmlPullParser.getText();
                                                            dataVirtualHardDiskInstance.setLabel(diskLabelInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String diskNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            diskNameInstance = xmlPullParser.getText();
                                                            dataVirtualHardDiskInstance.setName(diskNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        URI mediaLinkInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            mediaLinkInstance = new URI(xmlPullParser.getText());
                                                            dataVirtualHardDiskInstance.setMediaLink(mediaLinkInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        URI sourceMediaLinkInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            sourceMediaLinkInstance = new URI(xmlPullParser.getText());
                                                            dataVirtualHardDiskInstance.setSourceMediaLink(sourceMediaLinkInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String labelInstance2;
                                            if (eventType == XmlPullParser.TEXT) {
                                                labelInstance2 = xmlPullParser.getText();
                                                roleInstance.setLabel(labelInstance2);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                            roleInstance.setOSVirtualHardDisk(oSVirtualHardDiskInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String hostCachingInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        hostCachingInstance2 = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setHostCaching(hostCachingInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String diskLabelInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        diskLabelInstance2 = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setLabel(diskLabelInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String diskNameInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        diskNameInstance2 = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setName(diskNameInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    URI mediaLinkInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        mediaLinkInstance2 = new URI(xmlPullParser.getText());
                                                        oSVirtualHardDiskInstance.setMediaLink(mediaLinkInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String sourceImageNameInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        sourceImageNameInstance = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setSourceImageName(sourceImageNameInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String osInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        osInstance = xmlPullParser.getText();
                                                        oSVirtualHardDiskInstance.setOperatingSystem(osInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String roleSizeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                roleSizeInstance = xmlPullParser.getText();
                                                roleInstance.setRoleSize(roleSizeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String defaultWinRmCertificateThumbprintInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                defaultWinRmCertificateThumbprintInstance = xmlPullParser.getText();
                                                roleInstance.setDefaultWinRmCertificateThumbprint(defaultWinRmCertificateThumbprintInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ProvisionGuestAgent".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ProvisionGuestAgent".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SdkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SdkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String sdkVersionInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    sdkVersionInstance = xmlPullParser.getText();
                                    result.setSdkVersion(sdkVersionInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Locked".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Locked".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RollbackAllowed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RollbackAllowed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "VirtualNetworkName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "VirtualNetworkName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String virtualNetworkNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    virtualNetworkNameInstance = xmlPullParser.getText();
                                    result.setVirtualNetworkName(virtualNetworkNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar createdTimeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    createdTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    result.setCreatedTime(createdTimeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar lastModifiedTimeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    lastModifiedTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    result.setLastModifiedTime(lastModifiedTimeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String key = null;
                                        String value = null;
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    key = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    value = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        if (key != null && value != null) {
                                            result.getExtendedProperties().put(key, xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Dns".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Dns".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                DnsSettings dnsInstance = new DnsSettings();
                                result.setDnsSettings(dnsInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "DnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "DnsServer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            DnsServer dnsServerInstance = new DnsServer();
                                            dnsInstance.getDnsServers().add(dnsServerInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String nameInstance9;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        nameInstance9 = xmlPullParser.getText();
                                                        dnsServerInstance.setName(nameInstance9);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    InetAddress addressInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        addressInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                        dnsServerInstance.setAddress(addressInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PersistentVMDowntime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PersistentVMDowntime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                                result.setPersistentVMDowntime(persistentVMDowntimeInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar startTimeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            startTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            persistentVMDowntimeInstance.setStartTime(startTimeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar endTimeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            endTimeInstance = DatatypeFactory.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            persistentVMDowntimeInstance.setEndTime(endTimeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String statusInstance6;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusInstance6 = xmlPullParser.getText();
                                            persistentVMDowntimeInstance.setStatus(statusInstance6);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "VirtualIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "VirtualIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                    result.getVirtualIPAddresses().add(virtualIPInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            InetAddress addressInstance3;
                                            if (eventType == XmlPullParser.TEXT) {
                                                addressInstance3 = InetAddress.getByName(xmlPullParser.getText());
                                                virtualIPInstance.setAddress(addressInstance3);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String nameInstance10;
                                            if (eventType == XmlPullParser.TEXT) {
                                                nameInstance10 = xmlPullParser.getText();
                                                virtualIPInstance.setName(nameInstance10);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "IsDnsProgrammed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "IsDnsProgrammed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ExtensionConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ExtensionConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ExtensionConfiguration extensionConfigurationInstance = new ExtensionConfiguration();
                                result.setExtensionConfiguration(extensionConfigurationInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "AllRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AllRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            ExtensionConfiguration.Extension extensionInstance = new ExtensionConfiguration.Extension();
                                            extensionConfigurationInstance.getAllRoles().add(extensionInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String idInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        idInstance = xmlPullParser.getText();
                                                        extensionInstance.setId(idInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "NamedRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "NamedRoles".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Role".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            ExtensionConfiguration.NamedRole roleInstance2 = new ExtensionConfiguration.NamedRole();
                                            extensionConfigurationInstance.getNamedRoles().add(roleInstance2);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String roleNameInstance3;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        roleNameInstance3 = xmlPullParser.getText();
                                                        roleInstance2.setRoleName(roleNameInstance3);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Extensions".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Extensions".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    if (eventType == XmlPullParser.START_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        ExtensionConfiguration.Extension extensionInstance2 = new ExtensionConfiguration.Extension();
                                                        roleInstance2.getExtensions().add(extensionInstance2);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String idInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    idInstance2 = xmlPullParser.getText();
                                                                    extensionInstance2.setId(idInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ReservedIPName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ReservedIPName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String reservedIPNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    reservedIPNameInstance = xmlPullParser.getText();
                                    result.setReservedIPName(reservedIPNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LoadBalancers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LoadBalancers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "LoadBalancer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    LoadBalancer loadBalancerInstance = new LoadBalancer();
                                    result.getLoadBalancers().add(loadBalancerInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String nameInstance11;
                                            if (eventType == XmlPullParser.TEXT) {
                                                nameInstance11 = xmlPullParser.getText();
                                                loadBalancerInstance.setName(nameInstance11);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "FrontendIpConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "FrontendIpConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            FrontendIPConfiguration frontendIpConfigurationInstance = new FrontendIPConfiguration();
                                            loadBalancerInstance.setFrontendIPConfiguration(frontendIpConfigurationInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String typeInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        typeInstance2 = xmlPullParser.getText();
                                                        frontendIpConfigurationInstance.setType(typeInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "SubnetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "SubnetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String subnetNameInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        subnetNameInstance = xmlPullParser.getText();
                                                        frontendIpConfigurationInstance.setSubnetName(subnetNameInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    InetAddress staticVirtualNetworkIPAddressInstance2;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        staticVirtualNetworkIPAddressInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                        frontendIpConfigurationInstance.setStaticVirtualNetworkIPAddress(staticVirtualNetworkIPAddressInstance2);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Get Package By Name operation retrieves a cloud service package for a
    * deployment and stores the package files in Azure Blob storage. The
    * following package files are placed in storage: the cloud service
    * configuration file (.cscfg), providing configuration settings for the
    * cloud service and individual roles, including the number of role
    * instances; and the service package (.cspkg), containing the application
    * code and the service definition file.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Get Package By
    * Name operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> getPackageByNameAsync(final String serviceName, final String deploymentName, final DeploymentGetPackageParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return getPackageByName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Get Package By Name operation retrieves a cloud service package for a
    * deployment and stores the package files in Azure Blob storage. The
    * following package files are placed in storage: the cloud service
    * configuration file (.cscfg), providing configuration settings for the
    * cloud service and individual roles, including the number of role
    * instances; and the service package (.cspkg), containing the application
    * code and the service definition file.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Get Package By
    * Name operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse getPackageByName(String serviceName, String deploymentName, DeploymentGetPackageParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getContainerUri() == null) {
            throw new NullPointerException("parameters.ContainerUri");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "getPackageByNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/package" + "?";
        url = url + "containerUri=" + URLEncoder.encode(parameters.getContainerUri().toString(), "UTF-8") + " +";
        if (parameters.isOverwriteExisting() != null) {
            url = url + "&" + "overwriteExisting=" + URLEncoder.encode(Boolean.toString(parameters.isOverwriteExisting()).toLowerCase(), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Get Package By Slot operation retrieves a cloud service package for a
    * deployment and stores the package files in Azure Blob storage. The
    * following package files are placed in storage: the cloud service
    * configuration file (.cscfg), providing configuration settings for the
    * cloud service and individual roles, including the number of role
    * instances; and the service package (.cspkg), containing the application
    * code and the service definition file.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Get Package By
    * Slot operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> getPackageBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentGetPackageParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return getPackageBySlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Get Package By Slot operation retrieves a cloud service package for a
    * deployment and stores the package files in Azure Blob storage. The
    * following package files are placed in storage: the cloud service
    * configuration file (.cscfg), providing configuration settings for the
    * cloud service and individual roles, including the number of role
    * instances; and the service package (.cspkg), containing the application
    * code and the service definition file.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Get Package By
    * Slot operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse getPackageBySlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getContainerUri() == null) {
            throw new NullPointerException("parameters.ContainerUri");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "getPackageBySlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/package" + "?";
        url = url + "containerUri=" + URLEncoder.encode(parameters.getContainerUri().toString(), "UTF-8") + " +";
        if (parameters.isOverwriteExisting() != null) {
            url = url + "&" + "overwriteExisting=" + URLEncoder.encode(Boolean.toString(parameters.isOverwriteExisting()).toLowerCase(), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Reboot Role Instance By Deployment Name operation requests a reboot
    * of a role instance that is running in a deployment. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> rebootRoleInstanceByDeploymentNameAsync(final String serviceName, final String deploymentName, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return rebootRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName);
            }
         });
    }
    
    /**
    * The Reboot Role Instance By Deployment Name operation requests a reboot
    * of a role instance that is running in a deployment. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse rebootRoleInstanceByDeploymentName(String serviceName, String deploymentName, String roleInstanceName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "rebootRoleInstanceByDeploymentNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginRebootingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Reboot Role Instance By Deployment Slot operation requests a reboot
    * of a role instance that is running in a deployment. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> rebootRoleInstanceByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return rebootRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName);
            }
         });
    }
    
    /**
    * The Reboot Role Instance By Deployment Slot operation requests a reboot
    * of a role instance that is running in a deployment. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse rebootRoleInstanceByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, String roleInstanceName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "rebootRoleInstanceByDeploymentSlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginRebootingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Reimage Role Instance By Deployment Name operation requests a reimage
    * of a role instance that is running in a deployment.This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> reimageRoleInstanceByDeploymentNameAsync(final String serviceName, final String deploymentName, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return reimageRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName);
            }
         });
    }
    
    /**
    * The Reimage Role Instance By Deployment Name operation requests a reimage
    * of a role instance that is running in a deployment.This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse reimageRoleInstanceByDeploymentName(String serviceName, String deploymentName, String roleInstanceName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "reimageRoleInstanceByDeploymentNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginReimagingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Reimage Role Instance By Deployment Slot operation requests a reimage
    * of a role instance that is running in a deployment. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> reimageRoleInstanceByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final String roleInstanceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return reimageRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName);
            }
         });
    }
    
    /**
    * The Reimage Role Instance By Deployment Slot operation requests a reimage
    * of a role instance that is running in a deployment. This operation is an
    * asynchronous operation. To determine whether the Management service has
    * finished processing the request, call Get Operation Status. For more
    * information on asynchronous operations, see Tracking Asynchronous
    * Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param roleInstanceName Required. The name of your role instance.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse reimageRoleInstanceByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, String roleInstanceName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("roleInstanceName", roleInstanceName);
            CloudTracing.enter(invocationId, this, "reimageRoleInstanceByDeploymentSlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginReimagingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Rollback Update Or Upgrade By Deployment Name operation cancels an
    * in-progress configuration update and returns the deployment to its state
    * before the update was started. This operation can only be called when an
    * update is in progress on the deployment. The deployment status can be
    * detected by calling the Get Deployment operation or Get Hosted Service
    * Properties operation and inspecting the RollbackAllowed element. If the
    * value returned is true a rollback can be performed.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Rollback Update Or
    * Upgrade By Deployment Name operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> rollbackUpdateOrUpgradeByDeploymentNameAsync(final String serviceName, final String deploymentName, final DeploymentRollbackUpdateOrUpgradeParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return rollbackUpdateOrUpgradeByDeploymentName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Rollback Update Or Upgrade By Deployment Name operation cancels an
    * in-progress configuration update and returns the deployment to its state
    * before the update was started. This operation can only be called when an
    * update is in progress on the deployment. The deployment status can be
    * detected by calling the Get Deployment operation or Get Hosted Service
    * Properties operation and inspecting the RollbackAllowed element. If the
    * value returned is true a rollback can be performed.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Rollback Update Or
    * Upgrade By Deployment Name operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse rollbackUpdateOrUpgradeByDeploymentName(String serviceName, String deploymentName, DeploymentRollbackUpdateOrUpgradeParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "rollbackUpdateOrUpgradeByDeploymentNameAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/" + "?" + "comp=rollback";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RollbackUpdateOrUpgrade");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Mode");
        xmlSerializer.text(parameters.getMode().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Mode");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Force");
        xmlSerializer.text(Boolean.toString(parameters.isForce()).toLowerCase());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Force");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RollbackUpdateOrUpgrade");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Rollback Update Or Upgrade By Deployment Slot operation cancels an
    * in-progress configuration update and returns the deployment to its state
    * before the update was started. This operation can only be called when an
    * update is in progress on the deployment. The deployment status can be
    * detected by calling the Get Deployment operation or Get Hosted Service
    * Properties operation and inspecting the RollbackAllowed element. If the
    * value returned is true a rollback can be performed.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Rollback Update Or
    * Upgrade By Deployment Slot operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> rollbackUpdateOrUpgradeByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentRollbackUpdateOrUpgradeParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return rollbackUpdateOrUpgradeByDeploymentSlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Rollback Update Or Upgrade By Deployment Slot operation cancels an
    * in-progress configuration update and returns the deployment to its state
    * before the update was started. This operation can only be called when an
    * update is in progress on the deployment. The deployment status can be
    * detected by calling the Get Deployment operation or Get Hosted Service
    * Properties operation and inspecting the RollbackAllowed element. If the
    * value returned is true a rollback can be performed.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Rollback Update Or
    * Upgrade By Deployment Slot operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse rollbackUpdateOrUpgradeByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentRollbackUpdateOrUpgradeParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "rollbackUpdateOrUpgradeByDeploymentSlotAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deploymentslots/" + deploymentSlot + "/" + "?" + "comp=rollback";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RollbackUpdateOrUpgrade");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Mode");
        xmlSerializer.text(parameters.getMode().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Mode");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Force");
        xmlSerializer.text(Boolean.toString(parameters.isForce()).toLowerCase());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Force");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RollbackUpdateOrUpgrade");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Swap Deployment operation initiates a virtual IP address swap between
    * the staging and production deployment environments for a service. If the
    * service is currently running in the staging environment, it will be
    * swapped to the production environment. If it is running in the
    * production environment, it will be swapped to staging. For more
    * information on this type of upgrade, see Performing Virtual IP Swap
    * Upgrades at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param parameters Required. Parameters supplied to the Swap Deployment
    * operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> swapAsync(final String serviceName, final DeploymentSwapParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return swap(serviceName, parameters);
            }
         });
    }
    
    /**
    * The Swap Deployment operation initiates a virtual IP address swap between
    * the staging and production deployment environments for a service. If the
    * service is currently running in the staging environment, it will be
    * swapped to the production environment. If it is running in the
    * production environment, it will be swapped to staging. For more
    * information on this type of upgrade, see Performing Virtual IP Swap
    * Upgrades at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param parameters Required. Parameters supplied to the Swap Deployment
    * operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse swap(String serviceName, DeploymentSwapParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "swapAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginSwappingAsync(serviceName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Update Deployment Status By Deployment Name operation initiates a
    * change in the running status of a deployment. The status of a deployment
    * can be running or suspended. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Update Deployment
    * Status By Deployment Name operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> updateStatusByDeploymentNameAsync(final String serviceName, final String deploymentName, final DeploymentUpdateStatusParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return updateStatusByDeploymentName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Update Deployment Status By Deployment Name operation initiates a
    * change in the running status of a deployment. The status of a deployment
    * can be running or suspended. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Update Deployment
    * Status By Deployment Name operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse updateStatusByDeploymentName(String serviceName, String deploymentName, DeploymentUpdateStatusParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateStatusByDeploymentNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginUpdatingStatusByDeploymentNameAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Update Deployment Status By Deployment Slot operation initiates a
    * change in the running status of a deployment. The status of a deployment
    * can be running or suspended. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Update Deployment
    * Status By Deployment Slot operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> updateStatusByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentUpdateStatusParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return updateStatusByDeploymentSlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Update Deployment Status By Deployment Slot operation initiates a
    * change in the running status of a deployment. The status of a deployment
    * can be running or suspended. This operation is an asynchronous
    * operation. To determine whether the Management service has finished
    * processing the request, call Get Operation Status. For more information
    * on asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
    * for more information)
    *
    * @param serviceName Required. The cloud service to swap deployments for.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Update Deployment
    * Status By Deployment Slot operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse updateStatusByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateStatusByDeploymentSlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginUpdatingStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Upgrade Deployment By Name operation initiates an update of role
    * instances in a deployment using the package and configuration that you
    * specify. For more information about updating role instances, see Update
    * an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentName Required. The deployment to upgrade.
    * @param parameters Required. Parameters supplied to the Upgrade Deployment
    * By Name operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> upgradeByNameAsync(final String serviceName, final String deploymentName, final DeploymentUpgradeParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return upgradeByName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Upgrade Deployment By Name operation initiates an update of role
    * instances in a deployment using the package and configuration that you
    * specify. For more information about updating role instances, see Update
    * an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentName Required. The deployment to upgrade.
    * @param parameters Required. Parameters supplied to the Upgrade Deployment
    * By Name operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse upgradeByName(String serviceName, String deploymentName, DeploymentUpgradeParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "upgradeByNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginUpgradingByNameAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Upgrade Deployment By Slot operation initiates an update of role
    * instances in a deployment using the package and configuration that you
    * specify. For more information about updating role instances, see Update
    * an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentSlot Required. The slot to upgrade.
    * @param parameters Required. Parameters supplied to the Upgrade Deployment
    * By Slot operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> upgradeBySlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentUpgradeParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return upgradeBySlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Upgrade Deployment By Slot operation initiates an update of role
    * instances in a deployment using the package and configuration that you
    * specify. For more information about updating role instances, see Update
    * an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the request
    * has been processed, call Get Operation Status. For more information on
    * asynchronous operations, see Tracking Asynchronous Service Management
    * Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To
    * perform an automatic update of a deployment, call Upgrade Deployment or
    * Change Deployment Configuration with the Mode element set to automatic.
    * The update proceeds from that point without a need for further input.
    * You can call Get Operation Status to determine when the update is
    * complete. To perform a manual update, first call Upgrade Deployment with
    * the Mode element set to manual. Next, call Walk Upgrade Domain to update
    * each domain within the deployment. You should make sure that the
    * operation is complete by calling Get Operation Status before updating
    * the next domain. Important: An update that adds or removes role
    * instances will result in a configuration update to all roles that are
    * deployed in the cloud service. Existing role instances need to be
    * notified of new role instances so that all role instances can
    * communicate together in the cloud service. By default, a cloud service
    * is deployed with five update domains, which are updated one at a time
    * during an in-place update. For information on modifying the number of
    * update domains in the service definition file, see the Azure Service
    * Definition Schema (.csdef File). To determine the update domain in which
    * a particular instance is running in Windows Azure, use the UpdateDomain
    * property of the RoleInstance class. See the Azure Managed Library
    * Reference at
    * http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for
    * more information.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service to upgrade.
    * @param deploymentSlot Required. The slot to upgrade.
    * @param parameters Required. Parameters supplied to the Upgrade Deployment
    * By Slot operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse upgradeBySlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "upgradeBySlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginUpgradingBySlotAsync(serviceName, deploymentSlot, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Walk Upgrade Domain By Deployment Name operation specifies an update
    * domain in which a role instance must be updated. For more information
    * about updating role instances, see Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Walk Upgrade
    * Domain By Deployment Name operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> walkUpgradeDomainByDeploymentNameAsync(final String serviceName, final String deploymentName, final DeploymentWalkUpgradeDomainParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return walkUpgradeDomainByDeploymentName(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Walk Upgrade Domain By Deployment Name operation specifies an update
    * domain in which a role instance must be updated. For more information
    * about updating role instances, see Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Walk Upgrade
    * Domain By Deployment Name operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse walkUpgradeDomainByDeploymentName(String serviceName, String deploymentName, DeploymentWalkUpgradeDomainParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "walkUpgradeDomainByDeploymentNameAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginWalkingUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Walk Upgrade Domain By Deployment Slot operation specifies an update
    * domain in which a role instance must be updated. For more information
    * about updating role instances, see Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Walk Upgrade
    * Domain By Deployment Slot operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> walkUpgradeDomainByDeploymentSlotAsync(final String serviceName, final DeploymentSlot deploymentSlot, final DeploymentWalkUpgradeDomainParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return walkUpgradeDomainByDeploymentSlot(serviceName, deploymentSlot, parameters);
            }
         });
    }
    
    /**
    * The Walk Upgrade Domain By Deployment Slot operation specifies an update
    * domain in which a role instance must be updated. For more information
    * about updating role instances, see Update an Azure Service at
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This
    * operation is an asynchronous operation. To determine whether the
    * Management service has finished processing the request, call Get
    * Operation Status. For more information on asynchronous operations, see
    * Tracking Asynchronous Service Management Requests at
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
    * Prior to calling the Walk Upgrade Domain operation you must have called
    * Upgrade Deployment, Change Deployment Configuration, or Rollback Update
    * Or Upgrade. By default, a service is deployed with five update domains,
    * which are updated one at a time during an in-place update. For
    * information on modifying the number of update domains in the service
    * definition file, see the Azure Service Definition Schema (.csdef File).
    * To perform a manual update of your deployment, proceed in this order:
    * Call Upgrade Deployment with the Mode element set to manual. Call Walk
    * Upgrade Domain to update each domain within the deployment. Update
    * domains must be updated in order. For example, begin with domain 0,
    * proceed to domain 1, and so on. Important: An update that adds or
    * removes role instances will result in a configuration update to all
    * roles that are deployed in the cloud service. Existing role instances
    * need to be notified of new role instances so that all role instances can
    * communicate together in the cloud service. While an update is in
    * progress, call Get Deployment to determine its status. If the update is
    * in progress, Get Deployment returns an UpgradeStatus element that
    * contains information about the update. If the update is complete, or if
    * no update is in progress, then the UpgradeStatus element is null.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param deploymentSlot Required. The deployment slot.
    * @param parameters Required. Parameters supplied to the Walk Upgrade
    * Domain By Deployment Slot operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse walkUpgradeDomainByDeploymentSlot(String serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentSlot", deploymentSlot);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "walkUpgradeDomainByDeploymentSlotAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getDeploymentsOperations().beginWalkingUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
}
