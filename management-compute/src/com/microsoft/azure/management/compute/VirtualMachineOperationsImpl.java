/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.compute;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.core.OperationStatus;
import com.microsoft.azure.core.OperationStatusResponse;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.utils.BOMInputStream;
import com.microsoft.azure.core.utils.Base64;
import com.microsoft.azure.core.utils.StreamUtils;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.compute.models.AccessControlListRule;
import com.microsoft.azure.management.compute.models.ConfigurationSet;
import com.microsoft.azure.management.compute.models.DataVirtualHardDisk;
import com.microsoft.azure.management.compute.models.DnsServer;
import com.microsoft.azure.management.compute.models.DomainJoinCredentials;
import com.microsoft.azure.management.compute.models.DomainJoinProvisioning;
import com.microsoft.azure.management.compute.models.DomainJoinSettings;
import com.microsoft.azure.management.compute.models.EndpointAcl;
import com.microsoft.azure.management.compute.models.InputEndpoint;
import com.microsoft.azure.management.compute.models.LoadBalancer;
import com.microsoft.azure.management.compute.models.LoadBalancerProbe;
import com.microsoft.azure.management.compute.models.LoadBalancerProbeTransportProtocol;
import com.microsoft.azure.management.compute.models.OSVirtualHardDisk;
import com.microsoft.azure.management.compute.models.ResourceExtensionParameterValue;
import com.microsoft.azure.management.compute.models.ResourceExtensionReference;
import com.microsoft.azure.management.compute.models.Role;
import com.microsoft.azure.management.compute.models.SshSettingKeyPair;
import com.microsoft.azure.management.compute.models.SshSettingPublicKey;
import com.microsoft.azure.management.compute.models.SshSettings;
import com.microsoft.azure.management.compute.models.StoredCertificateSettings;
import com.microsoft.azure.management.compute.models.VirtualMachineCaptureOSImageParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineCaptureVMImageParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineCreateDeploymentParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineCreateParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineGetRemoteDesktopFileResponse;
import com.microsoft.azure.management.compute.models.VirtualMachineGetResponse;
import com.microsoft.azure.management.compute.models.VirtualMachineRoleType;
import com.microsoft.azure.management.compute.models.VirtualMachineShutdownParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineShutdownRolesParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineStartRolesParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineUpdateLoadBalancedSetParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineUpdateParameters;
import com.microsoft.azure.management.compute.models.VirtualMachineWindowsRemoteManagementListenerType;
import com.microsoft.azure.management.compute.models.WindowsRemoteManagementListener;
import com.microsoft.azure.management.compute.models.WindowsRemoteManagementSettings;
import com.microsoft.azure.tracing.ClientRequestTrackingHandler;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

/**
* The Service Management API includes operations for managing the virtual
* machines in your subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/jj157206.aspx for more
* information)
*/
public class VirtualMachineOperationsImpl implements ServiceOperations<ComputeManagementClientImpl>, VirtualMachineOperations {
    /**
    * Initializes a new instance of the VirtualMachineOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    VirtualMachineOperationsImpl(ComputeManagementClientImpl client) {
        this.client = client;
    }
    
    private ComputeManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.compute.ComputeManagementClientImpl.
    * @return The Client value.
    */
    public ComputeManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * The Begin Capturing Role operation creates a copy of the operating system
    * virtual hard disk (VHD) that is deployed in the virtual machine, saves
    * the VHD copy in the same storage location as the operating system VHD,
    * and registers the copy as an image in your image gallery. From the
    * captured image, you can create additional customized virtual machines.
    * For more information about images and disks, see Manage Disks and Images
    * at http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx.
    * For more information about capturing images, see How to Capture an Image
    * of a Virtual Machine Running Windows Server 2008 R2 at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/
    * or How to Capture an Image of a Virtual Machine Running Linux at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Begin Capturing
    * Virtual Machine operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginCapturingOSImageAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineCaptureOSImageParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginCapturingOSImage(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * The Begin Capturing Role operation creates a copy of the operating system
    * virtual hard disk (VHD) that is deployed in the virtual machine, saves
    * the VHD copy in the same storage location as the operating system VHD,
    * and registers the copy as an image in your image gallery. From the
    * captured image, you can create additional customized virtual machines.
    * For more information about images and disks, see Manage Disks and Images
    * at http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx.
    * For more information about capturing images, see How to Capture an Image
    * of a Virtual Machine Running Windows Server 2008 R2 at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/
    * or How to Capture an Image of a Virtual Machine Running Linux at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Begin Capturing
    * Virtual Machine operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginCapturingOSImage(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineCaptureOSImageParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getProvisioningConfiguration() != null) {
            if (parameters.getProvisioningConfiguration().getDomainJoin() != null) {
                if (parameters.getProvisioningConfiguration().getDomainJoin().getCredentials() != null) {
                    if (parameters.getProvisioningConfiguration().getDomainJoin().getCredentials().getPassword() == null) {
                        throw new NullPointerException("parameters.ProvisioningConfiguration.DomainJoin.Credentials.Password");
                    }
                    if (parameters.getProvisioningConfiguration().getDomainJoin().getCredentials().getUserName() == null) {
                        throw new NullPointerException("parameters.ProvisioningConfiguration.DomainJoin.Credentials.UserName");
                    }
                }
            }
            if (parameters.getProvisioningConfiguration().getHostName() != null && parameters.getProvisioningConfiguration().getHostName().length() < 1) {
                throw new IllegalArgumentException("parameters.ProvisioningConfiguration.HostName");
            }
            if (parameters.getProvisioningConfiguration().getHostName() != null && parameters.getProvisioningConfiguration().getHostName().length() > 64) {
                throw new IllegalArgumentException("parameters.ProvisioningConfiguration.HostName");
            }
            if (parameters.getProvisioningConfiguration().getSshSettings() != null) {
                if (parameters.getProvisioningConfiguration().getSshSettings().getKeyPairs() != null) {
                    for (SshSettingKeyPair keyPairsParameterItem : parameters.getProvisioningConfiguration().getSshSettings().getKeyPairs()) {
                        if (keyPairsParameterItem.getFingerprint() == null) {
                            throw new NullPointerException("parameters.ProvisioningConfiguration.SshSettings.KeyPairs.Fingerprint");
                        }
                        if (keyPairsParameterItem.getPath() == null) {
                            throw new NullPointerException("parameters.ProvisioningConfiguration.SshSettings.KeyPairs.Path");
                        }
                    }
                }
                if (parameters.getProvisioningConfiguration().getSshSettings().getPublicKeys() != null) {
                    for (SshSettingPublicKey publicKeysParameterItem : parameters.getProvisioningConfiguration().getSshSettings().getPublicKeys()) {
                        if (publicKeysParameterItem.getFingerprint() == null) {
                            throw new NullPointerException("parameters.ProvisioningConfiguration.SshSettings.PublicKeys.Fingerprint");
                        }
                        if (publicKeysParameterItem.getPath() == null) {
                            throw new NullPointerException("parameters.ProvisioningConfiguration.SshSettings.PublicKeys.Path");
                        }
                    }
                }
            }
            if (parameters.getProvisioningConfiguration().getStoredCertificateSettings() != null) {
                for (StoredCertificateSettings storedCertificateSettingsParameterItem : parameters.getProvisioningConfiguration().getStoredCertificateSettings()) {
                    if (storedCertificateSettingsParameterItem.getStoreName() == null) {
                        throw new NullPointerException("parameters.ProvisioningConfiguration.StoredCertificateSettings.StoreName");
                    }
                    if (storedCertificateSettingsParameterItem.getThumbprint() == null) {
                        throw new NullPointerException("parameters.ProvisioningConfiguration.StoredCertificateSettings.Thumbprint");
                    }
                }
            }
            if (parameters.getProvisioningConfiguration().getUserName() != null && parameters.getProvisioningConfiguration().getUserName().length() < 1) {
                throw new IllegalArgumentException("parameters.ProvisioningConfiguration.UserName");
            }
            if (parameters.getProvisioningConfiguration().getUserName() != null && parameters.getProvisioningConfiguration().getUserName().length() > 32) {
                throw new IllegalArgumentException("parameters.ProvisioningConfiguration.UserName");
            }
            if (parameters.getProvisioningConfiguration().getUserPassword() != null && parameters.getProvisioningConfiguration().getUserPassword().length() < 6 && (parameters.getProvisioningConfiguration().isDisableSshPasswordAuthentication() == false || parameters.getProvisioningConfiguration().getUserPassword().length() != 0)) {
                throw new IllegalArgumentException("parameters.ProvisioningConfiguration.UserPassword");
            }
            if (parameters.getProvisioningConfiguration().getUserPassword() != null && parameters.getProvisioningConfiguration().getUserPassword().length() > 72) {
                throw new IllegalArgumentException("parameters.ProvisioningConfiguration.UserPassword");
            }
        }
        if (parameters.getTargetImageLabel() == null) {
            throw new NullPointerException("parameters.TargetImageLabel");
        }
        if (parameters.getTargetImageName() == null) {
            throw new NullPointerException("parameters.TargetImageName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginCapturingOSImageAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + virtualMachineName.trim() + "/Operations";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CaptureRoleOperation");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        xmlSerializer.text("CaptureRoleOperation");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PostCaptureAction");
        xmlSerializer.text(parameters.getPostCaptureAction().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PostCaptureAction");
        
        if (parameters.getProvisioningConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ProvisioningConfiguration");
            
            if (parameters.getProvisioningConfiguration().getConfigurationSetType() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getConfigurationSetType());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
            }
            
            if (parameters.getProvisioningConfiguration().getInputEndpoints() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                for (InputEndpoint inputEndpointsItem : parameters.getProvisioningConfiguration().getInputEndpoints()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                    
                    if (inputEndpointsItem.getLoadBalancedEndpointSetName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                        xmlSerializer.text(inputEndpointsItem.getLoadBalancedEndpointSetName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                    }
                    
                    if (inputEndpointsItem.getLocalPort() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                        xmlSerializer.text(Integer.toString(inputEndpointsItem.getLocalPort()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                    }
                    
                    if (inputEndpointsItem.getName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                        xmlSerializer.text(inputEndpointsItem.getName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    }
                    
                    if (inputEndpointsItem.getPort() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                        xmlSerializer.text(Integer.toString(inputEndpointsItem.getPort()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                    }
                    
                    if (inputEndpointsItem.getLoadBalancerProbe() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                        
                        if (inputEndpointsItem.getLoadBalancerProbe().getPath() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.text(inputEndpointsItem.getLoadBalancerProbe().getPath());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                        }
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                        xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getPort()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                        xmlSerializer.text(ComputeManagementClientImpl.loadBalancerProbeTransportProtocolToString(inputEndpointsItem.getLoadBalancerProbe().getProtocol()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                        
                        if (inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                        }
                        
                        if (inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                    }
                    
                    if (inputEndpointsItem.getProtocol() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                        xmlSerializer.text(inputEndpointsItem.getProtocol());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    }
                    
                    if (inputEndpointsItem.getVirtualIPAddress() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Vip");
                        xmlSerializer.text(inputEndpointsItem.getVirtualIPAddress().getHostAddress());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Vip");
                    }
                    
                    if (inputEndpointsItem.isEnableDirectServerReturn() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                        xmlSerializer.text(Boolean.toString(inputEndpointsItem.isEnableDirectServerReturn()).toLowerCase());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                    }
                    
                    if (inputEndpointsItem.getLoadBalancerName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                        xmlSerializer.text(inputEndpointsItem.getLoadBalancerName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                    }
                    
                    if (inputEndpointsItem.getEndpointAcl() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                        
                        if (inputEndpointsItem.getEndpointAcl().getRules() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rules");
                            for (AccessControlListRule rulesItem : inputEndpointsItem.getEndpointAcl().getRules()) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rule");
                                
                                if (rulesItem.getOrder() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Order");
                                    xmlSerializer.text(Integer.toString(rulesItem.getOrder()));
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Order");
                                }
                                
                                if (rulesItem.getAction() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Action");
                                    xmlSerializer.text(rulesItem.getAction());
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Action");
                                }
                                
                                if (rulesItem.getRemoteSubnet() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                    xmlSerializer.text(rulesItem.getRemoteSubnet());
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                }
                                
                                if (rulesItem.getDescription() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
                                    xmlSerializer.text(rulesItem.getDescription());
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
                                }
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rule");
                            }
                            
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rules");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
            }
            
            if (parameters.getProvisioningConfiguration().getSubnetNames() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
                for (String subnetNamesItem : parameters.getProvisioningConfiguration().getSubnetNames()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                    xmlSerializer.text(subnetNamesItem);
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
            }
            
            if (parameters.getProvisioningConfiguration().getStaticVirtualNetworkIPAddress() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getStaticVirtualNetworkIPAddress());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
            }
            
            if (parameters.getProvisioningConfiguration().getPublicIPs() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
                for (ConfigurationSet.PublicIP publicIPsItem : parameters.getProvisioningConfiguration().getPublicIPs()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                    
                    if (publicIPsItem.getName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                        xmlSerializer.text(publicIPsItem.getName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
            }
            
            if (parameters.getProvisioningConfiguration().getComputerName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getComputerName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
            }
            
            if (parameters.getProvisioningConfiguration().getAdminPassword() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getAdminPassword());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
            }
            
            if (parameters.getProvisioningConfiguration().isResetPasswordOnFirstLogon() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
                xmlSerializer.text(Boolean.toString(parameters.getProvisioningConfiguration().isResetPasswordOnFirstLogon()).toLowerCase());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
            }
            
            if (parameters.getProvisioningConfiguration().isEnableAutomaticUpdates() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
                xmlSerializer.text(Boolean.toString(parameters.getProvisioningConfiguration().isEnableAutomaticUpdates()).toLowerCase());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
            }
            
            if (parameters.getProvisioningConfiguration().getTimeZone() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getTimeZone());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
            }
            
            if (parameters.getProvisioningConfiguration().getDomainJoin() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
                
                if (parameters.getProvisioningConfiguration().getDomainJoin().getCredentials() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                    
                    if (parameters.getProvisioningConfiguration().getDomainJoin().getCredentials().getDomain() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Domain");
                        xmlSerializer.text(parameters.getProvisioningConfiguration().getDomainJoin().getCredentials().getDomain());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Domain");
                    }
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Username");
                    xmlSerializer.text(parameters.getProvisioningConfiguration().getDomainJoin().getCredentials().getUserName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Username");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Password");
                    xmlSerializer.text(parameters.getProvisioningConfiguration().getDomainJoin().getCredentials().getPassword());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Password");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                }
                
                if (parameters.getProvisioningConfiguration().getDomainJoin().getDomainToJoin() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                    xmlSerializer.text(parameters.getProvisioningConfiguration().getDomainJoin().getDomainToJoin());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                }
                
                if (parameters.getProvisioningConfiguration().getDomainJoin().getLdapMachineObjectOU() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                    xmlSerializer.text(parameters.getProvisioningConfiguration().getDomainJoin().getLdapMachineObjectOU());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                }
                
                if (parameters.getProvisioningConfiguration().getDomainJoin().getProvisioning() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                    
                    if (parameters.getProvisioningConfiguration().getDomainJoin().getProvisioning().getAccountData() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                        xmlSerializer.text(parameters.getProvisioningConfiguration().getDomainJoin().getProvisioning().getAccountData());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
            }
            
            if (parameters.getProvisioningConfiguration().getStoredCertificateSettings() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
                for (StoredCertificateSettings storedCertificateSettingsItem : parameters.getProvisioningConfiguration().getStoredCertificateSettings()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                    xmlSerializer.text("LocalMachine");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                    xmlSerializer.text(storedCertificateSettingsItem.getStoreName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                    xmlSerializer.text(storedCertificateSettingsItem.getThumbprint());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
            }
            
            if (parameters.getProvisioningConfiguration().getWindowsRemoteManagement() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WinRM");
                
                if (parameters.getProvisioningConfiguration().getWindowsRemoteManagement().getListeners() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                    for (WindowsRemoteManagementListener listenersItem : parameters.getProvisioningConfiguration().getWindowsRemoteManagement().getListeners()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listener");
                        
                        if (listenersItem.getCertificateThumbprint() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                            xmlSerializer.text(listenersItem.getCertificateThumbprint());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                        }
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                        xmlSerializer.text(listenersItem.getListenerType().toString());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listener");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WinRM");
            }
            
            if (parameters.getProvisioningConfiguration().getAdminUserName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getAdminUserName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
            }
            
            if (parameters.getProvisioningConfiguration().getHostName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostName");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getHostName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostName");
            }
            
            if (parameters.getProvisioningConfiguration().getUserName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserName");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getUserName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserName");
            }
            
            if (parameters.getProvisioningConfiguration().getUserPassword() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getUserPassword());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
            }
            
            if (parameters.getProvisioningConfiguration().isDisableSshPasswordAuthentication() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
                xmlSerializer.text(Boolean.toString(parameters.getProvisioningConfiguration().isDisableSshPasswordAuthentication()).toLowerCase());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
            }
            
            if (parameters.getProvisioningConfiguration().getSshSettings() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SSH");
                
                if (parameters.getProvisioningConfiguration().getSshSettings().getPublicKeys() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                    for (SshSettingPublicKey publicKeysItem : parameters.getProvisioningConfiguration().getSshSettings().getPublicKeys()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                        xmlSerializer.text(publicKeysItem.getFingerprint());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                        xmlSerializer.text(publicKeysItem.getPath());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                }
                
                if (parameters.getProvisioningConfiguration().getSshSettings().getKeyPairs() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                    for (SshSettingKeyPair keyPairsItem : parameters.getProvisioningConfiguration().getSshSettings().getKeyPairs()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                        xmlSerializer.text(keyPairsItem.getFingerprint());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                        xmlSerializer.text(keyPairsItem.getPath());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SSH");
            }
            
            if (parameters.getProvisioningConfiguration().getCustomData() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CustomData");
                xmlSerializer.text(parameters.getProvisioningConfiguration().getCustomData());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CustomData");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ProvisioningConfiguration");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TargetImageLabel");
        xmlSerializer.text(parameters.getTargetImageLabel());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TargetImageLabel");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TargetImageName");
        xmlSerializer.text(parameters.getTargetImageName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TargetImageName");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CaptureRoleOperation");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Begin capturing role as VM template.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Capture Virtual
    * Machine operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginCapturingVMImageAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineCaptureVMImageParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginCapturingVMImage(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * Begin capturing role as VM template.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Capture Virtual
    * Machine operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginCapturingVMImage(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineCaptureVMImageParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginCapturingVMImageAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + virtualMachineName.trim() + "/Operations";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CaptureRoleAsVMImageOperation");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        xmlSerializer.text("CaptureRoleAsVMImageOperation");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        
        if (parameters.getOSState() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OSState");
            xmlSerializer.text(parameters.getOSState());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OSState");
        }
        
        if (parameters.getVMImageName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "VMImageName");
            xmlSerializer.text(parameters.getVMImageName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "VMImageName");
        }
        
        if (parameters.getVMImageLabel() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "VMImageLabel");
            xmlSerializer.text(parameters.getVMImageLabel());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "VMImageLabel");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CaptureRoleAsVMImageOperation");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Creating Role operation adds a virtual machine to an existing
    * deployment. You can refer to the OSDisk in the Add Role operation in the
    * following ways: Platform/User Image - Set the SourceImageName to a
    * platform or user image. You can optionally specify the DiskName and
    * MediaLink values as part the operation to control the name and location
    * of target disk. When DiskName and MediaLink are specified in this mode,
    * they must not already exist in the system, otherwise a conflict fault is
    * returned; UserDisk - Set DiskName to a user supplied image in image
    * repository. SourceImageName must be set to NULL. All other properties
    * are ignored; or Blob in a Storage Account - Set MediaLink to a blob
    * containing the image. SourceImageName and DiskName are set to NULL.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Virtual Machine operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginCreatingAsync(final String serviceName, final String deploymentName, final VirtualMachineCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginCreating(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Creating Role operation adds a virtual machine to an existing
    * deployment. You can refer to the OSDisk in the Add Role operation in the
    * following ways: Platform/User Image - Set the SourceImageName to a
    * platform or user image. You can optionally specify the DiskName and
    * MediaLink values as part the operation to control the name and location
    * of target disk. When DiskName and MediaLink are specified in this mode,
    * they must not already exist in the system, otherwise a conflict fault is
    * returned; UserDisk - Set DiskName to a user supplied image in image
    * repository. SourceImageName must be set to NULL. All other properties
    * are ignored; or Blob in a Storage Account - Set MediaLink to a blob
    * containing the image. SourceImageName and DiskName are set to NULL.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Virtual Machine operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginCreating(String serviceName, String deploymentName, VirtualMachineCreateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getConfigurationSets() != null) {
            for (ConfigurationSet configurationSetsParameterItem : parameters.getConfigurationSets()) {
                if (configurationSetsParameterItem.getDomainJoin() != null) {
                    if (configurationSetsParameterItem.getDomainJoin().getCredentials() != null) {
                        if (configurationSetsParameterItem.getDomainJoin().getCredentials().getPassword() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.DomainJoin.Credentials.Password");
                        }
                        if (configurationSetsParameterItem.getDomainJoin().getCredentials().getUserName() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.DomainJoin.Credentials.UserName");
                        }
                    }
                }
                if (configurationSetsParameterItem.getHostName() != null && configurationSetsParameterItem.getHostName().length() < 1) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.HostName");
                }
                if (configurationSetsParameterItem.getHostName() != null && configurationSetsParameterItem.getHostName().length() > 64) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.HostName");
                }
                if (configurationSetsParameterItem.getSshSettings() != null) {
                    if (configurationSetsParameterItem.getSshSettings().getKeyPairs() != null) {
                        for (SshSettingKeyPair keyPairsParameterItem : configurationSetsParameterItem.getSshSettings().getKeyPairs()) {
                            if (keyPairsParameterItem.getFingerprint() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.KeyPairs.Fingerprint");
                            }
                            if (keyPairsParameterItem.getPath() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.KeyPairs.Path");
                            }
                        }
                    }
                    if (configurationSetsParameterItem.getSshSettings().getPublicKeys() != null) {
                        for (SshSettingPublicKey publicKeysParameterItem : configurationSetsParameterItem.getSshSettings().getPublicKeys()) {
                            if (publicKeysParameterItem.getFingerprint() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.PublicKeys.Fingerprint");
                            }
                            if (publicKeysParameterItem.getPath() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.PublicKeys.Path");
                            }
                        }
                    }
                }
                if (configurationSetsParameterItem.getStoredCertificateSettings() != null) {
                    for (StoredCertificateSettings storedCertificateSettingsParameterItem : configurationSetsParameterItem.getStoredCertificateSettings()) {
                        if (storedCertificateSettingsParameterItem.getStoreName() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.StoredCertificateSettings.StoreName");
                        }
                        if (storedCertificateSettingsParameterItem.getThumbprint() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.StoredCertificateSettings.Thumbprint");
                        }
                    }
                }
                if (configurationSetsParameterItem.getUserName() != null && configurationSetsParameterItem.getUserName().length() < 1) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserName");
                }
                if (configurationSetsParameterItem.getUserName() != null && configurationSetsParameterItem.getUserName().length() > 32) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserName");
                }
                if (configurationSetsParameterItem.getUserPassword() != null && configurationSetsParameterItem.getUserPassword().length() < 6 && (configurationSetsParameterItem.isDisableSshPasswordAuthentication() == false || configurationSetsParameterItem.getUserPassword().length() != 0)) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserPassword");
                }
                if (configurationSetsParameterItem.getUserPassword() != null && configurationSetsParameterItem.getUserPassword().length() > 72) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserPassword");
                }
            }
        }
        if (parameters.getRoleName() == null) {
            throw new NullPointerException("parameters.RoleName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginCreatingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roles";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PersistentVMRole");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
        xmlSerializer.text(parameters.getRoleName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleType");
        xmlSerializer.text("PersistentVMRole");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleType");
        
        if (parameters.getConfigurationSets() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSets");
            for (ConfigurationSet configurationSetsItem : parameters.getConfigurationSets()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSet");
                
                if (configurationSetsItem.getConfigurationSetType() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
                    xmlSerializer.text(configurationSetsItem.getConfigurationSetType());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
                }
                
                if (configurationSetsItem.getInputEndpoints() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                    for (InputEndpoint inputEndpointsItem : configurationSetsItem.getInputEndpoints()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                        
                        if (inputEndpointsItem.getLoadBalancedEndpointSetName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                            xmlSerializer.text(inputEndpointsItem.getLoadBalancedEndpointSetName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                        }
                        
                        if (inputEndpointsItem.getLocalPort() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getLocalPort()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                        }
                        
                        if (inputEndpointsItem.getName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                            xmlSerializer.text(inputEndpointsItem.getName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                        }
                        
                        if (inputEndpointsItem.getPort() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getPort()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                        }
                        
                        if (inputEndpointsItem.getLoadBalancerProbe() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                            
                            if (inputEndpointsItem.getLoadBalancerProbe().getPath() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                                xmlSerializer.text(inputEndpointsItem.getLoadBalancerProbe().getPath());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                            }
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getPort()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.text(ComputeManagementClientImpl.loadBalancerProbeTransportProtocolToString(inputEndpointsItem.getLoadBalancerProbe().getProtocol()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            
                            if (inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                                xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                            }
                            
                            if (inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                                xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                        }
                        
                        if (inputEndpointsItem.getProtocol() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.text(inputEndpointsItem.getProtocol());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                        }
                        
                        if (inputEndpointsItem.getVirtualIPAddress() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Vip");
                            xmlSerializer.text(inputEndpointsItem.getVirtualIPAddress().getHostAddress());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Vip");
                        }
                        
                        if (inputEndpointsItem.isEnableDirectServerReturn() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                            xmlSerializer.text(Boolean.toString(inputEndpointsItem.isEnableDirectServerReturn()).toLowerCase());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                        }
                        
                        if (inputEndpointsItem.getLoadBalancerName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                            xmlSerializer.text(inputEndpointsItem.getLoadBalancerName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                        }
                        
                        if (inputEndpointsItem.getEndpointAcl() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                            
                            if (inputEndpointsItem.getEndpointAcl().getRules() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rules");
                                for (AccessControlListRule rulesItem : inputEndpointsItem.getEndpointAcl().getRules()) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rule");
                                    
                                    if (rulesItem.getOrder() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Order");
                                        xmlSerializer.text(Integer.toString(rulesItem.getOrder()));
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Order");
                                    }
                                    
                                    if (rulesItem.getAction() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Action");
                                        xmlSerializer.text(rulesItem.getAction());
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Action");
                                    }
                                    
                                    if (rulesItem.getRemoteSubnet() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                        xmlSerializer.text(rulesItem.getRemoteSubnet());
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                    }
                                    
                                    if (rulesItem.getDescription() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
                                        xmlSerializer.text(rulesItem.getDescription());
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
                                    }
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rule");
                                }
                                
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rules");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                }
                
                if (configurationSetsItem.getSubnetNames() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
                    for (String subnetNamesItem : configurationSetsItem.getSubnetNames()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                        xmlSerializer.text(subnetNamesItem);
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
                }
                
                if (configurationSetsItem.getStaticVirtualNetworkIPAddress() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                    xmlSerializer.text(configurationSetsItem.getStaticVirtualNetworkIPAddress());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                }
                
                if (configurationSetsItem.getPublicIPs() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
                    for (ConfigurationSet.PublicIP publicIPsItem : configurationSetsItem.getPublicIPs()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                        
                        if (publicIPsItem.getName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                            xmlSerializer.text(publicIPsItem.getName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
                }
                
                if (configurationSetsItem.getComputerName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
                    xmlSerializer.text(configurationSetsItem.getComputerName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
                }
                
                if (configurationSetsItem.getAdminPassword() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
                    xmlSerializer.text(configurationSetsItem.getAdminPassword());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
                }
                
                if (configurationSetsItem.isResetPasswordOnFirstLogon() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
                    xmlSerializer.text(Boolean.toString(configurationSetsItem.isResetPasswordOnFirstLogon()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
                }
                
                if (configurationSetsItem.isEnableAutomaticUpdates() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
                    xmlSerializer.text(Boolean.toString(configurationSetsItem.isEnableAutomaticUpdates()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
                }
                
                if (configurationSetsItem.getTimeZone() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
                    xmlSerializer.text(configurationSetsItem.getTimeZone());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
                }
                
                if (configurationSetsItem.getDomainJoin() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
                    
                    if (configurationSetsItem.getDomainJoin().getCredentials() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                        
                        if (configurationSetsItem.getDomainJoin().getCredentials().getDomain() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Domain");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getDomain());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Domain");
                        }
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Username");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getUserName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Username");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Password");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getPassword());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Password");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                    }
                    
                    if (configurationSetsItem.getDomainJoin().getDomainToJoin() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getDomainToJoin());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                    }
                    
                    if (configurationSetsItem.getDomainJoin().getLdapMachineObjectOU() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getLdapMachineObjectOU());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                    }
                    
                    if (configurationSetsItem.getDomainJoin().getProvisioning() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                        
                        if (configurationSetsItem.getDomainJoin().getProvisioning().getAccountData() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getProvisioning().getAccountData());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
                }
                
                if (configurationSetsItem.getStoredCertificateSettings() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
                    for (StoredCertificateSettings storedCertificateSettingsItem : configurationSetsItem.getStoredCertificateSettings()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                        xmlSerializer.text("LocalMachine");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                        xmlSerializer.text(storedCertificateSettingsItem.getStoreName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                        xmlSerializer.text(storedCertificateSettingsItem.getThumbprint());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
                }
                
                if (configurationSetsItem.getWindowsRemoteManagement() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WinRM");
                    
                    if (configurationSetsItem.getWindowsRemoteManagement().getListeners() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                        for (WindowsRemoteManagementListener listenersItem : configurationSetsItem.getWindowsRemoteManagement().getListeners()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listener");
                            
                            if (listenersItem.getCertificateThumbprint() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                                xmlSerializer.text(listenersItem.getCertificateThumbprint());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                            }
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.text(listenersItem.getListenerType().toString());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listener");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WinRM");
                }
                
                if (configurationSetsItem.getAdminUserName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
                    xmlSerializer.text(configurationSetsItem.getAdminUserName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
                }
                
                if (configurationSetsItem.getHostName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostName");
                    xmlSerializer.text(configurationSetsItem.getHostName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostName");
                }
                
                if (configurationSetsItem.getUserName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserName");
                    xmlSerializer.text(configurationSetsItem.getUserName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserName");
                }
                
                if (configurationSetsItem.getUserPassword() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
                    xmlSerializer.text(configurationSetsItem.getUserPassword());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
                }
                
                if (configurationSetsItem.isDisableSshPasswordAuthentication() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
                    xmlSerializer.text(Boolean.toString(configurationSetsItem.isDisableSshPasswordAuthentication()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
                }
                
                if (configurationSetsItem.getSshSettings() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SSH");
                    
                    if (configurationSetsItem.getSshSettings().getPublicKeys() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                        for (SshSettingPublicKey publicKeysItem : configurationSetsItem.getSshSettings().getPublicKeys()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            xmlSerializer.text(publicKeysItem.getFingerprint());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.text(publicKeysItem.getPath());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                    }
                    
                    if (configurationSetsItem.getSshSettings().getKeyPairs() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                        for (SshSettingKeyPair keyPairsItem : configurationSetsItem.getSshSettings().getKeyPairs()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            xmlSerializer.text(keyPairsItem.getFingerprint());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.text(keyPairsItem.getPath());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SSH");
                }
                
                if (configurationSetsItem.getCustomData() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CustomData");
                    xmlSerializer.text(configurationSetsItem.getCustomData());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CustomData");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSet");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSets");
        }
        
        if (parameters.getResourceExtensionReferences() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReferences");
            for (ResourceExtensionReference resourceExtensionReferencesItem : parameters.getResourceExtensionReferences()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReference");
                
                if (resourceExtensionReferencesItem.getReferenceName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ReferenceName");
                    xmlSerializer.text(resourceExtensionReferencesItem.getReferenceName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ReferenceName");
                }
                
                if (resourceExtensionReferencesItem.getPublisher() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Publisher");
                    xmlSerializer.text(resourceExtensionReferencesItem.getPublisher());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Publisher");
                }
                
                if (resourceExtensionReferencesItem.getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(resourceExtensionReferencesItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                }
                
                if (resourceExtensionReferencesItem.getVersion() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Version");
                    xmlSerializer.text(resourceExtensionReferencesItem.getVersion());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Version");
                }
                
                if (resourceExtensionReferencesItem.getResourceExtensionParameterValues() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValues");
                    for (ResourceExtensionParameterValue resourceExtensionParameterValuesItem : resourceExtensionReferencesItem.getResourceExtensionParameterValues()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValue");
                        
                        if (resourceExtensionParameterValuesItem.getKey() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Key");
                            xmlSerializer.text(resourceExtensionParameterValuesItem.getKey());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Key");
                        }
                        
                        if (resourceExtensionParameterValuesItem.getValue() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                            xmlSerializer.text(Base64.encode(resourceExtensionParameterValuesItem.getValue().getBytes()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Value");
                        }
                        
                        if (resourceExtensionParameterValuesItem.getType() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
                            xmlSerializer.text(resourceExtensionParameterValuesItem.getType());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValue");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValues");
                }
                
                if (resourceExtensionReferencesItem.getState() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "State");
                    xmlSerializer.text(resourceExtensionReferencesItem.getState());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "State");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReference");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReferences");
        }
        
        if (parameters.getVMImageName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "VMImageName");
            xmlSerializer.text(parameters.getVMImageName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "VMImageName");
        }
        
        if (parameters.getMediaLocation() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLocation");
            xmlSerializer.text(parameters.getMediaLocation().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLocation");
        }
        
        if (parameters.getAvailabilitySetName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AvailabilitySetName");
            xmlSerializer.text(parameters.getAvailabilitySetName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AvailabilitySetName");
        }
        
        if (parameters.getDataVirtualHardDisks() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisks");
            for (DataVirtualHardDisk dataVirtualHardDisksItem : parameters.getDataVirtualHardDisks()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
                
                if (dataVirtualHardDisksItem.getHostCaching() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                    xmlSerializer.text(dataVirtualHardDisksItem.getHostCaching());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                }
                
                if (dataVirtualHardDisksItem.getLabel() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                    xmlSerializer.text(dataVirtualHardDisksItem.getLabel());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                }
                
                if (dataVirtualHardDisksItem.getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                    xmlSerializer.text(dataVirtualHardDisksItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                }
                
                if (dataVirtualHardDisksItem.getLogicalUnitNumber() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Lun");
                    xmlSerializer.text(Integer.toString(dataVirtualHardDisksItem.getLogicalUnitNumber()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Lun");
                }
                
                if (dataVirtualHardDisksItem.getLogicalDiskSizeInGB() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
                    xmlSerializer.text(Integer.toString(dataVirtualHardDisksItem.getLogicalDiskSizeInGB()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
                }
                
                if (dataVirtualHardDisksItem.getMediaLink() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                    xmlSerializer.text(dataVirtualHardDisksItem.getMediaLink().toString());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                }
                
                if (dataVirtualHardDisksItem.getSourceMediaLink() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SourceMediaLink");
                    xmlSerializer.text(dataVirtualHardDisksItem.getSourceMediaLink().toString());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SourceMediaLink");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisks");
        }
        
        if (parameters.getOSVirtualHardDisk() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OSVirtualHardDisk");
            
            if (parameters.getOSVirtualHardDisk().getHostCaching() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                xmlSerializer.text(parameters.getOSVirtualHardDisk().getHostCaching());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
            }
            
            if (parameters.getOSVirtualHardDisk().getLabel() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                xmlSerializer.text(parameters.getOSVirtualHardDisk().getLabel());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
            }
            
            if (parameters.getOSVirtualHardDisk().getName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                xmlSerializer.text(parameters.getOSVirtualHardDisk().getName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskName");
            }
            
            if (parameters.getOSVirtualHardDisk().getMediaLink() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                xmlSerializer.text(parameters.getOSVirtualHardDisk().getMediaLink().toString());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
            }
            
            if (parameters.getOSVirtualHardDisk().getSourceImageName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SourceImageName");
                xmlSerializer.text(parameters.getOSVirtualHardDisk().getSourceImageName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SourceImageName");
            }
            
            if (parameters.getOSVirtualHardDisk().getOperatingSystem() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OS");
                xmlSerializer.text(parameters.getOSVirtualHardDisk().getOperatingSystem());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OS");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OSVirtualHardDisk");
        }
        
        if (parameters.getRoleSize() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleSize");
            xmlSerializer.text(parameters.getRoleSize());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleSize");
        }
        
        if (parameters.isProvisionGuestAgent() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ProvisionGuestAgent");
            xmlSerializer.text(Boolean.toString(parameters.isProvisionGuestAgent()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ProvisionGuestAgent");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PersistentVMRole");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Creating Virtual Machine Deployment operation provisions a
    * virtual machine based on the supplied configuration. When you create a
    * deployment of a virtual machine, you should make sure that the cloud
    * service and the disk or image that you use are located in the same
    * region. For example, if the cloud service was created in the West US
    * region, the disk or image that you use should also be located in a
    * storage account in the West US region.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Virtual Machine Deployment operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginCreatingDeploymentAsync(final String serviceName, final VirtualMachineCreateDeploymentParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginCreatingDeployment(serviceName, parameters);
            }
         });
    }
    
    /**
    * The Begin Creating Virtual Machine Deployment operation provisions a
    * virtual machine based on the supplied configuration. When you create a
    * deployment of a virtual machine, you should make sure that the cloud
    * service and the disk or image that you use are located in the same
    * region. For example, if the cloud service was created in the West US
    * region, the disk or image that you use should also be located in a
    * storage account in the West US region.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Virtual Machine Deployment operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginCreatingDeployment(String serviceName, VirtualMachineCreateDeploymentParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getLabel() == null) {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getLabel().length() > 100) {
            throw new IllegalArgumentException("parameters.Label");
        }
        if (parameters.getName() == null) {
            throw new NullPointerException("parameters.Name");
        }
        if (parameters.getRoles() == null) {
            throw new NullPointerException("parameters.Roles");
        }
        if (parameters.getRoles() != null) {
            for (Role rolesParameterItem : parameters.getRoles()) {
                if (rolesParameterItem.getConfigurationSets() != null) {
                    for (ConfigurationSet configurationSetsParameterItem : rolesParameterItem.getConfigurationSets()) {
                        if (configurationSetsParameterItem.getDomainJoin() != null) {
                            if (configurationSetsParameterItem.getDomainJoin().getCredentials() != null) {
                                if (configurationSetsParameterItem.getDomainJoin().getCredentials().getPassword() == null) {
                                    throw new NullPointerException("parameters.Roles.ConfigurationSets.DomainJoin.Credentials.Password");
                                }
                                if (configurationSetsParameterItem.getDomainJoin().getCredentials().getUserName() == null) {
                                    throw new NullPointerException("parameters.Roles.ConfigurationSets.DomainJoin.Credentials.UserName");
                                }
                            }
                        }
                        if (configurationSetsParameterItem.getHostName() != null && configurationSetsParameterItem.getHostName().length() < 1) {
                            throw new IllegalArgumentException("parameters.Roles.ConfigurationSets.HostName");
                        }
                        if (configurationSetsParameterItem.getHostName() != null && configurationSetsParameterItem.getHostName().length() > 64) {
                            throw new IllegalArgumentException("parameters.Roles.ConfigurationSets.HostName");
                        }
                        if (configurationSetsParameterItem.getSshSettings() != null) {
                            if (configurationSetsParameterItem.getSshSettings().getKeyPairs() != null) {
                                for (SshSettingKeyPair keyPairsParameterItem : configurationSetsParameterItem.getSshSettings().getKeyPairs()) {
                                    if (keyPairsParameterItem.getFingerprint() == null) {
                                        throw new NullPointerException("parameters.Roles.ConfigurationSets.SshSettings.KeyPairs.Fingerprint");
                                    }
                                    if (keyPairsParameterItem.getPath() == null) {
                                        throw new NullPointerException("parameters.Roles.ConfigurationSets.SshSettings.KeyPairs.Path");
                                    }
                                }
                            }
                            if (configurationSetsParameterItem.getSshSettings().getPublicKeys() != null) {
                                for (SshSettingPublicKey publicKeysParameterItem : configurationSetsParameterItem.getSshSettings().getPublicKeys()) {
                                    if (publicKeysParameterItem.getFingerprint() == null) {
                                        throw new NullPointerException("parameters.Roles.ConfigurationSets.SshSettings.PublicKeys.Fingerprint");
                                    }
                                    if (publicKeysParameterItem.getPath() == null) {
                                        throw new NullPointerException("parameters.Roles.ConfigurationSets.SshSettings.PublicKeys.Path");
                                    }
                                }
                            }
                        }
                        if (configurationSetsParameterItem.getStoredCertificateSettings() != null) {
                            for (StoredCertificateSettings storedCertificateSettingsParameterItem : configurationSetsParameterItem.getStoredCertificateSettings()) {
                                if (storedCertificateSettingsParameterItem.getStoreName() == null) {
                                    throw new NullPointerException("parameters.Roles.ConfigurationSets.StoredCertificateSettings.StoreName");
                                }
                                if (storedCertificateSettingsParameterItem.getThumbprint() == null) {
                                    throw new NullPointerException("parameters.Roles.ConfigurationSets.StoredCertificateSettings.Thumbprint");
                                }
                            }
                        }
                        if (configurationSetsParameterItem.getUserName() != null && configurationSetsParameterItem.getUserName().length() < 1) {
                            throw new IllegalArgumentException("parameters.Roles.ConfigurationSets.UserName");
                        }
                        if (configurationSetsParameterItem.getUserName() != null && configurationSetsParameterItem.getUserName().length() > 32) {
                            throw new IllegalArgumentException("parameters.Roles.ConfigurationSets.UserName");
                        }
                        if (configurationSetsParameterItem.getUserPassword() != null && configurationSetsParameterItem.getUserPassword().length() < 6 && (configurationSetsParameterItem.isDisableSshPasswordAuthentication() == false || configurationSetsParameterItem.getUserPassword().length() != 0)) {
                            throw new IllegalArgumentException("parameters.Roles.ConfigurationSets.UserPassword");
                        }
                        if (configurationSetsParameterItem.getUserPassword() != null && configurationSetsParameterItem.getUserPassword().length() > 72) {
                            throw new IllegalArgumentException("parameters.Roles.ConfigurationSets.UserPassword");
                        }
                    }
                }
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginCreatingDeploymentAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Deployment");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
        xmlSerializer.text(parameters.getName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DeploymentSlot");
        xmlSerializer.text(parameters.getDeploymentSlot().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DeploymentSlot");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
        xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleList");
        for (Role roleListItem : parameters.getRoles()) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Role");
            
            if (roleListItem.getRoleName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
                xmlSerializer.text(roleListItem.getRoleName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
            }
            
            if (roleListItem.getOSVersion() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OsVersion");
                xmlSerializer.text(roleListItem.getOSVersion());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OsVersion");
            }
            
            if (roleListItem.getRoleType() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleType");
                xmlSerializer.text(roleListItem.getRoleType());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleType");
            }
            
            if (roleListItem.getConfigurationSets() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSets");
                for (ConfigurationSet configurationSetsItem : roleListItem.getConfigurationSets()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSet");
                    
                    if (configurationSetsItem.getConfigurationSetType() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
                        xmlSerializer.text(configurationSetsItem.getConfigurationSetType());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
                    }
                    
                    if (configurationSetsItem.getInputEndpoints() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                        for (InputEndpoint inputEndpointsItem : configurationSetsItem.getInputEndpoints()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                            
                            if (inputEndpointsItem.getLoadBalancedEndpointSetName() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                                xmlSerializer.text(inputEndpointsItem.getLoadBalancedEndpointSetName());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                            }
                            
                            if (inputEndpointsItem.getLocalPort() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                                xmlSerializer.text(Integer.toString(inputEndpointsItem.getLocalPort()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                            }
                            
                            if (inputEndpointsItem.getName() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                                xmlSerializer.text(inputEndpointsItem.getName());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                            }
                            
                            if (inputEndpointsItem.getPort() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                                xmlSerializer.text(Integer.toString(inputEndpointsItem.getPort()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                            }
                            
                            if (inputEndpointsItem.getLoadBalancerProbe() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                                
                                if (inputEndpointsItem.getLoadBalancerProbe().getPath() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                                    xmlSerializer.text(inputEndpointsItem.getLoadBalancerProbe().getPath());
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                                }
                                
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                                xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getPort()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                                
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                                xmlSerializer.text(ComputeManagementClientImpl.loadBalancerProbeTransportProtocolToString(inputEndpointsItem.getLoadBalancerProbe().getProtocol()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                                
                                if (inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                                    xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds()));
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                                }
                                
                                if (inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                                    xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds()));
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                                }
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                            }
                            
                            if (inputEndpointsItem.getProtocol() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                                xmlSerializer.text(inputEndpointsItem.getProtocol());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            }
                            
                            if (inputEndpointsItem.getVirtualIPAddress() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Vip");
                                xmlSerializer.text(inputEndpointsItem.getVirtualIPAddress().getHostAddress());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Vip");
                            }
                            
                            if (inputEndpointsItem.isEnableDirectServerReturn() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                                xmlSerializer.text(Boolean.toString(inputEndpointsItem.isEnableDirectServerReturn()).toLowerCase());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                            }
                            
                            if (inputEndpointsItem.getLoadBalancerName() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                                xmlSerializer.text(inputEndpointsItem.getLoadBalancerName());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                            }
                            
                            if (inputEndpointsItem.getEndpointAcl() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                                
                                if (inputEndpointsItem.getEndpointAcl().getRules() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rules");
                                    for (AccessControlListRule rulesItem : inputEndpointsItem.getEndpointAcl().getRules()) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rule");
                                        
                                        if (rulesItem.getOrder() != null) {
                                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Order");
                                            xmlSerializer.text(Integer.toString(rulesItem.getOrder()));
                                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Order");
                                        }
                                        
                                        if (rulesItem.getAction() != null) {
                                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Action");
                                            xmlSerializer.text(rulesItem.getAction());
                                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Action");
                                        }
                                        
                                        if (rulesItem.getRemoteSubnet() != null) {
                                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                            xmlSerializer.text(rulesItem.getRemoteSubnet());
                                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                        }
                                        
                                        if (rulesItem.getDescription() != null) {
                                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
                                            xmlSerializer.text(rulesItem.getDescription());
                                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
                                        }
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rule");
                                    }
                                    
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rules");
                                }
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                    }
                    
                    if (configurationSetsItem.getSubnetNames() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
                        for (String subnetNamesItem : configurationSetsItem.getSubnetNames()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                            xmlSerializer.text(subnetNamesItem);
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
                    }
                    
                    if (configurationSetsItem.getStaticVirtualNetworkIPAddress() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                        xmlSerializer.text(configurationSetsItem.getStaticVirtualNetworkIPAddress());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                    }
                    
                    if (configurationSetsItem.getPublicIPs() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
                        for (ConfigurationSet.PublicIP publicIPsItem : configurationSetsItem.getPublicIPs()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                            
                            if (publicIPsItem.getName() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                                xmlSerializer.text(publicIPsItem.getName());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
                    }
                    
                    if (configurationSetsItem.getComputerName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
                        xmlSerializer.text(configurationSetsItem.getComputerName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
                    }
                    
                    if (configurationSetsItem.getAdminPassword() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
                        xmlSerializer.text(configurationSetsItem.getAdminPassword());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
                    }
                    
                    if (configurationSetsItem.isResetPasswordOnFirstLogon() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
                        xmlSerializer.text(Boolean.toString(configurationSetsItem.isResetPasswordOnFirstLogon()).toLowerCase());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
                    }
                    
                    if (configurationSetsItem.isEnableAutomaticUpdates() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
                        xmlSerializer.text(Boolean.toString(configurationSetsItem.isEnableAutomaticUpdates()).toLowerCase());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
                    }
                    
                    if (configurationSetsItem.getTimeZone() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
                        xmlSerializer.text(configurationSetsItem.getTimeZone());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
                    }
                    
                    if (configurationSetsItem.getDomainJoin() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
                        
                        if (configurationSetsItem.getDomainJoin().getCredentials() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                            
                            if (configurationSetsItem.getDomainJoin().getCredentials().getDomain() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Domain");
                                xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getDomain());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Domain");
                            }
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Username");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getUserName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Username");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Password");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getPassword());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Password");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                        }
                        
                        if (configurationSetsItem.getDomainJoin().getDomainToJoin() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getDomainToJoin());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                        }
                        
                        if (configurationSetsItem.getDomainJoin().getLdapMachineObjectOU() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getLdapMachineObjectOU());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                        }
                        
                        if (configurationSetsItem.getDomainJoin().getProvisioning() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                            
                            if (configurationSetsItem.getDomainJoin().getProvisioning().getAccountData() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                                xmlSerializer.text(configurationSetsItem.getDomainJoin().getProvisioning().getAccountData());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
                    }
                    
                    if (configurationSetsItem.getStoredCertificateSettings() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
                        for (StoredCertificateSettings storedCertificateSettingsItem : configurationSetsItem.getStoredCertificateSettings()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                            xmlSerializer.text("LocalMachine");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                            xmlSerializer.text(storedCertificateSettingsItem.getStoreName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                            xmlSerializer.text(storedCertificateSettingsItem.getThumbprint());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
                    }
                    
                    if (configurationSetsItem.getWindowsRemoteManagement() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WinRM");
                        
                        if (configurationSetsItem.getWindowsRemoteManagement().getListeners() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                            for (WindowsRemoteManagementListener listenersItem : configurationSetsItem.getWindowsRemoteManagement().getListeners()) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listener");
                                
                                if (listenersItem.getCertificateThumbprint() != null) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                                    xmlSerializer.text(listenersItem.getCertificateThumbprint());
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                                }
                                
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                                xmlSerializer.text(listenersItem.getListenerType().toString());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listener");
                            }
                            
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WinRM");
                    }
                    
                    if (configurationSetsItem.getAdminUserName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
                        xmlSerializer.text(configurationSetsItem.getAdminUserName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
                    }
                    
                    if (configurationSetsItem.getHostName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostName");
                        xmlSerializer.text(configurationSetsItem.getHostName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostName");
                    }
                    
                    if (configurationSetsItem.getUserName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserName");
                        xmlSerializer.text(configurationSetsItem.getUserName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserName");
                    }
                    
                    if (configurationSetsItem.getUserPassword() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
                        xmlSerializer.text(configurationSetsItem.getUserPassword());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
                    }
                    
                    if (configurationSetsItem.isDisableSshPasswordAuthentication() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
                        xmlSerializer.text(Boolean.toString(configurationSetsItem.isDisableSshPasswordAuthentication()).toLowerCase());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
                    }
                    
                    if (configurationSetsItem.getSshSettings() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SSH");
                        
                        if (configurationSetsItem.getSshSettings().getPublicKeys() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                            for (SshSettingPublicKey publicKeysItem : configurationSetsItem.getSshSettings().getPublicKeys()) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                                
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                                xmlSerializer.text(publicKeysItem.getFingerprint());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                                
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                                xmlSerializer.text(publicKeysItem.getPath());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                            }
                            
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                        }
                        
                        if (configurationSetsItem.getSshSettings().getKeyPairs() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                            for (SshSettingKeyPair keyPairsItem : configurationSetsItem.getSshSettings().getKeyPairs()) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                                
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                                xmlSerializer.text(keyPairsItem.getFingerprint());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                                
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                                xmlSerializer.text(keyPairsItem.getPath());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                            }
                            
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SSH");
                    }
                    
                    if (configurationSetsItem.getCustomData() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CustomData");
                        xmlSerializer.text(configurationSetsItem.getCustomData());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CustomData");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSet");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSets");
            }
            
            if (roleListItem.getResourceExtensionReferences() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReferences");
                for (ResourceExtensionReference resourceExtensionReferencesItem : roleListItem.getResourceExtensionReferences()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReference");
                    
                    if (resourceExtensionReferencesItem.getReferenceName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ReferenceName");
                        xmlSerializer.text(resourceExtensionReferencesItem.getReferenceName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ReferenceName");
                    }
                    
                    if (resourceExtensionReferencesItem.getPublisher() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Publisher");
                        xmlSerializer.text(resourceExtensionReferencesItem.getPublisher());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Publisher");
                    }
                    
                    if (resourceExtensionReferencesItem.getName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                        xmlSerializer.text(resourceExtensionReferencesItem.getName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    }
                    
                    if (resourceExtensionReferencesItem.getVersion() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Version");
                        xmlSerializer.text(resourceExtensionReferencesItem.getVersion());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Version");
                    }
                    
                    if (resourceExtensionReferencesItem.getResourceExtensionParameterValues() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValues");
                        for (ResourceExtensionParameterValue resourceExtensionParameterValuesItem : resourceExtensionReferencesItem.getResourceExtensionParameterValues()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValue");
                            
                            if (resourceExtensionParameterValuesItem.getKey() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Key");
                                xmlSerializer.text(resourceExtensionParameterValuesItem.getKey());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Key");
                            }
                            
                            if (resourceExtensionParameterValuesItem.getValue() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                                xmlSerializer.text(Base64.encode(resourceExtensionParameterValuesItem.getValue().getBytes()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Value");
                            }
                            
                            if (resourceExtensionParameterValuesItem.getType() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
                                xmlSerializer.text(resourceExtensionParameterValuesItem.getType());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValue");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValues");
                    }
                    
                    if (resourceExtensionReferencesItem.getState() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "State");
                        xmlSerializer.text(resourceExtensionReferencesItem.getState());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "State");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReference");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReferences");
            }
            
            if (roleListItem.getVMImageName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "VMImageName");
                xmlSerializer.text(roleListItem.getVMImageName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "VMImageName");
            }
            
            if (roleListItem.getMediaLocation() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLocation");
                xmlSerializer.text(roleListItem.getMediaLocation().toString());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLocation");
            }
            
            if (roleListItem.getAvailabilitySetName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AvailabilitySetName");
                xmlSerializer.text(roleListItem.getAvailabilitySetName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AvailabilitySetName");
            }
            
            if (roleListItem.getDataVirtualHardDisks() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisks");
                for (DataVirtualHardDisk dataVirtualHardDisksItem : roleListItem.getDataVirtualHardDisks()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
                    
                    if (dataVirtualHardDisksItem.getHostCaching() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                        xmlSerializer.text(dataVirtualHardDisksItem.getHostCaching());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                    }
                    
                    if (dataVirtualHardDisksItem.getLabel() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                        xmlSerializer.text(dataVirtualHardDisksItem.getLabel());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                    }
                    
                    if (dataVirtualHardDisksItem.getName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                        xmlSerializer.text(dataVirtualHardDisksItem.getName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                    }
                    
                    if (dataVirtualHardDisksItem.getLogicalUnitNumber() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Lun");
                        xmlSerializer.text(Integer.toString(dataVirtualHardDisksItem.getLogicalUnitNumber()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Lun");
                    }
                    
                    if (dataVirtualHardDisksItem.getLogicalDiskSizeInGB() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
                        xmlSerializer.text(Integer.toString(dataVirtualHardDisksItem.getLogicalDiskSizeInGB()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
                    }
                    
                    if (dataVirtualHardDisksItem.getMediaLink() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                        xmlSerializer.text(dataVirtualHardDisksItem.getMediaLink().toString());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                    }
                    
                    if (dataVirtualHardDisksItem.getSourceMediaLink() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SourceMediaLink");
                        xmlSerializer.text(dataVirtualHardDisksItem.getSourceMediaLink().toString());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SourceMediaLink");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisks");
            }
            
            if (roleListItem.getLabel() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
                xmlSerializer.text(roleListItem.getLabel());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
            }
            
            if (roleListItem.getOSVirtualHardDisk() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OSVirtualHardDisk");
                
                if (roleListItem.getOSVirtualHardDisk().getHostCaching() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                    xmlSerializer.text(roleListItem.getOSVirtualHardDisk().getHostCaching());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                }
                
                if (roleListItem.getOSVirtualHardDisk().getLabel() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                    xmlSerializer.text(roleListItem.getOSVirtualHardDisk().getLabel());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                }
                
                if (roleListItem.getOSVirtualHardDisk().getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                    xmlSerializer.text(roleListItem.getOSVirtualHardDisk().getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                }
                
                if (roleListItem.getOSVirtualHardDisk().getMediaLink() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                    xmlSerializer.text(roleListItem.getOSVirtualHardDisk().getMediaLink().toString());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                }
                
                if (roleListItem.getOSVirtualHardDisk().getSourceImageName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SourceImageName");
                    xmlSerializer.text(roleListItem.getOSVirtualHardDisk().getSourceImageName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SourceImageName");
                }
                
                if (roleListItem.getOSVirtualHardDisk().getOperatingSystem() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OS");
                    xmlSerializer.text(roleListItem.getOSVirtualHardDisk().getOperatingSystem());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OS");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OSVirtualHardDisk");
            }
            
            if (roleListItem.getRoleSize() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleSize");
                xmlSerializer.text(roleListItem.getRoleSize());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleSize");
            }
            
            if (roleListItem.getDefaultWinRmCertificateThumbprint() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DefaultWinRmCertificateThumbprint");
                xmlSerializer.text(roleListItem.getDefaultWinRmCertificateThumbprint());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DefaultWinRmCertificateThumbprint");
            }
            
            if (roleListItem.isProvisionGuestAgent() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ProvisionGuestAgent");
                xmlSerializer.text(Boolean.toString(roleListItem.isProvisionGuestAgent()).toLowerCase());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ProvisionGuestAgent");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Role");
        }
        
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleList");
        
        if (parameters.getVirtualNetworkName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "VirtualNetworkName");
            xmlSerializer.text(parameters.getVirtualNetworkName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "VirtualNetworkName");
        }
        
        if (parameters.getDnsSettings() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Dns");
            
            if (parameters.getDnsSettings().getDnsServers() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DnsServers");
                for (DnsServer dnsServersItem : parameters.getDnsSettings().getDnsServers()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DnsServer");
                    
                    if (dnsServersItem.getName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                        xmlSerializer.text(dnsServersItem.getName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    }
                    
                    if (dnsServersItem.getAddress() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Address");
                        xmlSerializer.text(dnsServersItem.getAddress().getHostAddress());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Address");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DnsServer");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DnsServers");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Dns");
        }
        
        if (parameters.getReservedIPName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ReservedIPName");
            xmlSerializer.text(parameters.getReservedIPName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ReservedIPName");
        }
        
        if (parameters.getLoadBalancers() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancers");
            for (LoadBalancer loadBalancersItem : parameters.getLoadBalancers()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancer");
                
                if (loadBalancersItem.getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(loadBalancersItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                }
                
                if (loadBalancersItem.getFrontendIPConfiguration() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "FrontendIpConfiguration");
                    
                    if (loadBalancersItem.getFrontendIPConfiguration().getType() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
                        xmlSerializer.text(loadBalancersItem.getFrontendIPConfiguration().getType());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
                    }
                    
                    if (loadBalancersItem.getFrontendIPConfiguration().getSubnetName() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                        xmlSerializer.text(loadBalancersItem.getFrontendIPConfiguration().getSubnetName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                    }
                    
                    if (loadBalancersItem.getFrontendIPConfiguration().getStaticVirtualNetworkIPAddress() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                        xmlSerializer.text(loadBalancersItem.getFrontendIPConfiguration().getStaticVirtualNetworkIPAddress().getHostAddress());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "FrontendIpConfiguration");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancer");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancers");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Deployment");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Deleting Role operation deletes the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * delete.
    * @param deleteFromStorage Required. Specifies that the source blob(s) for
    * the virtual machine should also be deleted from storage.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginDeletingAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final boolean deleteFromStorage) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginDeleting(serviceName, deploymentName, virtualMachineName, deleteFromStorage);
            }
         });
    }
    
    /**
    * The Begin Deleting Role operation deletes the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * delete.
    * @param deleteFromStorage Required. Specifies that the source blob(s) for
    * the virtual machine should also be deleted from storage.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginDeleting(String serviceName, String deploymentName, String virtualMachineName, boolean deleteFromStorage) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("deleteFromStorage", deleteFromStorage);
            CloudTracing.enter(invocationId, this, "beginDeletingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roles/" + virtualMachineName.trim() + "?";
        if (deleteFromStorage == true) {
            url = url + "comp=" + "media";
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Restarting role operation restarts the specified virtual
    * machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginRestartingAsync(final String serviceName, final String deploymentName, final String virtualMachineName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginRestarting(serviceName, deploymentName, virtualMachineName);
            }
         });
    }
    
    /**
    * The Begin Restarting role operation restarts the specified virtual
    * machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginRestarting(String serviceName, String deploymentName, String virtualMachineName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            CloudTracing.enter(invocationId, this, "beginRestartingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + virtualMachineName.trim() + "/Operations";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = "<RestartRoleOperation xmlns=\"http://schemas.microsoft.com/windowsazure\"><OperationType>RestartRoleOperation</OperationType></RestartRoleOperation>";
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Shutdown Role operation shuts down the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * shutdown.
    * @param parameters Required. The parameters for the shutdown vm operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginShutdownAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineShutdownParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginShutdown(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * The Shutdown Role operation shuts down the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * shutdown.
    * @param parameters Required. The parameters for the shutdown vm operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginShutdown(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineShutdownParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginShutdownAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + virtualMachineName.trim() + "/Operations";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ShutdownRoleOperation");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        xmlSerializer.text("ShutdownRoleOperation");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PostShutdownAction");
        xmlSerializer.text(parameters.getPostShutdownAction().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PostShutdownAction");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ShutdownRoleOperation");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Shutting Down Roles operation stops the specified set of
    * virtual machines.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469421.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Begin Shutting Down
    * Roles operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginShuttingDownRolesAsync(final String serviceName, final String deploymentName, final VirtualMachineShutdownRolesParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginShuttingDownRoles(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Shutting Down Roles operation stops the specified set of
    * virtual machines.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469421.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Begin Shutting Down
    * Roles operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginShuttingDownRoles(String serviceName, String deploymentName, VirtualMachineShutdownRolesParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginShuttingDownRolesAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/Roles/Operations";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ShutdownRolesOperation");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        xmlSerializer.text("ShutdownRolesOperation");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        
        if (parameters.getRoles() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Roles");
            for (String rolesItem : parameters.getRoles()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(rolesItem);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Roles");
        }
        
        if (parameters.getPostShutdownAction() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PostShutdownAction");
            xmlSerializer.text(parameters.getPostShutdownAction().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PostShutdownAction");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ShutdownRolesOperation");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Starting Role operation starts the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * start.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginStartingAsync(final String serviceName, final String deploymentName, final String virtualMachineName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginStarting(serviceName, deploymentName, virtualMachineName);
            }
         });
    }
    
    /**
    * The Begin Starting Role operation starts the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * start.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginStarting(String serviceName, String deploymentName, String virtualMachineName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            CloudTracing.enter(invocationId, this, "beginStartingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + virtualMachineName.trim() + "/Operations";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = "<StartRoleOperation xmlns=\"http://schemas.microsoft.com/windowsazure\"><OperationType>StartRoleOperation</OperationType></StartRoleOperation>";
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Starting Roles operation starts the specified set of virtual
    * machines.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469419.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Begin Starting
    * Roles operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginStartingRolesAsync(final String serviceName, final String deploymentName, final VirtualMachineStartRolesParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginStartingRoles(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Starting Roles operation starts the specified set of virtual
    * machines.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469419.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Begin Starting
    * Roles operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginStartingRoles(String serviceName, String deploymentName, VirtualMachineStartRolesParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginStartingRolesAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/Roles/Operations";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StartRolesOperation");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        xmlSerializer.text("StartRolesOperation");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OperationType");
        
        if (parameters.getRoles() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Roles");
            for (String rolesItem : parameters.getRoles()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(rolesItem);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Roles");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StartRolesOperation");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Updating Role operation adds a virtual machine to an existing
    * deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of your virtual machine.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Virtual Machine operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUpdatingAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUpdating(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * The Begin Updating Role operation adds a virtual machine to an existing
    * deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of your virtual machine.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Virtual Machine operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUpdating(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineUpdateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getConfigurationSets() != null) {
            for (ConfigurationSet configurationSetsParameterItem : parameters.getConfigurationSets()) {
                if (configurationSetsParameterItem.getDomainJoin() != null) {
                    if (configurationSetsParameterItem.getDomainJoin().getCredentials() != null) {
                        if (configurationSetsParameterItem.getDomainJoin().getCredentials().getPassword() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.DomainJoin.Credentials.Password");
                        }
                        if (configurationSetsParameterItem.getDomainJoin().getCredentials().getUserName() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.DomainJoin.Credentials.UserName");
                        }
                    }
                }
                if (configurationSetsParameterItem.getHostName() != null && configurationSetsParameterItem.getHostName().length() < 1) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.HostName");
                }
                if (configurationSetsParameterItem.getHostName() != null && configurationSetsParameterItem.getHostName().length() > 64) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.HostName");
                }
                if (configurationSetsParameterItem.getSshSettings() != null) {
                    if (configurationSetsParameterItem.getSshSettings().getKeyPairs() != null) {
                        for (SshSettingKeyPair keyPairsParameterItem : configurationSetsParameterItem.getSshSettings().getKeyPairs()) {
                            if (keyPairsParameterItem.getFingerprint() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.KeyPairs.Fingerprint");
                            }
                            if (keyPairsParameterItem.getPath() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.KeyPairs.Path");
                            }
                        }
                    }
                    if (configurationSetsParameterItem.getSshSettings().getPublicKeys() != null) {
                        for (SshSettingPublicKey publicKeysParameterItem : configurationSetsParameterItem.getSshSettings().getPublicKeys()) {
                            if (publicKeysParameterItem.getFingerprint() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.PublicKeys.Fingerprint");
                            }
                            if (publicKeysParameterItem.getPath() == null) {
                                throw new NullPointerException("parameters.ConfigurationSets.SshSettings.PublicKeys.Path");
                            }
                        }
                    }
                }
                if (configurationSetsParameterItem.getStoredCertificateSettings() != null) {
                    for (StoredCertificateSettings storedCertificateSettingsParameterItem : configurationSetsParameterItem.getStoredCertificateSettings()) {
                        if (storedCertificateSettingsParameterItem.getStoreName() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.StoredCertificateSettings.StoreName");
                        }
                        if (storedCertificateSettingsParameterItem.getThumbprint() == null) {
                            throw new NullPointerException("parameters.ConfigurationSets.StoredCertificateSettings.Thumbprint");
                        }
                    }
                }
                if (configurationSetsParameterItem.getUserName() != null && configurationSetsParameterItem.getUserName().length() < 1) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserName");
                }
                if (configurationSetsParameterItem.getUserName() != null && configurationSetsParameterItem.getUserName().length() > 32) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserName");
                }
                if (configurationSetsParameterItem.getUserPassword() != null && configurationSetsParameterItem.getUserPassword().length() < 6 && (configurationSetsParameterItem.isDisableSshPasswordAuthentication() == false || configurationSetsParameterItem.getUserPassword().length() != 0)) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserPassword");
                }
                if (configurationSetsParameterItem.getUserPassword() != null && configurationSetsParameterItem.getUserPassword().length() > 72) {
                    throw new IllegalArgumentException("parameters.ConfigurationSets.UserPassword");
                }
            }
        }
        if (parameters.getOSVirtualHardDisk() == null) {
            throw new NullPointerException("parameters.OSVirtualHardDisk");
        }
        if (parameters.getRoleName() == null) {
            throw new NullPointerException("parameters.RoleName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginUpdatingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roles/" + virtualMachineName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PersistentVMRole");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleName");
        xmlSerializer.text(parameters.getRoleName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleName");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleType");
        xmlSerializer.text("PersistentVMRole");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleType");
        
        if (parameters.getConfigurationSets() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSets");
            for (ConfigurationSet configurationSetsItem : parameters.getConfigurationSets()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSet");
                
                if (configurationSetsItem.getConfigurationSetType() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
                    xmlSerializer.text(configurationSetsItem.getConfigurationSetType());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSetType");
                }
                
                if (configurationSetsItem.getInputEndpoints() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                    for (InputEndpoint inputEndpointsItem : configurationSetsItem.getInputEndpoints()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                        
                        if (inputEndpointsItem.getLoadBalancedEndpointSetName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                            xmlSerializer.text(inputEndpointsItem.getLoadBalancedEndpointSetName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                        }
                        
                        if (inputEndpointsItem.getLocalPort() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getLocalPort()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                        }
                        
                        if (inputEndpointsItem.getName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                            xmlSerializer.text(inputEndpointsItem.getName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                        }
                        
                        if (inputEndpointsItem.getPort() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getPort()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                        }
                        
                        if (inputEndpointsItem.getLoadBalancerProbe() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                            
                            if (inputEndpointsItem.getLoadBalancerProbe().getPath() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                                xmlSerializer.text(inputEndpointsItem.getLoadBalancerProbe().getPath());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                            }
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                            xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getPort()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.text(ComputeManagementClientImpl.loadBalancerProbeTransportProtocolToString(inputEndpointsItem.getLoadBalancerProbe().getProtocol()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            
                            if (inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                                xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                            }
                            
                            if (inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                                xmlSerializer.text(Integer.toString(inputEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds()));
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                        }
                        
                        if (inputEndpointsItem.getProtocol() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.text(inputEndpointsItem.getProtocol());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                        }
                        
                        if (inputEndpointsItem.getVirtualIPAddress() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Vip");
                            xmlSerializer.text(inputEndpointsItem.getVirtualIPAddress().getHostAddress());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Vip");
                        }
                        
                        if (inputEndpointsItem.isEnableDirectServerReturn() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                            xmlSerializer.text(Boolean.toString(inputEndpointsItem.isEnableDirectServerReturn()).toLowerCase());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                        }
                        
                        if (inputEndpointsItem.getLoadBalancerName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                            xmlSerializer.text(inputEndpointsItem.getLoadBalancerName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                        }
                        
                        if (inputEndpointsItem.getEndpointAcl() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                            
                            if (inputEndpointsItem.getEndpointAcl().getRules() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rules");
                                for (AccessControlListRule rulesItem : inputEndpointsItem.getEndpointAcl().getRules()) {
                                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rule");
                                    
                                    if (rulesItem.getOrder() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Order");
                                        xmlSerializer.text(Integer.toString(rulesItem.getOrder()));
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Order");
                                    }
                                    
                                    if (rulesItem.getAction() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Action");
                                        xmlSerializer.text(rulesItem.getAction());
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Action");
                                    }
                                    
                                    if (rulesItem.getRemoteSubnet() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                        xmlSerializer.text(rulesItem.getRemoteSubnet());
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                                    }
                                    
                                    if (rulesItem.getDescription() != null) {
                                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
                                        xmlSerializer.text(rulesItem.getDescription());
                                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
                                    }
                                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rule");
                                }
                                
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rules");
                            }
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                }
                
                if (configurationSetsItem.getSubnetNames() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
                    for (String subnetNamesItem : configurationSetsItem.getSubnetNames()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                        xmlSerializer.text(subnetNamesItem);
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetName");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SubnetNames");
                }
                
                if (configurationSetsItem.getStaticVirtualNetworkIPAddress() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                    xmlSerializer.text(configurationSetsItem.getStaticVirtualNetworkIPAddress());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StaticVirtualNetworkIPAddress");
                }
                
                if (configurationSetsItem.getPublicIPs() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
                    for (ConfigurationSet.PublicIP publicIPsItem : configurationSetsItem.getPublicIPs()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                        
                        if (publicIPsItem.getName() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                            xmlSerializer.text(publicIPsItem.getName());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIP");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicIPs");
                }
                
                if (configurationSetsItem.getComputerName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
                    xmlSerializer.text(configurationSetsItem.getComputerName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ComputerName");
                }
                
                if (configurationSetsItem.getAdminPassword() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
                    xmlSerializer.text(configurationSetsItem.getAdminPassword());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminPassword");
                }
                
                if (configurationSetsItem.isResetPasswordOnFirstLogon() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
                    xmlSerializer.text(Boolean.toString(configurationSetsItem.isResetPasswordOnFirstLogon()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResetPasswordOnFirstLogon");
                }
                
                if (configurationSetsItem.isEnableAutomaticUpdates() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
                    xmlSerializer.text(Boolean.toString(configurationSetsItem.isEnableAutomaticUpdates()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableAutomaticUpdates");
                }
                
                if (configurationSetsItem.getTimeZone() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
                    xmlSerializer.text(configurationSetsItem.getTimeZone());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeZone");
                }
                
                if (configurationSetsItem.getDomainJoin() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
                    
                    if (configurationSetsItem.getDomainJoin().getCredentials() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                        
                        if (configurationSetsItem.getDomainJoin().getCredentials().getDomain() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Domain");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getDomain());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Domain");
                        }
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Username");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getUserName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Username");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Password");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getCredentials().getPassword());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Password");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Credentials");
                    }
                    
                    if (configurationSetsItem.getDomainJoin().getDomainToJoin() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getDomainToJoin());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "JoinDomain");
                    }
                    
                    if (configurationSetsItem.getDomainJoin().getLdapMachineObjectOU() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                        xmlSerializer.text(configurationSetsItem.getDomainJoin().getLdapMachineObjectOU());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MachineObjectOU");
                    }
                    
                    if (configurationSetsItem.getDomainJoin().getProvisioning() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                        
                        if (configurationSetsItem.getDomainJoin().getProvisioning().getAccountData() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                            xmlSerializer.text(configurationSetsItem.getDomainJoin().getProvisioning().getAccountData());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AccountData");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Provisioning");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DomainJoin");
                }
                
                if (configurationSetsItem.getStoredCertificateSettings() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
                    for (StoredCertificateSettings storedCertificateSettingsItem : configurationSetsItem.getStoredCertificateSettings()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                        xmlSerializer.text("LocalMachine");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                        xmlSerializer.text(storedCertificateSettingsItem.getStoreName());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                        
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                        xmlSerializer.text(storedCertificateSettingsItem.getThumbprint());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateSetting");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoredCertificateSettings");
                }
                
                if (configurationSetsItem.getWindowsRemoteManagement() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WinRM");
                    
                    if (configurationSetsItem.getWindowsRemoteManagement().getListeners() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                        for (WindowsRemoteManagementListener listenersItem : configurationSetsItem.getWindowsRemoteManagement().getListeners()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Listener");
                            
                            if (listenersItem.getCertificateThumbprint() != null) {
                                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                                xmlSerializer.text(listenersItem.getCertificateThumbprint());
                                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CertificateThumbprint");
                            }
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.text(listenersItem.getListenerType().toString());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listener");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Listeners");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WinRM");
                }
                
                if (configurationSetsItem.getAdminUserName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
                    xmlSerializer.text(configurationSetsItem.getAdminUserName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AdminUsername");
                }
                
                if (configurationSetsItem.getHostName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostName");
                    xmlSerializer.text(configurationSetsItem.getHostName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostName");
                }
                
                if (configurationSetsItem.getUserName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserName");
                    xmlSerializer.text(configurationSetsItem.getUserName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserName");
                }
                
                if (configurationSetsItem.getUserPassword() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
                    xmlSerializer.text(configurationSetsItem.getUserPassword());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UserPassword");
                }
                
                if (configurationSetsItem.isDisableSshPasswordAuthentication() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
                    xmlSerializer.text(Boolean.toString(configurationSetsItem.isDisableSshPasswordAuthentication()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DisableSshPasswordAuthentication");
                }
                
                if (configurationSetsItem.getSshSettings() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SSH");
                    
                    if (configurationSetsItem.getSshSettings().getPublicKeys() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                        for (SshSettingPublicKey publicKeysItem : configurationSetsItem.getSshSettings().getPublicKeys()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            xmlSerializer.text(publicKeysItem.getFingerprint());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.text(publicKeysItem.getPath());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKey");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicKeys");
                    }
                    
                    if (configurationSetsItem.getSshSettings().getKeyPairs() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                        for (SshSettingKeyPair keyPairsItem : configurationSetsItem.getSshSettings().getKeyPairs()) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            xmlSerializer.text(keyPairsItem.getFingerprint());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Fingerprint");
                            
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.text(keyPairsItem.getPath());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPair");
                        }
                        
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyPairs");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SSH");
                }
                
                if (configurationSetsItem.getCustomData() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CustomData");
                    xmlSerializer.text(configurationSetsItem.getCustomData());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CustomData");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSet");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConfigurationSets");
        }
        
        if (parameters.getAvailabilitySetName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AvailabilitySetName");
            xmlSerializer.text(parameters.getAvailabilitySetName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AvailabilitySetName");
        }
        
        if (parameters.getResourceExtensionReferences() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReferences");
            for (ResourceExtensionReference resourceExtensionReferencesItem : parameters.getResourceExtensionReferences()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReference");
                
                if (resourceExtensionReferencesItem.getReferenceName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ReferenceName");
                    xmlSerializer.text(resourceExtensionReferencesItem.getReferenceName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ReferenceName");
                }
                
                if (resourceExtensionReferencesItem.getPublisher() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Publisher");
                    xmlSerializer.text(resourceExtensionReferencesItem.getPublisher());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Publisher");
                }
                
                if (resourceExtensionReferencesItem.getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(resourceExtensionReferencesItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                }
                
                if (resourceExtensionReferencesItem.getVersion() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Version");
                    xmlSerializer.text(resourceExtensionReferencesItem.getVersion());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Version");
                }
                
                if (resourceExtensionReferencesItem.getResourceExtensionParameterValues() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValues");
                    for (ResourceExtensionParameterValue resourceExtensionParameterValuesItem : resourceExtensionReferencesItem.getResourceExtensionParameterValues()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValue");
                        
                        if (resourceExtensionParameterValuesItem.getKey() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Key");
                            xmlSerializer.text(resourceExtensionParameterValuesItem.getKey());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Key");
                        }
                        
                        if (resourceExtensionParameterValuesItem.getValue() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                            xmlSerializer.text(Base64.encode(resourceExtensionParameterValuesItem.getValue().getBytes()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Value");
                        }
                        
                        if (resourceExtensionParameterValuesItem.getType() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
                            xmlSerializer.text(resourceExtensionParameterValuesItem.getType());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValue");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionParameterValues");
                }
                
                if (resourceExtensionReferencesItem.getState() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "State");
                    xmlSerializer.text(resourceExtensionReferencesItem.getState());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "State");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReference");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ResourceExtensionReferences");
        }
        
        if (parameters.getDataVirtualHardDisks() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisks");
            for (DataVirtualHardDisk dataVirtualHardDisksItem : parameters.getDataVirtualHardDisks()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
                
                if (dataVirtualHardDisksItem.getHostCaching() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                    xmlSerializer.text(dataVirtualHardDisksItem.getHostCaching());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
                }
                
                if (dataVirtualHardDisksItem.getLabel() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                    xmlSerializer.text(dataVirtualHardDisksItem.getLabel());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
                }
                
                if (dataVirtualHardDisksItem.getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                    xmlSerializer.text(dataVirtualHardDisksItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskName");
                }
                
                if (dataVirtualHardDisksItem.getLogicalUnitNumber() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Lun");
                    xmlSerializer.text(Integer.toString(dataVirtualHardDisksItem.getLogicalUnitNumber()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Lun");
                }
                
                if (dataVirtualHardDisksItem.getLogicalDiskSizeInGB() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
                    xmlSerializer.text(Integer.toString(dataVirtualHardDisksItem.getLogicalDiskSizeInGB()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LogicalDiskSizeInGB");
                }
                
                if (dataVirtualHardDisksItem.getMediaLink() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                    xmlSerializer.text(dataVirtualHardDisksItem.getMediaLink().toString());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
                }
                
                if (dataVirtualHardDisksItem.getSourceMediaLink() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SourceMediaLink");
                    xmlSerializer.text(dataVirtualHardDisksItem.getSourceMediaLink().toString());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SourceMediaLink");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisk");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DataVirtualHardDisks");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OSVirtualHardDisk");
        
        if (parameters.getOSVirtualHardDisk().getHostCaching() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
            xmlSerializer.text(parameters.getOSVirtualHardDisk().getHostCaching());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostCaching");
        }
        
        if (parameters.getOSVirtualHardDisk().getLabel() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
            xmlSerializer.text(parameters.getOSVirtualHardDisk().getLabel());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskLabel");
        }
        
        if (parameters.getOSVirtualHardDisk().getName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DiskName");
            xmlSerializer.text(parameters.getOSVirtualHardDisk().getName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DiskName");
        }
        
        if (parameters.getOSVirtualHardDisk().getMediaLink() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
            xmlSerializer.text(parameters.getOSVirtualHardDisk().getMediaLink().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
        }
        
        if (parameters.getOSVirtualHardDisk().getSourceImageName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SourceImageName");
            xmlSerializer.text(parameters.getOSVirtualHardDisk().getSourceImageName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SourceImageName");
        }
        
        if (parameters.getOSVirtualHardDisk().getOperatingSystem() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "OS");
            xmlSerializer.text(parameters.getOSVirtualHardDisk().getOperatingSystem());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OS");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "OSVirtualHardDisk");
        
        if (parameters.getRoleSize() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RoleSize");
            xmlSerializer.text(parameters.getRoleSize());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RoleSize");
        }
        
        if (parameters.isProvisionGuestAgent() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ProvisionGuestAgent");
            xmlSerializer.text(Boolean.toString(parameters.isProvisionGuestAgent()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ProvisionGuestAgent");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PersistentVMRole");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Updating Load Balanced Endpoint Set operation changes the
    * specified load-balanced InputEndpoints on all the roles of an
    * Infrastructure as a Service deployment. Non-load-balanced endpoints must
    * be changed using UpdateRole.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469417.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Load Balanced Endpoint Set operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUpdatingLoadBalancedEndpointSetAsync(final String serviceName, final String deploymentName, final VirtualMachineUpdateLoadBalancedSetParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUpdatingLoadBalancedEndpointSet(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Begin Updating Load Balanced Endpoint Set operation changes the
    * specified load-balanced InputEndpoints on all the roles of an
    * Infrastructure as a Service deployment. Non-load-balanced endpoints must
    * be changed using UpdateRole.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn469417.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Begin Updating
    * Load Balanced Endpoint Set operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUpdatingLoadBalancedEndpointSet(String serviceName, String deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getLoadBalancedEndpoints() != null) {
            for (VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint loadBalancedEndpointsParameterItem : parameters.getLoadBalancedEndpoints()) {
                if (loadBalancedEndpointsParameterItem.getLoadBalancedEndpointSetName() == null) {
                    throw new NullPointerException("parameters.LoadBalancedEndpoints.LoadBalancedEndpointSetName");
                }
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginUpdatingLoadBalancedEndpointSetAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "?" + "comp=UpdateLbSet";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointList");
        
        if (parameters.getLoadBalancedEndpoints() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpoints");
            for (VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint loadBalancedEndpointsItem : parameters.getLoadBalancedEndpoints()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                xmlSerializer.text(loadBalancedEndpointsItem.getLoadBalancedEndpointSetName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointSetName");
                
                if (loadBalancedEndpointsItem.getLocalPort() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                    xmlSerializer.text(Integer.toString(loadBalancedEndpointsItem.getLocalPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                }
                
                if (loadBalancedEndpointsItem.getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(loadBalancedEndpointsItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                }
                
                if (loadBalancedEndpointsItem.getPort() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.text(Integer.toString(loadBalancedEndpointsItem.getPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                }
                
                if (loadBalancedEndpointsItem.getLoadBalancerProbe() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                    
                    if (loadBalancedEndpointsItem.getLoadBalancerProbe().getPath() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Path");
                        xmlSerializer.text(loadBalancedEndpointsItem.getLoadBalancerProbe().getPath());
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Path");
                    }
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.text(Integer.toString(loadBalancedEndpointsItem.getLoadBalancerProbe().getPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    xmlSerializer.text(ComputeManagementClientImpl.loadBalancerProbeTransportProtocolToString(loadBalancedEndpointsItem.getLoadBalancerProbe().getProtocol()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    
                    if (loadBalancedEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                        xmlSerializer.text(Integer.toString(loadBalancedEndpointsItem.getLoadBalancerProbe().getIntervalInSeconds()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IntervalInSeconds");
                    }
                    
                    if (loadBalancedEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds() != null) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                        xmlSerializer.text(Integer.toString(loadBalancedEndpointsItem.getLoadBalancerProbe().getTimeoutInSeconds()));
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "TimeoutInSeconds");
                    }
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerProbe");
                }
                
                if (loadBalancedEndpointsItem.getProtocol() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    xmlSerializer.text(loadBalancedEndpointsItem.getProtocol());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                }
                
                if (loadBalancedEndpointsItem.getVirtualIPAddress() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Vip");
                    xmlSerializer.text(loadBalancedEndpointsItem.getVirtualIPAddress().getHostAddress());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Vip");
                }
                
                if (loadBalancedEndpointsItem.isEnableDirectServerReturn() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                    xmlSerializer.text(Boolean.toString(loadBalancedEndpointsItem.isEnableDirectServerReturn()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EnableDirectServerReturn");
                }
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                
                if (loadBalancedEndpointsItem.getRules() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rules");
                    for (AccessControlListRule rulesItem : loadBalancedEndpointsItem.getRules()) {
                        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Rule");
                        
                        if (rulesItem.getOrder() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Order");
                            xmlSerializer.text(Integer.toString(rulesItem.getOrder()));
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Order");
                        }
                        
                        if (rulesItem.getAction() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Action");
                            xmlSerializer.text(rulesItem.getAction());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Action");
                        }
                        
                        if (rulesItem.getRemoteSubnet() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                            xmlSerializer.text(rulesItem.getRemoteSubnet());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RemoteSubnet");
                        }
                        
                        if (rulesItem.getDescription() != null) {
                            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
                            xmlSerializer.text(rulesItem.getDescription());
                            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
                        }
                        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rule");
                    }
                    
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Rules");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "EndpointAcl");
                
                if (loadBalancedEndpointsItem.getLoadBalancerName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                    xmlSerializer.text(loadBalancedEndpointsItem.getLoadBalancerName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancerName");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpoints");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LoadBalancedEndpointList");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Capture Role operation creates a copy of the operating system virtual
    * hard disk (VHD) that is deployed in the virtual machine, saves the VHD
    * copy in the same storage location as the operating system VHD, and
    * registers the copy as an image in your image gallery. From the captured
    * image, you can create additional customized virtual machines. For more
    * information about images and disks, see Manage Disks and Images at
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx. For
    * more information about capturing images, see How to Capture an Image of
    * a Virtual Machine Running Windows Server 2008 R2 at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/
    * or How to Capture an Image of a Virtual Machine Running Linux at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Capture Virtual
    * Machine operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> captureOSImageAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineCaptureOSImageParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return captureOSImage(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * The Capture Role operation creates a copy of the operating system virtual
    * hard disk (VHD) that is deployed in the virtual machine, saves the VHD
    * copy in the same storage location as the operating system VHD, and
    * registers the copy as an image in your image gallery. From the captured
    * image, you can create additional customized virtual machines. For more
    * information about images and disks, see Manage Disks and Images at
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx. For
    * more information about capturing images, see How to Capture an Image of
    * a Virtual Machine Running Windows Server 2008 R2 at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/
    * or How to Capture an Image of a Virtual Machine Running Linux at
    * http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Capture Virtual
    * Machine operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse captureOSImage(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineCaptureOSImageParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "captureOSImageAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginCapturingOSImageAsync(serviceName, deploymentName, virtualMachineName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * Capture role as VM template.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Capture Virtual
    * Machine operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> captureVMImageAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineCaptureVMImageParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return captureVMImage(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * Capture role as VM template.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @param parameters Required. Parameters supplied to the Capture Virtual
    * Machine operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse captureVMImage(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineCaptureVMImageParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "captureVMImageAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginCapturingVMImageAsync(serviceName, deploymentName, virtualMachineName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Create Role operation adds a virtual machine to an existing
    * deployment. You can refer to the OSDisk in the Add Role operation in the
    * following ways: Platform/User Image - Set the SourceImageName to a
    * platform or user image. You can optionally specify the DiskName and
    * MediaLink values as part the operation to control the name and location
    * of target disk. When DiskName and MediaLink are specified in this mode,
    * they must not already exist in the system, otherwise a conflict fault is
    * returned; UserDisk - Set DiskName to a user supplied image in image
    * repository. SourceImageName must be set to NULL. All other properties
    * are ignored; or Blob in a Storage Account - Set MediaLink to a blob
    * containing the image. SourceImageName and DiskName are set to NULL.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Create Virtual
    * Machine operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> createAsync(final String serviceName, final String deploymentName, final VirtualMachineCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return create(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Create Role operation adds a virtual machine to an existing
    * deployment. You can refer to the OSDisk in the Add Role operation in the
    * following ways: Platform/User Image - Set the SourceImageName to a
    * platform or user image. You can optionally specify the DiskName and
    * MediaLink values as part the operation to control the name and location
    * of target disk. When DiskName and MediaLink are specified in this mode,
    * they must not already exist in the system, otherwise a conflict fault is
    * returned; UserDisk - Set DiskName to a user supplied image in image
    * repository. SourceImageName must be set to NULL. All other properties
    * are ignored; or Blob in a Storage Account - Set MediaLink to a blob
    * containing the image. SourceImageName and DiskName are set to NULL.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Create Virtual
    * Machine operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse create(String serviceName, String deploymentName, VirtualMachineCreateParameters parameters) throws InterruptedException, ExecutionException, ServiceException, MalformedURLException, ProtocolException, IOException, XmlPullParserException, URISyntaxException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginCreatingAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Create Virtual Machine Deployment operation provisions a virtual
    * machine based on the supplied configuration. When you create a
    * deployment of a virtual machine, you should make sure that the cloud
    * service and the disk or image that you use are located in the same
    * region. For example, if the cloud service was created in the West US
    * region, the disk or image that you use should also be located in a
    * storage account in the West US region.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param parameters Required. Parameters supplied to the Create Virtual
    * Machine Deployment operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> createDeploymentAsync(final String serviceName, final VirtualMachineCreateDeploymentParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return createDeployment(serviceName, parameters);
            }
         });
    }
    
    /**
    * The Create Virtual Machine Deployment operation provisions a virtual
    * machine based on the supplied configuration. When you create a
    * deployment of a virtual machine, you should make sure that the cloud
    * service and the disk or image that you use are located in the same
    * region. For example, if the cloud service was created in the West US
    * region, the disk or image that you use should also be located in a
    * storage account in the West US region.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param parameters Required. Parameters supplied to the Create Virtual
    * Machine Deployment operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse createDeployment(String serviceName, VirtualMachineCreateDeploymentParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createDeploymentAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginCreatingDeploymentAsync(serviceName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Delete Role operation deletes the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * delete.
    * @param deleteFromStorage Required. Specifies that the source blob(s) for
    * the virtual machine should also be deleted from storage.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> deleteAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final boolean deleteFromStorage) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return delete(serviceName, deploymentName, virtualMachineName, deleteFromStorage);
            }
         });
    }
    
    /**
    * The Delete Role operation deletes the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * delete.
    * @param deleteFromStorage Required. Specifies that the source blob(s) for
    * the virtual machine should also be deleted from storage.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse delete(String serviceName, String deploymentName, String virtualMachineName, boolean deleteFromStorage) throws MalformedURLException, ProtocolException, ServiceException, IOException, InterruptedException, ExecutionException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("deleteFromStorage", deleteFromStorage);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginDeletingAsync(serviceName, deploymentName, virtualMachineName, deleteFromStorage).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Get Role operation retrieves information about the specified virtual
    * machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine.
    * @return The Get Virtual Machine operation response.
    */
    @Override
    public Future<VirtualMachineGetResponse> getAsync(final String serviceName, final String deploymentName, final String virtualMachineName) {
        return this.getClient().getExecutorService().submit(new Callable<VirtualMachineGetResponse>() { 
            @Override
            public VirtualMachineGetResponse call() throws Exception {
                return get(serviceName, deploymentName, virtualMachineName);
            }
         });
    }
    
    /**
    * The Get Role operation retrieves information about the specified virtual
    * machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Virtual Machine operation response.
    */
    @Override
    public VirtualMachineGetResponse get(String serviceName, String deploymentName, String virtualMachineName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roles/" + virtualMachineName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            VirtualMachineGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new VirtualMachineGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "PersistentVMRole".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "PersistentVMRole".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String roleNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    roleNameInstance = xmlPullParser.getText();
                                    result.setRoleName(roleNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String osVersionInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    osVersionInstance = xmlPullParser.getText();
                                    result.setOsVersion(osVersionInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                VirtualMachineRoleType roleTypeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    roleTypeInstance = VirtualMachineRoleType.valueOf(xmlPullParser.getText());
                                    result.setRoleType(roleTypeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String availabilitySetNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    availabilitySetNameInstance = xmlPullParser.getText();
                                    result.setAvailabilitySetName(availabilitySetNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String roleSizeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    roleSizeInstance = xmlPullParser.getText();
                                    result.setRoleSize(roleSizeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String defaultWinRmCertificateThumbprintInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    defaultWinRmCertificateThumbprintInstance = xmlPullParser.getText();
                                    result.setDefaultWinRmCertificateThumbprint(defaultWinRmCertificateThumbprintInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ConfigurationSet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                    result.getConfigurationSets().add(configurationSetInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String configurationSetTypeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                configurationSetTypeInstance = xmlPullParser.getText();
                                                configurationSetInstance.setConfigurationSetType(configurationSetTypeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "InputEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                configurationSetInstance.getInputEndpoints().add(inputEndpointInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String loadBalancedEndpointSetNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            loadBalancedEndpointSetNameInstance = xmlPullParser.getText();
                                                            inputEndpointInstance.setLoadBalancedEndpointSetName(loadBalancedEndpointSetNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance = xmlPullParser.getText();
                                                            inputEndpointInstance.setName(nameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                        inputEndpointInstance.setLoadBalancerProbe(loadBalancerProbeInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String pathInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    pathInstance = xmlPullParser.getText();
                                                                    loadBalancerProbeInstance.setPath(pathInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                int portInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    portInstance = Integer.parseInt(xmlPullParser.getText());
                                                                    loadBalancerProbeInstance.setPort(portInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                LoadBalancerProbeTransportProtocol protocolInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    protocolInstance = ComputeManagementClientImpl.parseLoadBalancerProbeTransportProtocol(xmlPullParser.getText());
                                                                    loadBalancerProbeInstance.setProtocol(protocolInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String protocolInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            protocolInstance2 = xmlPullParser.getText();
                                                            inputEndpointInstance.setProtocol(protocolInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        InetAddress vipInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            vipInstance = InetAddress.getByName(xmlPullParser.getText());
                                                            inputEndpointInstance.setVirtualIPAddress(vipInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String loadBalancerNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            loadBalancerNameInstance = xmlPullParser.getText();
                                                            inputEndpointInstance.setLoadBalancerName(loadBalancerNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        EndpointAcl endpointAclInstance = new EndpointAcl();
                                                        inputEndpointInstance.setEndpointAcl(endpointAclInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "Rule".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    AccessControlListRule ruleInstance = new AccessControlListRule();
                                                                    endpointAclInstance.getRules().add(ruleInstance);
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String actionInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                actionInstance = xmlPullParser.getText();
                                                                                ruleInstance.setAction(actionInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String remoteSubnetInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                remoteSubnetInstance = xmlPullParser.getText();
                                                                                ruleInstance.setRemoteSubnet(remoteSubnetInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                        while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                            String descriptionInstance;
                                                                            if (eventType == XmlPullParser.TEXT) {
                                                                                descriptionInstance = xmlPullParser.getText();
                                                                                ruleInstance.setDescription(descriptionInstance);
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                    }
                                                                    
                                                                    eventType = xmlPullParser.next();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.TEXT) {
                                                configurationSetInstance.getSubnetNames().add(xmlPullParser.getText());
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String staticVirtualNetworkIPAddressInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                staticVirtualNetworkIPAddressInstance = xmlPullParser.getText();
                                                configurationSetInstance.setStaticVirtualNetworkIPAddress(staticVirtualNetworkIPAddressInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                ConfigurationSet.PublicIP publicIPInstance = new ConfigurationSet.PublicIP();
                                                configurationSetInstance.getPublicIPs().add(publicIPInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance2;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance2 = xmlPullParser.getText();
                                                            publicIPInstance.setName(nameInstance2);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String computerNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                computerNameInstance = xmlPullParser.getText();
                                                configurationSetInstance.setComputerName(computerNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String adminPasswordInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                adminPasswordInstance = xmlPullParser.getText();
                                                configurationSetInstance.setAdminPassword(adminPasswordInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String timeZoneInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                timeZoneInstance = xmlPullParser.getText();
                                                configurationSetInstance.setTimeZone(timeZoneInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                            configurationSetInstance.setDomainJoin(domainJoinInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                    domainJoinInstance.setCredentials(credentialsInstance);
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String domainInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                domainInstance = xmlPullParser.getText();
                                                                credentialsInstance.setDomain(domainInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String usernameInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                usernameInstance = xmlPullParser.getText();
                                                                credentialsInstance.setUserName(usernameInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String passwordInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                passwordInstance = xmlPullParser.getText();
                                                                credentialsInstance.setPassword(passwordInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String joinDomainInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        joinDomainInstance = xmlPullParser.getText();
                                                        domainJoinInstance.setDomainToJoin(joinDomainInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String machineObjectOUInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        machineObjectOUInstance = xmlPullParser.getText();
                                                        domainJoinInstance.setLdapMachineObjectOU(machineObjectOUInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                    domainJoinInstance.setProvisioning(provisioningInstance);
                                                    
                                                    if (eventType == XmlPullParser.START_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                            String accountDataInstance;
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                accountDataInstance = xmlPullParser.getText();
                                                                provisioningInstance.setAccountData(accountDataInstance);
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "CertificateSetting".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                configurationSetInstance.getStoredCertificateSettings().add(certificateSettingInstance);
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String storeNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            storeNameInstance = xmlPullParser.getText();
                                                            certificateSettingInstance.setStoreName(storeNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String thumbprintInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            thumbprintInstance = xmlPullParser.getText();
                                                            certificateSettingInstance.setThumbprint(thumbprintInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                            configurationSetInstance.setWindowsRemoteManagement(winRMInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    if (eventType == XmlPullParser.START_TAG && "Listener".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                        winRMInstance.getListeners().add(listenerInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                VirtualMachineWindowsRemoteManagementListenerType protocolInstance3;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    protocolInstance3 = VirtualMachineWindowsRemoteManagementListenerType.valueOf(xmlPullParser.getText());
                                                                    listenerInstance.setListenerType(protocolInstance3);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String certificateThumbprintInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    certificateThumbprintInstance = xmlPullParser.getText();
                                                                    listenerInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String adminUsernameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                adminUsernameInstance = xmlPullParser.getText();
                                                configurationSetInstance.setAdminUserName(adminUsernameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String hostNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                hostNameInstance = xmlPullParser.getText();
                                                configurationSetInstance.setHostName(hostNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String userNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                userNameInstance = xmlPullParser.getText();
                                                configurationSetInstance.setUserName(userNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String userPasswordInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                userPasswordInstance = xmlPullParser.getText();
                                                configurationSetInstance.setUserPassword(userPasswordInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            SshSettings sSHInstance = new SshSettings();
                                            configurationSetInstance.setSshSettings(sSHInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    if (eventType == XmlPullParser.START_TAG && "PublicKey".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                        sSHInstance.getPublicKeys().add(publicKeyInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String fingerprintInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    fingerprintInstance = xmlPullParser.getText();
                                                                    publicKeyInstance.setFingerprint(fingerprintInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String pathInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    pathInstance2 = xmlPullParser.getText();
                                                                    publicKeyInstance.setPath(pathInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    if (eventType == XmlPullParser.START_TAG && "KeyPair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                        SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                        sSHInstance.getKeyPairs().add(keyPairInstance);
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String fingerprintInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    fingerprintInstance2 = xmlPullParser.getText();
                                                                    keyPairInstance.setFingerprint(fingerprintInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String pathInstance3;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    pathInstance3 = xmlPullParser.getText();
                                                                    keyPairInstance.setPath(pathInstance3);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String customDataInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                customDataInstance = xmlPullParser.getText();
                                                configurationSetInstance.setCustomData(customDataInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                    result.getDataVirtualHardDisks().add(dataVirtualHardDiskInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String hostCachingInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                hostCachingInstance = xmlPullParser.getText();
                                                dataVirtualHardDiskInstance.setHostCaching(hostCachingInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String diskLabelInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                diskLabelInstance = xmlPullParser.getText();
                                                dataVirtualHardDiskInstance.setLabel(diskLabelInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String diskNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                diskNameInstance = xmlPullParser.getText();
                                                dataVirtualHardDiskInstance.setName(diskNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            URI mediaLinkInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                mediaLinkInstance = new URI(xmlPullParser.getText());
                                                dataVirtualHardDiskInstance.setMediaLink(mediaLinkInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            URI sourceMediaLinkInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                sourceMediaLinkInstance = new URI(xmlPullParser.getText());
                                                dataVirtualHardDiskInstance.setSourceMediaLink(sourceMediaLinkInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                result.setOSVirtualHardDisk(oSVirtualHardDiskInstance);
                                
                                if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String hostCachingInstance2;
                                        if (eventType == XmlPullParser.TEXT) {
                                            hostCachingInstance2 = xmlPullParser.getText();
                                            oSVirtualHardDiskInstance.setHostCaching(hostCachingInstance2);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String diskLabelInstance2;
                                        if (eventType == XmlPullParser.TEXT) {
                                            diskLabelInstance2 = xmlPullParser.getText();
                                            oSVirtualHardDiskInstance.setLabel(diskLabelInstance2);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String diskNameInstance2;
                                        if (eventType == XmlPullParser.TEXT) {
                                            diskNameInstance2 = xmlPullParser.getText();
                                            oSVirtualHardDiskInstance.setName(diskNameInstance2);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI mediaLinkInstance2;
                                        if (eventType == XmlPullParser.TEXT) {
                                            mediaLinkInstance2 = new URI(xmlPullParser.getText());
                                            oSVirtualHardDiskInstance.setMediaLink(mediaLinkInstance2);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String sourceImageNameInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            sourceImageNameInstance = xmlPullParser.getText();
                                            oSVirtualHardDiskInstance.setSourceImageName(sourceImageNameInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String osInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            osInstance = xmlPullParser.getText();
                                            oSVirtualHardDiskInstance.setOperatingSystem(osInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Download RDP file operation retrieves the Remote Desktop Protocol
    * configuration file from the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine.
    * @return The Download RDP file operation response.
    */
    @Override
    public Future<VirtualMachineGetRemoteDesktopFileResponse> getRemoteDesktopFileAsync(final String serviceName, final String deploymentName, final String virtualMachineName) {
        return this.getClient().getExecutorService().submit(new Callable<VirtualMachineGetRemoteDesktopFileResponse>() { 
            @Override
            public VirtualMachineGetRemoteDesktopFileResponse call() throws Exception {
                return getRemoteDesktopFile(serviceName, deploymentName, virtualMachineName);
            }
         });
    }
    
    /**
    * The Download RDP file operation retrieves the Remote Desktop Protocol
    * configuration file from the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return The Download RDP file operation response.
    */
    @Override
    public VirtualMachineGetRemoteDesktopFileResponse getRemoteDesktopFile(String serviceName, String deploymentName, String virtualMachineName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (virtualMachineName == null) {
            throw new NullPointerException("virtualMachineName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            CloudTracing.enter(invocationId, this, "getRemoteDesktopFileAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/deployments/" + deploymentName.trim() + "/roleinstances/" + virtualMachineName.trim() + "/ModelFile" + "?" + "FileType=RDP";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            VirtualMachineGetRemoteDesktopFileResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new VirtualMachineGetRemoteDesktopFileResponse();
            result.setRemoteDesktopFile(StreamUtils.toString(responseContent).getBytes("UTF-8"));
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Restart role operation restarts the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> restartAsync(final String serviceName, final String deploymentName, final String virtualMachineName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return restart(serviceName, deploymentName, virtualMachineName);
            }
         });
    }
    
    /**
    * The Restart role operation restarts the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * restart.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse restart(String serviceName, String deploymentName, String virtualMachineName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            CloudTracing.enter(invocationId, this, "restartAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginRestartingAsync(serviceName, deploymentName, virtualMachineName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Shutdown Role operation shuts down the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * shutdown.
    * @param parameters Required. The parameters for the shutdown virtual
    * machine operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> shutdownAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineShutdownParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return shutdown(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * The Shutdown Role operation shuts down the specified virtual machine.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
    * for more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * shutdown.
    * @param parameters Required. The parameters for the shutdown virtual
    * machine operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse shutdown(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineShutdownParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "shutdownAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginShutdownAsync(serviceName, deploymentName, virtualMachineName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Shutdown Roles operation stops the specified set of virtual machines.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Shutdown Roles
    * operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> shutdownRolesAsync(final String serviceName, final String deploymentName, final VirtualMachineShutdownRolesParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return shutdownRoles(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Shutdown Roles operation stops the specified set of virtual machines.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Shutdown Roles
    * operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse shutdownRoles(String serviceName, String deploymentName, VirtualMachineShutdownRolesParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "shutdownRolesAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginShuttingDownRolesAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Start Role operation starts the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * start.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> startAsync(final String serviceName, final String deploymentName, final String virtualMachineName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return start(serviceName, deploymentName, virtualMachineName);
            }
         });
    }
    
    /**
    * The Start Role operation starts the specified virtual machine.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of the virtual machine to
    * start.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse start(String serviceName, String deploymentName, String virtualMachineName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            CloudTracing.enter(invocationId, this, "startAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginStartingAsync(serviceName, deploymentName, virtualMachineName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Start Roles operation starts the specified set of virtual machines.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Start Roles
    * operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> startRolesAsync(final String serviceName, final String deploymentName, final VirtualMachineStartRolesParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return startRoles(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Start Roles operation starts the specified set of virtual machines.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters to pass to the Start Roles
    * operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse startRoles(String serviceName, String deploymentName, VirtualMachineStartRolesParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "startRolesAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginStartingRolesAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Update Role operation adds a virtual machine to an existing
    * deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of your virtual machine.
    * @param parameters Required. Parameters supplied to the Update Virtual
    * Machine operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> updateAsync(final String serviceName, final String deploymentName, final String virtualMachineName, final VirtualMachineUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return update(serviceName, deploymentName, virtualMachineName, parameters);
            }
         });
    }
    
    /**
    * The Update Role operation adds a virtual machine to an existing
    * deployment.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for
    * more information)
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param virtualMachineName Required. The name of your virtual machine.
    * @param parameters Required. Parameters supplied to the Update Virtual
    * Machine operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse update(String serviceName, String deploymentName, String virtualMachineName, VirtualMachineUpdateParameters parameters) throws InterruptedException, ExecutionException, ServiceException, MalformedURLException, ProtocolException, IOException, XmlPullParserException, URISyntaxException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("virtualMachineName", virtualMachineName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginUpdatingAsync(serviceName, deploymentName, virtualMachineName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Update Load Balanced Endpoint Set operation changes the specified
    * load-balanced InputEndpoints on all the roles of an Infrastructure as a
    * Service deployment. Non-load-balanced endpoints must be changed using
    * UpdateRole.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Update Load
    * Balanced Endpoint Set operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> updateLoadBalancedEndpointSetAsync(final String serviceName, final String deploymentName, final VirtualMachineUpdateLoadBalancedSetParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return updateLoadBalancedEndpointSet(serviceName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * The Update Load Balanced Endpoint Set operation changes the specified
    * load-balanced InputEndpoints on all the roles of an Infrastructure as a
    * Service deployment. Non-load-balanced endpoints must be changed using
    * UpdateRole.
    *
    * @param serviceName Required. The name of your service.
    * @param deploymentName Required. The name of your deployment.
    * @param parameters Required. Parameters supplied to the Update Load
    * Balanced Endpoint Set operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse updateLoadBalancedEndpointSet(String serviceName, String deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateLoadBalancedEndpointSetAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getVirtualMachinesOperations().beginUpdatingLoadBalancedEndpointSetAsync(serviceName, deploymentName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
}
