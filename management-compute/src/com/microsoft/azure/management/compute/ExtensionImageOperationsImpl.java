/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.compute;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.core.OperationStatus;
import com.microsoft.azure.core.OperationStatusResponse;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.utils.Base64;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.compute.models.ExtensionEndpointConfiguration;
import com.microsoft.azure.management.compute.models.ExtensionImageRegisterParameters;
import com.microsoft.azure.management.compute.models.ExtensionImageUpdateParameters;
import com.microsoft.azure.management.compute.models.ExtensionLocalResourceConfiguration;
import com.microsoft.azure.tracing.ClientRequestTrackingHandler;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.TimeZone;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;

/**
* The Service Management API includes operations for managing the service and
* virtual machine extension images in your publisher subscription.
*/
public class ExtensionImageOperationsImpl implements ServiceOperations<ComputeManagementClientImpl>, ExtensionImageOperations {
    /**
    * Initializes a new instance of the ExtensionImageOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    ExtensionImageOperationsImpl(ComputeManagementClientImpl client) {
        this.client = client;
    }
    
    private ComputeManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.compute.ComputeManagementClientImpl.
    * @return The Client value.
    */
    public ComputeManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * Register a new extension. An extension is identified by the combination
    * of its ProviderNamespace and Type (case-sensitive string). It is not
    * allowed to register an extension with the same identity (i.e.
    * combination of ProviderNamespace and Type) of an already-registered
    * extension. To register new version of an existing extension, the Update
    * Extension API should be used.
    *
    * @param parameters Required. Parameters supplied to the Register Virtual
    * Machine Extension Image operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginRegisteringAsync(final ExtensionImageRegisterParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginRegistering(parameters);
            }
         });
    }
    
    /**
    * Register a new extension. An extension is identified by the combination
    * of its ProviderNamespace and Type (case-sensitive string). It is not
    * allowed to register an extension with the same identity (i.e.
    * combination of ProviderNamespace and Type) of an already-registered
    * extension. To register new version of an existing extension, the Update
    * Extension API should be used.
    *
    * @param parameters Required. Parameters supplied to the Register Virtual
    * Machine Extension Image operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginRegistering(ExtensionImageRegisterParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getCertificate() != null) {
            if (parameters.getCertificate().getStoreLocation() == null) {
                throw new NullPointerException("parameters.Certificate.StoreLocation");
            }
        }
        if (parameters.getExtensionEndpoints() != null) {
            if (parameters.getExtensionEndpoints().getInputEndpoints() != null) {
                for (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsParameterItem : parameters.getExtensionEndpoints().getInputEndpoints()) {
                    if (inputEndpointsParameterItem.getName() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InputEndpoints.Name");
                    }
                    if (inputEndpointsParameterItem.getProtocol() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InputEndpoints.Protocol");
                    }
                }
            }
            if (parameters.getExtensionEndpoints().getInternalEndpoints() != null) {
                for (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsParameterItem : parameters.getExtensionEndpoints().getInternalEndpoints()) {
                    if (internalEndpointsParameterItem.getName() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InternalEndpoints.Name");
                    }
                    if (internalEndpointsParameterItem.getProtocol() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InternalEndpoints.Protocol");
                    }
                }
            }
        }
        if (parameters.getLocalResources() != null) {
            for (ExtensionLocalResourceConfiguration localResourcesParameterItem : parameters.getLocalResources()) {
                if (localResourcesParameterItem.getName() == null) {
                    throw new NullPointerException("parameters.LocalResources.Name");
                }
            }
        }
        if (parameters.getProviderNameSpace() == null) {
            throw new NullPointerException("parameters.ProviderNameSpace");
        }
        if (parameters.getType() == null) {
            throw new NullPointerException("parameters.Type");
        }
        if (parameters.getVersion() == null) {
            throw new NullPointerException("parameters.Version");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginRegisteringAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/extensions";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionImage");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ProviderNameSpace");
        xmlSerializer.text(parameters.getProviderNameSpace());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ProviderNameSpace");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
        xmlSerializer.text(parameters.getType());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Version");
        xmlSerializer.text(parameters.getVersion());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Version");
        
        if (parameters.getLabel() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
            xmlSerializer.text(parameters.getLabel());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        }
        
        if (parameters.getHostingResources() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostingResources");
            xmlSerializer.text(parameters.getHostingResources());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostingResources");
        }
        
        if (parameters.getMediaLink() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
            xmlSerializer.text(parameters.getMediaLink().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
        }
        
        if (parameters.getCertificate() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Certificate");
            
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
            xmlSerializer.text(parameters.getCertificate().getStoreLocation());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
            
            if (parameters.getCertificate().getStoreName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                xmlSerializer.text(parameters.getCertificate().getStoreName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreName");
            }
            
            if (parameters.getCertificate().isThumbprintRequired() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ThumbprintRequired");
                xmlSerializer.text(Boolean.toString(parameters.getCertificate().isThumbprintRequired()).toLowerCase());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ThumbprintRequired");
            }
            
            if (parameters.getCertificate().getThumbprintAlgorithm() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ThumbprintAlgorithm");
                xmlSerializer.text(parameters.getCertificate().getThumbprintAlgorithm());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ThumbprintAlgorithm");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Certificate");
        }
        
        if (parameters.getExtensionEndpoints() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionEndpoints");
            
            if (parameters.getExtensionEndpoints().getInputEndpoints() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                for (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsItem : parameters.getExtensionEndpoints().getInputEndpoints()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(inputEndpointsItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    xmlSerializer.text(inputEndpointsItem.getProtocol());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.text(Integer.toString(inputEndpointsItem.getPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                    xmlSerializer.text(Integer.toString(inputEndpointsItem.getLocalPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
            }
            
            if (parameters.getExtensionEndpoints().getInternalEndpoints() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoints");
                for (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsItem : parameters.getExtensionEndpoints().getInternalEndpoints()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoint");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(internalEndpointsItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    xmlSerializer.text(internalEndpointsItem.getProtocol());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.text(Integer.toString(internalEndpointsItem.getPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoint");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoints");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionEndpoints");
        }
        
        if (parameters.getPublicConfigurationSchema() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicConfigurationSchema");
            xmlSerializer.text(Base64.encode(parameters.getPublicConfigurationSchema().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicConfigurationSchema");
        }
        
        if (parameters.getPrivateConfigurationSchema() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PrivateConfigurationSchema");
            xmlSerializer.text(Base64.encode(parameters.getPrivateConfigurationSchema().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PrivateConfigurationSchema");
        }
        
        if (parameters.getDescription() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.text(parameters.getDescription());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        }
        
        if (parameters.getPublisherName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublisherName");
            xmlSerializer.text(parameters.getPublisherName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublisherName");
        }
        
        if (parameters.getPublishedDate() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublishedDate");
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            xmlSerializer.text(simpleDateFormat.format(parameters.getPublishedDate().getTime()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublishedDate");
        }
        
        if (parameters.getLocalResources() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalResources");
            for (ExtensionLocalResourceConfiguration localResourcesItem : parameters.getLocalResources()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalResource");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(localResourcesItem.getName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                if (localResourcesItem.getSizeInMB() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SizeInMB");
                    xmlSerializer.text(Integer.toString(localResourcesItem.getSizeInMB()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SizeInMB");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalResource");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalResources");
        }
        
        if (parameters.isBlockRoleUponFailure() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "BlockRoleUponFailure");
            xmlSerializer.text(Boolean.toString(parameters.isBlockRoleUponFailure()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "BlockRoleUponFailure");
        }
        
        if (parameters.isInternalExtension() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IsInternalExtension");
            xmlSerializer.text(Boolean.toString(parameters.isInternalExtension()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IsInternalExtension");
        }
        
        if (parameters.getSampleConfig() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SampleConfig");
            xmlSerializer.text(Base64.encode(parameters.getSampleConfig().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SampleConfig");
        }
        
        if (parameters.getEula() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Eula");
            xmlSerializer.text(parameters.getEula().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Eula");
        }
        
        if (parameters.getPrivacyUri() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PrivacyUri");
            xmlSerializer.text(parameters.getPrivacyUri().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PrivacyUri");
        }
        
        if (parameters.getHomepageUri() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HomepageUri");
            xmlSerializer.text(parameters.getHomepageUri().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HomepageUri");
        }
        
        if (parameters.isJsonExtension() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IsJsonExtension");
            xmlSerializer.text(Boolean.toString(parameters.isJsonExtension()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IsJsonExtension");
        }
        
        if (parameters.isDisallowMajorVersionUpgrade() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DisallowMajorVersionUpgrade");
            xmlSerializer.text(Boolean.toString(parameters.isDisallowMajorVersionUpgrade()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DisallowMajorVersionUpgrade");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionImage");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Unregister a version of an extension that was previously registered using
    * either the Register Extension or Update Extension APIs. An extension
    * version is identified by the combination of its ProviderNamespace, Type
    * and Version which are specified when registering the extension.
    * Unregistering is only allowed for internal extensions, that is, the
    * extensions for which the IsInternalExtension field is set to 'true'
    * during registration or during an update. There is a quota (15) on the
    * number of extensions that can be registered per subscription. If your
    * subscription runs out of quota, you will wither need to unregister some
    * of the internal extensions or contact Azure (same email used to become a
    * publisher)  to increase the quota.
    *
    * @param providerNamespace Required. The provider namespace of the
    * extension image to unregister.
    * @param type Required. The type of the extension image to unregister.
    * @param version Required. The version of the extension image to unregister.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUnregisteringAsync(final String providerNamespace, final String type, final String version) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUnregistering(providerNamespace, type, version);
            }
         });
    }
    
    /**
    * Unregister a version of an extension that was previously registered using
    * either the Register Extension or Update Extension APIs. An extension
    * version is identified by the combination of its ProviderNamespace, Type
    * and Version which are specified when registering the extension.
    * Unregistering is only allowed for internal extensions, that is, the
    * extensions for which the IsInternalExtension field is set to 'true'
    * during registration or during an update. There is a quota (15) on the
    * number of extensions that can be registered per subscription. If your
    * subscription runs out of quota, you will wither need to unregister some
    * of the internal extensions or contact Azure (same email used to become a
    * publisher)  to increase the quota.
    *
    * @param providerNamespace Required. The provider namespace of the
    * extension image to unregister.
    * @param type Required. The type of the extension image to unregister.
    * @param version Required. The version of the extension image to unregister.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUnregistering(String providerNamespace, String type, String version) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (providerNamespace == null) {
            throw new NullPointerException("providerNamespace");
        }
        if (type == null) {
            throw new NullPointerException("type");
        }
        if (version == null) {
            throw new NullPointerException("version");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("providerNamespace", providerNamespace);
            tracingParameters.put("type", type);
            tracingParameters.put("version", version);
            CloudTracing.enter(invocationId, this, "beginUnregisteringAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/extensions/" + providerNamespace.trim() + "/" + type.trim() + "/" + version.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Update a new extension. It is allowed to update an extension which had
    * already been registered with the same identity (i.e. combination of
    * ProviderNamespace and Type) but with different version. It will fail if
    * the extension to update has an identity that has not been registered
    * before, or there is already an extension with the same identity and same
    * version.
    *
    * @param parameters Required. Parameters supplied to the Update Virtual
    * Machine Extension Image operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginUpdatingAsync(final ExtensionImageUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginUpdating(parameters);
            }
         });
    }
    
    /**
    * Update a new extension. It is allowed to update an extension which had
    * already been registered with the same identity (i.e. combination of
    * ProviderNamespace and Type) but with different version. It will fail if
    * the extension to update has an identity that has not been registered
    * before, or there is already an extension with the same identity and same
    * version.
    *
    * @param parameters Required. Parameters supplied to the Update Virtual
    * Machine Extension Image operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginUpdating(ExtensionImageUpdateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getCertificate() != null) {
            if (parameters.getCertificate().getStoreLocation() == null) {
                throw new NullPointerException("parameters.Certificate.StoreLocation");
            }
        }
        if (parameters.getExtensionEndpoints() != null) {
            if (parameters.getExtensionEndpoints().getInputEndpoints() != null) {
                for (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsParameterItem : parameters.getExtensionEndpoints().getInputEndpoints()) {
                    if (inputEndpointsParameterItem.getName() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InputEndpoints.Name");
                    }
                    if (inputEndpointsParameterItem.getProtocol() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InputEndpoints.Protocol");
                    }
                }
            }
            if (parameters.getExtensionEndpoints().getInternalEndpoints() != null) {
                for (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsParameterItem : parameters.getExtensionEndpoints().getInternalEndpoints()) {
                    if (internalEndpointsParameterItem.getName() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InternalEndpoints.Name");
                    }
                    if (internalEndpointsParameterItem.getProtocol() == null) {
                        throw new NullPointerException("parameters.ExtensionEndpoints.InternalEndpoints.Protocol");
                    }
                }
            }
        }
        if (parameters.getLocalResources() != null) {
            for (ExtensionLocalResourceConfiguration localResourcesParameterItem : parameters.getLocalResources()) {
                if (localResourcesParameterItem.getName() == null) {
                    throw new NullPointerException("parameters.LocalResources.Name");
                }
            }
        }
        if (parameters.getProviderNameSpace() == null) {
            throw new NullPointerException("parameters.ProviderNameSpace");
        }
        if (parameters.getType() == null) {
            throw new NullPointerException("parameters.Type");
        }
        if (parameters.getVersion() == null) {
            throw new NullPointerException("parameters.Version");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginUpdatingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/extensions" + "?" + "action=update";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionImage");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ProviderNameSpace");
        xmlSerializer.text(parameters.getProviderNameSpace());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ProviderNameSpace");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
        xmlSerializer.text(parameters.getType());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Version");
        xmlSerializer.text(parameters.getVersion());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Version");
        
        if (parameters.getLabel() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
            xmlSerializer.text(parameters.getLabel());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        }
        
        if (parameters.getHostingResources() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostingResources");
            xmlSerializer.text(parameters.getHostingResources());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostingResources");
        }
        
        if (parameters.getMediaLink() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
            xmlSerializer.text(parameters.getMediaLink().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "MediaLink");
        }
        
        if (parameters.getCertificate() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Certificate");
            
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
            xmlSerializer.text(parameters.getCertificate().getStoreLocation());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreLocation");
            
            if (parameters.getCertificate().getStoreName() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "StoreName");
                xmlSerializer.text(parameters.getCertificate().getStoreName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "StoreName");
            }
            
            if (parameters.getCertificate().isThumbprintRequired() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ThumbprintRequired");
                xmlSerializer.text(Boolean.toString(parameters.getCertificate().isThumbprintRequired()).toLowerCase());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ThumbprintRequired");
            }
            
            if (parameters.getCertificate().getThumbprintAlgorithm() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ThumbprintAlgorithm");
                xmlSerializer.text(parameters.getCertificate().getThumbprintAlgorithm());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ThumbprintAlgorithm");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Certificate");
        }
        
        if (parameters.getExtensionEndpoints() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtensionEndpoints");
            
            if (parameters.getExtensionEndpoints().getInputEndpoints() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
                for (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsItem : parameters.getExtensionEndpoints().getInputEndpoints()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(inputEndpointsItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    xmlSerializer.text(inputEndpointsItem.getProtocol());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.text(Integer.toString(inputEndpointsItem.getPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                    xmlSerializer.text(Integer.toString(inputEndpointsItem.getLocalPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalPort");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoint");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InputEndpoints");
            }
            
            if (parameters.getExtensionEndpoints().getInternalEndpoints() != null) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoints");
                for (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsItem : parameters.getExtensionEndpoints().getInternalEndpoints()) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoint");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(internalEndpointsItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    xmlSerializer.text(internalEndpointsItem.getProtocol());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Protocol");
                    
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.text(Integer.toString(internalEndpointsItem.getPort()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Port");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoint");
                }
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "InternalEndpoints");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionEndpoints");
        }
        
        if (parameters.getPublicConfigurationSchema() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicConfigurationSchema");
            xmlSerializer.text(Base64.encode(parameters.getPublicConfigurationSchema().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicConfigurationSchema");
        }
        
        if (parameters.getPrivateConfigurationSchema() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PrivateConfigurationSchema");
            xmlSerializer.text(Base64.encode(parameters.getPrivateConfigurationSchema().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PrivateConfigurationSchema");
        }
        
        if (parameters.getDescription() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.text(parameters.getDescription());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        }
        
        if (parameters.getPublisherName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublisherName");
            xmlSerializer.text(parameters.getPublisherName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublisherName");
        }
        
        if (parameters.getPublishedDate() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublishedDate");
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            xmlSerializer.text(simpleDateFormat.format(parameters.getPublishedDate().getTime()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublishedDate");
        }
        
        if (parameters.getLocalResources() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalResources");
            for (ExtensionLocalResourceConfiguration localResourcesItem : parameters.getLocalResources()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LocalResource");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(localResourcesItem.getName());
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                if (localResourcesItem.getSizeInMB() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SizeInMB");
                    xmlSerializer.text(Integer.toString(localResourcesItem.getSizeInMB()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SizeInMB");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalResource");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LocalResources");
        }
        
        if (parameters.isBlockRoleUponFailure() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "BlockRoleUponFailure");
            xmlSerializer.text(Boolean.toString(parameters.isBlockRoleUponFailure()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "BlockRoleUponFailure");
        }
        
        if (parameters.isInternalExtension() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IsInternalExtension");
            xmlSerializer.text(Boolean.toString(parameters.isInternalExtension()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IsInternalExtension");
        }
        
        if (parameters.getSampleConfig() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SampleConfig");
            xmlSerializer.text(Base64.encode(parameters.getSampleConfig().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SampleConfig");
        }
        
        if (parameters.getEula() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Eula");
            xmlSerializer.text(parameters.getEula().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Eula");
        }
        
        if (parameters.getPrivacyUri() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PrivacyUri");
            xmlSerializer.text(parameters.getPrivacyUri().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PrivacyUri");
        }
        
        if (parameters.getHomepageUri() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HomepageUri");
            xmlSerializer.text(parameters.getHomepageUri().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HomepageUri");
        }
        
        if (parameters.isJsonExtension() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "IsJsonExtension");
            xmlSerializer.text(Boolean.toString(parameters.isJsonExtension()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "IsJsonExtension");
        }
        
        if (parameters.isDisallowMajorVersionUpgrade() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DisallowMajorVersionUpgrade");
            xmlSerializer.text(Boolean.toString(parameters.isDisallowMajorVersionUpgrade()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DisallowMajorVersionUpgrade");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtensionImage");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Register a new extension. An extension is identified by the combination
    * of its ProviderNamespace and Type (case-sensitive string). It is not
    * allowed to register an extension with the same identity (i.e.
    * combination of ProviderNamespace and Type) of an already-registered
    * extension. To register new version of an existing extension, the Update
    * Extension API should be used.
    *
    * @param parameters Required. Parameters supplied to the Register Virtual
    * Machine Extension Image operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> registerAsync(final ExtensionImageRegisterParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return register(parameters);
            }
         });
    }
    
    /**
    * Register a new extension. An extension is identified by the combination
    * of its ProviderNamespace and Type (case-sensitive string). It is not
    * allowed to register an extension with the same identity (i.e.
    * combination of ProviderNamespace and Type) of an already-registered
    * extension. To register new version of an existing extension, the Update
    * Extension API should be used.
    *
    * @param parameters Required. Parameters supplied to the Register Virtual
    * Machine Extension Image operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse register(ExtensionImageRegisterParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "registerAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getExtensionImagesOperations().beginRegisteringAsync(parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * Unregister a version of an extension that was previously registered using
    * either the Register Extension or Update Extension APIs. An extension
    * version is identified by the combination of its ProviderNamespace, Type
    * and Version which are specified when registering the extension.
    * Unregistering is only allowed for internal extensions, that is, the
    * extensions for which the IsInternalExtension field is set to 'true'
    * during registration or during an update. There is a quota (15) on the
    * number of extensions that can be registered per subscription. If your
    * subscription runs out of quota, you will wither need to unregister some
    * of the internal extensions or contact Azure (same email used to become a
    * publisher)  to increase the quota.
    *
    * @param providerNamespace Required. The provider namespace of the
    * extension image to unregister.
    * @param type Required. The type of the extension image to unregister.
    * @param version Required. The version of the extension image to unregister.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> unregisterAsync(final String providerNamespace, final String type, final String version) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return unregister(providerNamespace, type, version);
            }
         });
    }
    
    /**
    * Unregister a version of an extension that was previously registered using
    * either the Register Extension or Update Extension APIs. An extension
    * version is identified by the combination of its ProviderNamespace, Type
    * and Version which are specified when registering the extension.
    * Unregistering is only allowed for internal extensions, that is, the
    * extensions for which the IsInternalExtension field is set to 'true'
    * during registration or during an update. There is a quota (15) on the
    * number of extensions that can be registered per subscription. If your
    * subscription runs out of quota, you will wither need to unregister some
    * of the internal extensions or contact Azure (same email used to become a
    * publisher)  to increase the quota.
    *
    * @param providerNamespace Required. The provider namespace of the
    * extension image to unregister.
    * @param type Required. The type of the extension image to unregister.
    * @param version Required. The version of the extension image to unregister.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse unregister(String providerNamespace, String type, String version) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("providerNamespace", providerNamespace);
            tracingParameters.put("type", type);
            tracingParameters.put("version", version);
            CloudTracing.enter(invocationId, this, "unregisterAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getExtensionImagesOperations().beginUnregisteringAsync(providerNamespace, type, version).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * Update a new extension. It is allowed to update an extension which had
    * already been registered with the same identity (i.e. combination of
    * ProviderNamespace and Type) but with different version. It will fail if
    * the extension to update has an identity that has not been registered
    * before, or there is already an extension with the same identity and same
    * version.
    *
    * @param parameters Required. Parameters supplied to the Update Virtual
    * Machine Extension Image operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> updateAsync(final ExtensionImageUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return update(parameters);
            }
         });
    }
    
    /**
    * Update a new extension. It is allowed to update an extension which had
    * already been registered with the same identity (i.e. combination of
    * ProviderNamespace and Type) but with different version. It will fail if
    * the extension to update has an identity that has not been registered
    * before, or there is already an extension with the same identity and same
    * version.
    *
    * @param parameters Required. Parameters supplied to the Update Virtual
    * Machine Extension Image operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse update(ExtensionImageUpdateParameters parameters) throws InterruptedException, ExecutionException, ServiceException, MalformedURLException, ProtocolException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getExtensionImagesOperations().beginUpdatingAsync(parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
}
