/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.compute;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.core.OperationStatus;
import com.microsoft.azure.core.OperationStatusResponse;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.datatype.DatatypeFactoryImpl;
import com.microsoft.azure.core.utils.BOMInputStream;
import com.microsoft.azure.core.utils.Base64;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.compute.models.AccessControlListRule;
import com.microsoft.azure.management.compute.models.ComputeCapabilities;
import com.microsoft.azure.management.compute.models.ConfigurationSet;
import com.microsoft.azure.management.compute.models.DataVirtualHardDisk;
import com.microsoft.azure.management.compute.models.DeploymentSlot;
import com.microsoft.azure.management.compute.models.DeploymentStatus;
import com.microsoft.azure.management.compute.models.DeploymentUpgradeType;
import com.microsoft.azure.management.compute.models.DnsServer;
import com.microsoft.azure.management.compute.models.DnsSettings;
import com.microsoft.azure.management.compute.models.DomainJoinCredentials;
import com.microsoft.azure.management.compute.models.DomainJoinProvisioning;
import com.microsoft.azure.management.compute.models.DomainJoinSettings;
import com.microsoft.azure.management.compute.models.EndpointAcl;
import com.microsoft.azure.management.compute.models.GuestAgentFormattedMessage;
import com.microsoft.azure.management.compute.models.GuestAgentMessage;
import com.microsoft.azure.management.compute.models.GuestAgentStatus;
import com.microsoft.azure.management.compute.models.HostedServiceAddExtensionParameters;
import com.microsoft.azure.management.compute.models.HostedServiceCheckNameAvailabilityResponse;
import com.microsoft.azure.management.compute.models.HostedServiceCreateParameters;
import com.microsoft.azure.management.compute.models.HostedServiceGetDetailedResponse;
import com.microsoft.azure.management.compute.models.HostedServiceGetExtensionResponse;
import com.microsoft.azure.management.compute.models.HostedServiceGetResponse;
import com.microsoft.azure.management.compute.models.HostedServiceListAvailableExtensionsResponse;
import com.microsoft.azure.management.compute.models.HostedServiceListExtensionsResponse;
import com.microsoft.azure.management.compute.models.HostedServiceListResponse;
import com.microsoft.azure.management.compute.models.HostedServiceProperties;
import com.microsoft.azure.management.compute.models.HostedServiceStatus;
import com.microsoft.azure.management.compute.models.HostedServiceUpdateParameters;
import com.microsoft.azure.management.compute.models.InputEndpoint;
import com.microsoft.azure.management.compute.models.InstanceEndpoint;
import com.microsoft.azure.management.compute.models.LoadBalancerProbe;
import com.microsoft.azure.management.compute.models.LoadBalancerProbeTransportProtocol;
import com.microsoft.azure.management.compute.models.OSVirtualHardDisk;
import com.microsoft.azure.management.compute.models.PersistentVMDowntime;
import com.microsoft.azure.management.compute.models.ResourceExtensionConfigurationStatus;
import com.microsoft.azure.management.compute.models.ResourceExtensionParameterValue;
import com.microsoft.azure.management.compute.models.ResourceExtensionReference;
import com.microsoft.azure.management.compute.models.ResourceExtensionStatus;
import com.microsoft.azure.management.compute.models.ResourceExtensionSubStatus;
import com.microsoft.azure.management.compute.models.Role;
import com.microsoft.azure.management.compute.models.RoleInstance;
import com.microsoft.azure.management.compute.models.RoleInstancePowerState;
import com.microsoft.azure.management.compute.models.SshSettingKeyPair;
import com.microsoft.azure.management.compute.models.SshSettingPublicKey;
import com.microsoft.azure.management.compute.models.SshSettings;
import com.microsoft.azure.management.compute.models.StoredCertificateSettings;
import com.microsoft.azure.management.compute.models.UpgradeDomainState;
import com.microsoft.azure.management.compute.models.UpgradeStatus;
import com.microsoft.azure.management.compute.models.VirtualIPAddress;
import com.microsoft.azure.management.compute.models.VirtualMachineWindowsRemoteManagementListenerType;
import com.microsoft.azure.management.compute.models.WindowsRemoteManagementListener;
import com.microsoft.azure.management.compute.models.WindowsRemoteManagementSettings;
import com.microsoft.azure.tracing.ClientRequestTrackingHandler;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

/**
* The Service Management API includes operations for managing the hosted
* services beneath your subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for more
* information)
*/
public class HostedServiceOperationsImpl implements ServiceOperations<ComputeManagementClientImpl>, HostedServiceOperations {
    /**
    * Initializes a new instance of the HostedServiceOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    HostedServiceOperationsImpl(ComputeManagementClientImpl client) {
        this.client = client;
    }
    
    private ComputeManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.compute.ComputeManagementClientImpl.
    * @return The Client value.
    */
    public ComputeManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * The Add Extension operation adds an available extension to your cloud
    * service. In Azure, a process can run as an extension of a cloud service.
    * For example, Remote Desktop Access or the Azure Diagnostics Agent can
    * run as extensions to the cloud service. You can find the available
    * extension by using the List Available Extensions operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param parameters Required. Parameters supplied to the Add Extension
    * operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> addExtensionAsync(final String serviceName, final HostedServiceAddExtensionParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return addExtension(serviceName, parameters);
            }
         });
    }
    
    /**
    * The Add Extension operation adds an available extension to your cloud
    * service. In Azure, a process can run as an extension of a cloud service.
    * For example, Remote Desktop Access or the Azure Diagnostics Agent can
    * run as extensions to the cloud service. You can find the available
    * extension by using the List Available Extensions operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param parameters Required. Parameters supplied to the Add Extension
    * operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse addExtension(String serviceName, HostedServiceAddExtensionParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "addExtensionAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getHostedServicesOperations().beginAddingExtensionAsync(serviceName, parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Begin Adding Extension operation adds an available extension to your
    * cloud service. In Azure, a process can run as an extension of a cloud
    * service. For example, Remote Desktop Access or the Azure Diagnostics
    * Agent can run as extensions to the cloud service. You can find the
    * available extension by using the List Available Extensions operation.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param parameters Required. Parameters supplied to the Begin Adding
    * Extension operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginAddingExtensionAsync(final String serviceName, final HostedServiceAddExtensionParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginAddingExtension(serviceName, parameters);
            }
         });
    }
    
    /**
    * The Begin Adding Extension operation adds an available extension to your
    * cloud service. In Azure, a process can run as an extension of a cloud
    * service. For example, Remote Desktop Access or the Azure Diagnostics
    * Agent can run as extensions to the cloud service. You can find the
    * available extension by using the List Available Extensions operation.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param parameters Required. Parameters supplied to the Begin Adding
    * Extension operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginAddingExtension(String serviceName, HostedServiceAddExtensionParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getId() == null) {
            throw new NullPointerException("parameters.Id");
        }
        if (parameters.getType() == null) {
            throw new NullPointerException("parameters.Type");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginAddingExtensionAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/extensions";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
        
        if (parameters.getProviderNamespace() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ProviderNameSpace");
            xmlSerializer.text(parameters.getProviderNamespace());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ProviderNameSpace");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
        xmlSerializer.text(parameters.getType());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Id");
        xmlSerializer.text(parameters.getId());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Id");
        
        if (parameters.getThumbprint() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
            xmlSerializer.text(parameters.getThumbprint());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
        }
        
        if (parameters.getThumbprintAlgorithm() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ThumbprintAlgorithm");
            xmlSerializer.text(parameters.getThumbprintAlgorithm());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ThumbprintAlgorithm");
        }
        
        if (parameters.getPublicConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublicConfiguration");
            xmlSerializer.text(Base64.encode(parameters.getPublicConfiguration().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublicConfiguration");
        }
        
        if (parameters.getPrivateConfiguration() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PrivateConfiguration");
            xmlSerializer.text(Base64.encode(parameters.getPrivateConfiguration().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PrivateConfiguration");
        }
        
        if (parameters.getVersion() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Version");
            xmlSerializer.text(parameters.getVersion());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Version");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Deleting All Hosted Service operation deletes the specified
    * cloud service from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginDeletingAllAsync(final String serviceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginDeletingAll(serviceName);
            }
         });
    }
    
    /**
    * The Begin Deleting All Hosted Service operation deletes the specified
    * cloud service from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginDeletingAll(String serviceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            CloudTracing.enter(invocationId, this, "beginDeletingAllAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "?" + "comp=media";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Begin Deleting Extension operation deletes the specified extension
    * from a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param extensionId Required. The identifier that was assigned to the
    * extension when it was added to the cloud service
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginDeletingExtensionAsync(final String serviceName, final String extensionId) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginDeletingExtension(serviceName, extensionId);
            }
         });
    }
    
    /**
    * The Begin Deleting Extension operation deletes the specified extension
    * from a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param extensionId Required. The identifier that was assigned to the
    * extension when it was added to the cloud service
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginDeletingExtension(String serviceName, String extensionId) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (extensionId == null) {
            throw new NullPointerException("extensionId");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("extensionId", extensionId);
            CloudTracing.enter(invocationId, this, "beginDeletingExtensionAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/extensions/" + extensionId.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK && statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Check Hosted Service Name Availability operation checks for the
    * availability of the specified cloud service name.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154116.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service name that you would like
    * to use.
    * @return The Check Hosted Service Name Availability operation response.
    */
    @Override
    public Future<HostedServiceCheckNameAvailabilityResponse> checkNameAvailabilityAsync(final String serviceName) {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceCheckNameAvailabilityResponse>() { 
            @Override
            public HostedServiceCheckNameAvailabilityResponse call() throws Exception {
                return checkNameAvailability(serviceName);
            }
         });
    }
    
    /**
    * The Check Hosted Service Name Availability operation checks for the
    * availability of the specified cloud service name.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154116.aspx for
    * more information)
    *
    * @param serviceName Required. The cloud service name that you would like
    * to use.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The Check Hosted Service Name Availability operation response.
    */
    @Override
    public HostedServiceCheckNameAvailabilityResponse checkNameAvailability(String serviceName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            CloudTracing.enter(invocationId, this, "checkNameAvailabilityAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/operations/isavailable/" + serviceName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceCheckNameAvailabilityResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceCheckNameAvailabilityResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "AvailabilityResponse".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "AvailabilityResponse".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Result".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Result".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean resultInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    resultInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setIsAvailable(resultInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Reason".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Reason".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String reasonInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    reasonInstance = xmlPullParser.getText();
                                    result.setReason(reasonInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Create Hosted Service operation creates a new cloud service in Azure.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441304.aspx
    * for more information)
    *
    * @param parameters Required. Parameters supplied to the Create Hosted
    * Service operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> createAsync(final HostedServiceCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return create(parameters);
            }
         });
    }
    
    /**
    * The Create Hosted Service operation creates a new cloud service in Azure.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441304.aspx
    * for more information)
    *
    * @param parameters Required. Parameters supplied to the Create Hosted
    * Service operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse create(HostedServiceCreateParameters parameters) throws InterruptedException, ExecutionException, ServiceException, MalformedURLException, ProtocolException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getDescription() != null && parameters.getDescription().length() > 1024) {
            throw new IllegalArgumentException("parameters.Description");
        }
        if (parameters.getLabel() == null) {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getServiceName() == null) {
            throw new NullPointerException("parameters.ServiceName");
        }
        // TODO: Validate parameters.ServiceName is a valid DNS name.
        int locationCount = (parameters.getAffinityGroup() != null ? 1 : 0) + (parameters.getLocation() != null ? 1 : 0);
        if (locationCount != 1) {
            throw new IllegalArgumentException("Only one of parameters.AffinityGroup, parameters.Location may be provided.");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CreateHostedService");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ServiceName");
        xmlSerializer.text(parameters.getServiceName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ServiceName");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
        xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        
        if (parameters.getDescription() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.text(parameters.getDescription());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        }
        
        if (parameters.getLocation() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Location");
            xmlSerializer.text(parameters.getLocation());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Location");
        }
        
        if (parameters.getAffinityGroup() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AffinityGroup");
            xmlSerializer.text(parameters.getAffinityGroup());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AffinityGroup");
        }
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CreateHostedService");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.CREATED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Delete Hosted Service operation deletes the specified cloud service
    * from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String serviceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return delete(serviceName);
            }
         });
    }
    
    /**
    * The Delete Hosted Service operation deletes the specified cloud service
    * from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String serviceName) throws MalformedURLException, ProtocolException, ServiceException, IOException, InterruptedException, ExecutionException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Delete All Hosted Service operation deletes the specified cloud
    * service from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> deleteAllAsync(final String serviceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return deleteAll(serviceName);
            }
         });
    }
    
    /**
    * The Delete All Hosted Service operation deletes the specified cloud
    * service from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse deleteAll(String serviceName) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            CloudTracing.enter(invocationId, this, "deleteAllAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getHostedServicesOperations().beginDeletingAllAsync(serviceName).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Delete Extension operation deletes the specified extension from a
    * cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param extensionId Required. The identifier that was assigned to the
    * extension when it was added to the cloud service
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> deleteExtensionAsync(final String serviceName, final String extensionId) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return deleteExtension(serviceName, extensionId);
            }
         });
    }
    
    /**
    * The Delete Extension operation deletes the specified extension from a
    * cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param extensionId Required. The identifier that was assigned to the
    * extension when it was added to the cloud service
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse deleteExtension(String serviceName, String extensionId) throws InterruptedException, ExecutionException, ServiceException {
        ComputeManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("extensionId", extensionId);
            CloudTracing.enter(invocationId, this, "deleteExtensionAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getHostedServicesOperations().beginDeletingExtensionAsync(serviceName, extensionId).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Get Hosted Service Properties operation retrieves system properties
    * for the specified cloud service. These properties include the service
    * name and service type; and the name of the affinity group to which the
    * service belongs, or its location if it is not part of an affinity group.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @return The Get Hosted Service operation response.
    */
    @Override
    public Future<HostedServiceGetResponse> getAsync(final String serviceName) {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceGetResponse>() { 
            @Override
            public HostedServiceGetResponse call() throws Exception {
                return get(serviceName);
            }
         });
    }
    
    /**
    * The Get Hosted Service Properties operation retrieves system properties
    * for the specified cloud service. These properties include the service
    * name and service type; and the name of the affinity group to which the
    * service belongs, or its location if it is not part of an affinity group.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx
    * for more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Hosted Service operation response.
    */
    @Override
    public HostedServiceGetResponse get(String serviceName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "HostedService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "HostedService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI urlInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    urlInstance = new URI(xmlPullParser.getText());
                                    result.setUri(urlInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String serviceNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    serviceNameInstance = xmlPullParser.getText();
                                    result.setServiceName(serviceNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostedServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostedServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                HostedServiceProperties hostedServicePropertiesInstance;
                                if (result.getProperties() == null) {
                                    hostedServicePropertiesInstance = new HostedServiceProperties();
                                    result.setProperties(hostedServicePropertiesInstance);
                                } else {
                                    hostedServicePropertiesInstance = result.getProperties();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String descriptionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            descriptionInstance = xmlPullParser.getText();
                                            hostedServicePropertiesInstance.setDescription(descriptionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String affinityGroupInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            affinityGroupInstance = xmlPullParser.getText();
                                            hostedServicePropertiesInstance.setAffinityGroup(affinityGroupInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String locationInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            locationInstance = xmlPullParser.getText();
                                            hostedServicePropertiesInstance.setLocation(locationInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String labelInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            labelInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            hostedServicePropertiesInstance.setLabel(labelInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        HostedServiceStatus statusInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusInstance = HostedServiceStatus.valueOf(xmlPullParser.getText());
                                            hostedServicePropertiesInstance.setStatus(statusInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "DateCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DateCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar dateCreatedInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            dateCreatedInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            hostedServicePropertiesInstance.setDateCreated(dateCreatedInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "DateLastModified".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DateLastModified".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar dateLastModifiedInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            dateLastModifiedInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            hostedServicePropertiesInstance.setDateLastModified(dateLastModifiedInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key = null;
                                                String value = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key != null && value != null) {
                                                    hostedServicePropertiesInstance.getExtendedProperties().put(key, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ComputeCapabilities".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ComputeCapabilities".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ComputeCapabilities computeCapabilitiesInstance;
                                if (result.getComputeCapabilities() == null) {
                                    computeCapabilitiesInstance = new ComputeCapabilities();
                                    result.setComputeCapabilities(computeCapabilitiesInstance);
                                } else {
                                    computeCapabilitiesInstance = result.getComputeCapabilities();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "VirtualMachinesRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "VirtualMachinesRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.TEXT) {
                                            computeCapabilitiesInstance.getVirtualMachinesRoleSizes().add(xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "WebWorkerRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "WebWorkerRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.TEXT) {
                                            computeCapabilitiesInstance.getWebWorkerRoleSizes().add(xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Get Detailed Hosted Service Properties operation retrieves system
    * properties for the specified cloud service. These properties include the
    * service name and service type; the name of the affinity group to which
    * the service belongs, or its location if it is not part of an affinity
    * group; and information on the deployments of the service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @return The detailed Get Hosted Service operation response.
    */
    @Override
    public Future<HostedServiceGetDetailedResponse> getDetailedAsync(final String serviceName) {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceGetDetailedResponse>() { 
            @Override
            public HostedServiceGetDetailedResponse call() throws Exception {
                return getDetailed(serviceName);
            }
         });
    }
    
    /**
    * The Get Detailed Hosted Service Properties operation retrieves system
    * properties for the specified cloud service. These properties include the
    * service name and service type; the name of the affinity group to which
    * the service belongs, or its location if it is not part of an affinity
    * group; and information on the deployments of the service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The detailed Get Hosted Service operation response.
    */
    @Override
    public HostedServiceGetDetailedResponse getDetailed(String serviceName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            CloudTracing.enter(invocationId, this, "getDetailedAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "?" + "embed-detail=true";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceGetDetailedResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceGetDetailedResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "HostedService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "HostedService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Deployments".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Deployments".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Deployment".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    HostedServiceGetDetailedResponse.Deployment deploymentInstance;
                                    deploymentInstance = new HostedServiceGetDetailedResponse.Deployment();
                                    result.getDeployments().add(deploymentInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "Deployment".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String nameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    nameInstance = xmlPullParser.getText();
                                                    deploymentInstance.setName(nameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "DeploymentSlot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "DeploymentSlot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                DeploymentSlot deploymentSlotInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    deploymentSlotInstance = DeploymentSlot.valueOf(xmlPullParser.getText());
                                                    deploymentInstance.setDeploymentSlot(deploymentSlotInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "PrivateID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "PrivateID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String privateIDInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    privateIDInstance = xmlPullParser.getText();
                                                    deploymentInstance.setPrivateId(privateIDInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                DeploymentStatus statusInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    statusInstance = DeploymentStatus.valueOf(xmlPullParser.getText());
                                                    deploymentInstance.setStatus(statusInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String labelInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    labelInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                                    deploymentInstance.setLabel(labelInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                URI urlInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    urlInstance = new URI(xmlPullParser.getText());
                                                    deploymentInstance.setUri(urlInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Configuration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Configuration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String configurationInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    configurationInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                                    deploymentInstance.setConfiguration(configurationInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "RoleInstanceList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "RoleInstanceList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.START_TAG && "RoleInstance".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    RoleInstance roleInstanceInstance;
                                                    roleInstanceInstance = new RoleInstance();
                                                    deploymentInstance.getRoleInstances().add(roleInstanceInstance);
                                                    
                                                    while ((eventType == XmlPullParser.END_TAG && "RoleInstance".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String roleNameInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    roleNameInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setRoleName(roleNameInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String instanceNameInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    instanceNameInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setInstanceName(instanceNameInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String instanceStatusInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    instanceStatusInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setInstanceStatus(instanceStatusInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                int instanceUpgradeDomainInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    instanceUpgradeDomainInstance = Integer.parseInt(xmlPullParser.getText());
                                                                    roleInstanceInstance.setInstanceUpgradeDomain(instanceUpgradeDomainInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceFaultDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceFaultDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                int instanceFaultDomainInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    instanceFaultDomainInstance = Integer.parseInt(xmlPullParser.getText());
                                                                    roleInstanceInstance.setInstanceFaultDomain(instanceFaultDomainInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String instanceSizeInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    instanceSizeInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setInstanceSize(instanceSizeInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceStateDetails".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceStateDetails".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String instanceStateDetailsInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    instanceStateDetailsInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setInstanceStateDetails(instanceStateDetailsInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceErrorCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceErrorCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String instanceErrorCodeInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    instanceErrorCodeInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setInstanceErrorCode(instanceErrorCodeInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "IpAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "IpAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                InetAddress ipAddressInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    ipAddressInstance = InetAddress.getByName(xmlPullParser.getText());
                                                                    roleInstanceInstance.setIPAddress(ipAddressInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "InstanceEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "InstanceEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "InstanceEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    InstanceEndpoint instanceEndpointInstance;
                                                                    instanceEndpointInstance = new InstanceEndpoint();
                                                                    roleInstanceInstance.getInstanceEndpoints().add(instanceEndpointInstance);
                                                                    
                                                                    while ((eventType == XmlPullParser.END_TAG && "InstanceEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.START_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                int localPortInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    localPortInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                    instanceEndpointInstance.setLocalPort(localPortInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String nameInstance2;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    nameInstance2 = xmlPullParser.getText();
                                                                                    instanceEndpointInstance.setName(nameInstance2);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "PublicPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "PublicPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                int publicPortInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    publicPortInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                    instanceEndpointInstance.setPort(publicPortInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String protocolInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    protocolInstance = xmlPullParser.getText();
                                                                                    instanceEndpointInstance.setProtocol(protocolInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                InetAddress vipInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    vipInstance = InetAddress.getByName(xmlPullParser.getText());
                                                                                    instanceEndpointInstance.setVirtualIPAddress(vipInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "GuestAgentStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "GuestAgentStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                GuestAgentStatus guestAgentStatusInstance;
                                                                if (roleInstanceInstance.getGuestAgentStatus() == null) {
                                                                    guestAgentStatusInstance = new GuestAgentStatus();
                                                                    roleInstanceInstance.setGuestAgentStatus(guestAgentStatusInstance);
                                                                } else {
                                                                    guestAgentStatusInstance = roleInstanceInstance.getGuestAgentStatus();
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "ProtocolVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "ProtocolVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String protocolVersionInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            protocolVersionInstance = xmlPullParser.getText();
                                                                            guestAgentStatusInstance.setProtocolVersion(protocolVersionInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        Calendar timestampInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            timestampInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                                            guestAgentStatusInstance.setTimestamp(timestampInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "GuestAgentVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "GuestAgentVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String guestAgentVersionInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            guestAgentVersionInstance = xmlPullParser.getText();
                                                                            guestAgentStatusInstance.setGuestAgentVersion(guestAgentVersionInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String statusInstance2;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            statusInstance2 = xmlPullParser.getText();
                                                                            guestAgentStatusInstance.setStatus(statusInstance2);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        int codeInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            codeInstance = Integer.parseInt(xmlPullParser.getText());
                                                                            guestAgentStatusInstance.setCode(codeInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        GuestAgentMessage messageInstance;
                                                                        if (guestAgentStatusInstance.getMessage() == null) {
                                                                            messageInstance = new GuestAgentMessage();
                                                                            guestAgentStatusInstance.setMessage(messageInstance);
                                                                        } else {
                                                                            messageInstance = guestAgentStatusInstance.getMessage();
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String messageResourceIdInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    messageResourceIdInstance = xmlPullParser.getText();
                                                                                    messageInstance.setMessageResourceId(messageResourceIdInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    messageInstance.getParamList().add(xmlPullParser.getText());
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        GuestAgentFormattedMessage formattedMessageInstance;
                                                                        if (guestAgentStatusInstance.getFormattedMessage() == null) {
                                                                            formattedMessageInstance = new GuestAgentFormattedMessage();
                                                                            guestAgentStatusInstance.setFormattedMessage(formattedMessageInstance);
                                                                        } else {
                                                                            formattedMessageInstance = guestAgentStatusInstance.getFormattedMessage();
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String languageInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    languageInstance = xmlPullParser.getText();
                                                                                    formattedMessageInstance.setLanguage(languageInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String messageInstance2;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    messageInstance2 = xmlPullParser.getText();
                                                                                    formattedMessageInstance.setMessage(messageInstance2);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ResourceExtensionStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "ResourceExtensionStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    ResourceExtensionStatus resourceExtensionStatusInstance;
                                                                    resourceExtensionStatusInstance = new ResourceExtensionStatus();
                                                                    roleInstanceInstance.getResourceExtensionStatusList().add(resourceExtensionStatusInstance);
                                                                    
                                                                    while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.START_TAG && "HandlerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "HandlerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String handlerNameInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    handlerNameInstance = xmlPullParser.getText();
                                                                                    resourceExtensionStatusInstance.setHandlerName(handlerNameInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String versionInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    versionInstance = xmlPullParser.getText();
                                                                                    resourceExtensionStatusInstance.setVersion(versionInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String statusInstance3;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    statusInstance3 = xmlPullParser.getText();
                                                                                    resourceExtensionStatusInstance.setStatus(statusInstance3);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                int codeInstance2;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    codeInstance2 = Integer.parseInt(xmlPullParser.getText());
                                                                                    resourceExtensionStatusInstance.setCode(codeInstance2);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                GuestAgentMessage messageInstance3;
                                                                                if (resourceExtensionStatusInstance.getMessage() == null) {
                                                                                    messageInstance3 = new GuestAgentMessage();
                                                                                    resourceExtensionStatusInstance.setMessage(messageInstance3);
                                                                                } else {
                                                                                    messageInstance3 = resourceExtensionStatusInstance.getMessage();
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String messageResourceIdInstance2;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            messageResourceIdInstance2 = xmlPullParser.getText();
                                                                                            messageInstance3.setMessageResourceId(messageResourceIdInstance2);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            messageInstance3.getParamList().add(xmlPullParser.getText());
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                GuestAgentFormattedMessage formattedMessageInstance2;
                                                                                if (resourceExtensionStatusInstance.getFormattedMessage() == null) {
                                                                                    formattedMessageInstance2 = new GuestAgentFormattedMessage();
                                                                                    resourceExtensionStatusInstance.setFormattedMessage(formattedMessageInstance2);
                                                                                } else {
                                                                                    formattedMessageInstance2 = resourceExtensionStatusInstance.getFormattedMessage();
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String languageInstance2;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            languageInstance2 = xmlPullParser.getText();
                                                                                            formattedMessageInstance2.setLanguage(languageInstance2);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String messageInstance4;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            messageInstance4 = xmlPullParser.getText();
                                                                                            formattedMessageInstance2.setMessage(messageInstance4);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "ExtensionSettingStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "ExtensionSettingStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                ResourceExtensionConfigurationStatus extensionSettingStatusInstance;
                                                                                if (resourceExtensionStatusInstance.getExtensionSettingStatus() == null) {
                                                                                    extensionSettingStatusInstance = new ResourceExtensionConfigurationStatus();
                                                                                    resourceExtensionStatusInstance.setExtensionSettingStatus(extensionSettingStatusInstance);
                                                                                } else {
                                                                                    extensionSettingStatusInstance = resourceExtensionStatusInstance.getExtensionSettingStatus();
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Timestamp".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        Calendar timestampInstance2;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            timestampInstance2 = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                                                            extensionSettingStatusInstance.setTimestamp(timestampInstance2);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "ConfigurationAppliedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "ConfigurationAppliedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        Calendar configurationAppliedTimeInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            configurationAppliedTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                                                            extensionSettingStatusInstance.setConfigurationAppliedTime(configurationAppliedTimeInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String nameInstance3;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            nameInstance3 = xmlPullParser.getText();
                                                                                            extensionSettingStatusInstance.setName(nameInstance3);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String operationInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            operationInstance = xmlPullParser.getText();
                                                                                            extensionSettingStatusInstance.setOperation(operationInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String statusInstance4;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            statusInstance4 = xmlPullParser.getText();
                                                                                            extensionSettingStatusInstance.setStatus(statusInstance4);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        int codeInstance3;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            codeInstance3 = Integer.parseInt(xmlPullParser.getText());
                                                                                            extensionSettingStatusInstance.setCode(codeInstance3);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        GuestAgentMessage messageInstance5;
                                                                                        if (extensionSettingStatusInstance.getMessage() == null) {
                                                                                            messageInstance5 = new GuestAgentMessage();
                                                                                            extensionSettingStatusInstance.setMessage(messageInstance5);
                                                                                        } else {
                                                                                            messageInstance5 = extensionSettingStatusInstance.getMessage();
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String messageResourceIdInstance3;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    messageResourceIdInstance3 = xmlPullParser.getText();
                                                                                                    messageInstance5.setMessageResourceId(messageResourceIdInstance3);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    messageInstance5.getParamList().add(xmlPullParser.getText());
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        GuestAgentFormattedMessage formattedMessageInstance3;
                                                                                        if (extensionSettingStatusInstance.getFormattedMessage() == null) {
                                                                                            formattedMessageInstance3 = new GuestAgentFormattedMessage();
                                                                                            extensionSettingStatusInstance.setFormattedMessage(formattedMessageInstance3);
                                                                                        } else {
                                                                                            formattedMessageInstance3 = extensionSettingStatusInstance.getFormattedMessage();
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String languageInstance3;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    languageInstance3 = xmlPullParser.getText();
                                                                                                    formattedMessageInstance3.setLanguage(languageInstance3);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String messageInstance6;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    messageInstance6 = xmlPullParser.getText();
                                                                                                    formattedMessageInstance3.setMessage(messageInstance6);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "SubStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "SubStatusList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "SubStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            ResourceExtensionSubStatus subStatusInstance;
                                                                                            subStatusInstance = new ResourceExtensionSubStatus();
                                                                                            extensionSettingStatusInstance.getSubStatusList().add(subStatusInstance);
                                                                                            
                                                                                            while ((eventType == XmlPullParser.END_TAG && "SubStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String nameInstance4;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            nameInstance4 = xmlPullParser.getText();
                                                                                                            subStatusInstance.setName(nameInstance4);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String statusInstance5;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            statusInstance5 = xmlPullParser.getText();
                                                                                                            subStatusInstance.setStatus(statusInstance5);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        int codeInstance4;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            codeInstance4 = Integer.parseInt(xmlPullParser.getText());
                                                                                                            subStatusInstance.setCode(codeInstance4);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        GuestAgentMessage messageInstance7;
                                                                                                        if (subStatusInstance.getMessage() == null) {
                                                                                                            messageInstance7 = new GuestAgentMessage();
                                                                                                            subStatusInstance.setMessage(messageInstance7);
                                                                                                        } else {
                                                                                                            messageInstance7 = subStatusInstance.getMessage();
                                                                                                        }
                                                                                                        
                                                                                                        if (eventType == XmlPullParser.START_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                            while ((eventType == XmlPullParser.END_TAG && "MessageResourceId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                String messageResourceIdInstance4;
                                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                                    messageResourceIdInstance4 = xmlPullParser.getText();
                                                                                                                    messageInstance7.setMessageResourceId(messageResourceIdInstance4);
                                                                                                                }
                                                                                                                
                                                                                                                eventType = xmlPullParser.next();
                                                                                                            }
                                                                                                        }
                                                                                                        
                                                                                                        if (eventType == XmlPullParser.START_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                            while ((eventType == XmlPullParser.END_TAG && "ParamList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                                    messageInstance7.getParamList().add(xmlPullParser.getText());
                                                                                                                }
                                                                                                                
                                                                                                                eventType = xmlPullParser.next();
                                                                                                            }
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "FormattedMessage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        GuestAgentFormattedMessage formattedMessageInstance4;
                                                                                                        if (subStatusInstance.getFormattedMessage() == null) {
                                                                                                            formattedMessageInstance4 = new GuestAgentFormattedMessage();
                                                                                                            subStatusInstance.setFormattedMessage(formattedMessageInstance4);
                                                                                                        } else {
                                                                                                            formattedMessageInstance4 = subStatusInstance.getFormattedMessage();
                                                                                                        }
                                                                                                        
                                                                                                        if (eventType == XmlPullParser.START_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                            while ((eventType == XmlPullParser.END_TAG && "Language".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                String languageInstance4;
                                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                                    languageInstance4 = xmlPullParser.getText();
                                                                                                                    formattedMessageInstance4.setLanguage(languageInstance4);
                                                                                                                }
                                                                                                                
                                                                                                                eventType = xmlPullParser.next();
                                                                                                            }
                                                                                                        }
                                                                                                        
                                                                                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                String messageInstance8;
                                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                                    messageInstance8 = xmlPullParser.getText();
                                                                                                                    formattedMessageInstance4.setMessage(messageInstance8);
                                                                                                                }
                                                                                                                
                                                                                                                eventType = xmlPullParser.next();
                                                                                                            }
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "PowerState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "PowerState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                RoleInstancePowerState powerStateInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    powerStateInstance = RoleInstancePowerState.valueOf(xmlPullParser.getText());
                                                                    roleInstanceInstance.setPowerState(powerStateInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String hostNameInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    hostNameInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setHostName(hostNameInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "RemoteAccessCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "RemoteAccessCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String remoteAccessCertificateThumbprintInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    remoteAccessCertificateThumbprintInstance = xmlPullParser.getText();
                                                                    roleInstanceInstance.setRemoteAccessCertificateThumbprint(remoteAccessCertificateThumbprintInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    RoleInstance.PublicIP publicIPInstance;
                                                                    publicIPInstance = new RoleInstance.PublicIP();
                                                                    roleInstanceInstance.getPublicIPs().add(publicIPInstance);
                                                                    
                                                                    while ((eventType == XmlPullParser.END_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String nameInstance5;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    nameInstance5 = xmlPullParser.getText();
                                                                                    publicIPInstance.setName(nameInstance5);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                InetAddress addressInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    addressInstance = InetAddress.getByName(xmlPullParser.getText());
                                                                                    publicIPInstance.setAddress(addressInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "UpgradeStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "UpgradeStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                UpgradeStatus upgradeStatusInstance;
                                                if (deploymentInstance.getUpgradeStatus() == null) {
                                                    upgradeStatusInstance = new UpgradeStatus();
                                                    deploymentInstance.setUpgradeStatus(upgradeStatusInstance);
                                                } else {
                                                    upgradeStatusInstance = deploymentInstance.getUpgradeStatus();
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "UpgradeType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "UpgradeType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        DeploymentUpgradeType upgradeTypeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            upgradeTypeInstance = DeploymentUpgradeType.valueOf(xmlPullParser.getText());
                                                            upgradeStatusInstance.setUpgradeType(upgradeTypeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "CurrentUpgradeDomainState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "CurrentUpgradeDomainState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        UpgradeDomainState currentUpgradeDomainStateInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            currentUpgradeDomainStateInstance = UpgradeDomainState.valueOf(xmlPullParser.getText());
                                                            upgradeStatusInstance.setCurrentUpgradeDomainState(currentUpgradeDomainStateInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "CurrentUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "CurrentUpgradeDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        int currentUpgradeDomainInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            currentUpgradeDomainInstance = Integer.parseInt(xmlPullParser.getText());
                                                            upgradeStatusInstance.setCurrentUpgradeDomain(currentUpgradeDomainInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "UpgradeDomainCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "UpgradeDomainCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                int upgradeDomainCountInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    upgradeDomainCountInstance = Integer.parseInt(xmlPullParser.getText());
                                                    deploymentInstance.setUpgradeDomainCount(upgradeDomainCountInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "RoleList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "RoleList".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.START_TAG && "Role".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    Role roleInstance;
                                                    roleInstance = new Role();
                                                    deploymentInstance.getRoles().add(roleInstance);
                                                    
                                                    while ((eventType == XmlPullParser.END_TAG && "Role".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "RoleName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String roleNameInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    roleNameInstance2 = xmlPullParser.getText();
                                                                    roleInstance.setRoleName(roleNameInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "OsVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String osVersionInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    osVersionInstance = xmlPullParser.getText();
                                                                    roleInstance.setOSVersion(osVersionInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "RoleType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String roleTypeInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    roleTypeInstance = xmlPullParser.getText();
                                                                    roleInstance.setRoleType(roleTypeInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ConfigurationSets".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "ConfigurationSet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    ConfigurationSet configurationSetInstance;
                                                                    configurationSetInstance = new ConfigurationSet();
                                                                    roleInstance.getConfigurationSets().add(configurationSetInstance);
                                                                    
                                                                    while ((eventType == XmlPullParser.END_TAG && "ConfigurationSet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.START_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "ConfigurationSetType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String configurationSetTypeInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    configurationSetTypeInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setConfigurationSetType(configurationSetTypeInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "InputEndpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                if (eventType == XmlPullParser.START_TAG && "InputEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    InputEndpoint inputEndpointInstance;
                                                                                    inputEndpointInstance = new InputEndpoint();
                                                                                    configurationSetInstance.getInputEndpoints().add(inputEndpointInstance);
                                                                                    
                                                                                    while ((eventType == XmlPullParser.END_TAG && "InputEndpoint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "LoadBalancedEndpointSetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String loadBalancedEndpointSetNameInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    loadBalancedEndpointSetNameInstance = xmlPullParser.getText();
                                                                                                    inputEndpointInstance.setLoadBalancedEndpointSetName(loadBalancedEndpointSetNameInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "LocalPort".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                int localPortInstance2;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    localPortInstance2 = Integer.parseInt(xmlPullParser.getText());
                                                                                                    inputEndpointInstance.setLocalPort(localPortInstance2);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String nameInstance6;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    nameInstance6 = xmlPullParser.getText();
                                                                                                    inputEndpointInstance.setName(nameInstance6);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                int portInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    portInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                                    inputEndpointInstance.setPort(portInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "LoadBalancerProbe".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                LoadBalancerProbe loadBalancerProbeInstance;
                                                                                                if (inputEndpointInstance.getLoadBalancerProbe() == null) {
                                                                                                    loadBalancerProbeInstance = new LoadBalancerProbe();
                                                                                                    inputEndpointInstance.setLoadBalancerProbe(loadBalancerProbeInstance);
                                                                                                } else {
                                                                                                    loadBalancerProbeInstance = inputEndpointInstance.getLoadBalancerProbe();
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String pathInstance;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            pathInstance = xmlPullParser.getText();
                                                                                                            loadBalancerProbeInstance.setPath(pathInstance);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Port".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        int portInstance2;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            portInstance2 = Integer.parseInt(xmlPullParser.getText());
                                                                                                            loadBalancerProbeInstance.setPort(portInstance2);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        LoadBalancerProbeTransportProtocol protocolInstance2;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            protocolInstance2 = ComputeManagementClientImpl.parseLoadBalancerProbeTransportProtocol(xmlPullParser.getText());
                                                                                                            loadBalancerProbeInstance.setProtocol(protocolInstance2);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "IntervalInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        int intervalInSecondsInstance;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            intervalInSecondsInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                                            loadBalancerProbeInstance.setIntervalInSeconds(intervalInSecondsInstance);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "TimeoutInSeconds".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        int timeoutInSecondsInstance;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            timeoutInSecondsInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                                            loadBalancerProbeInstance.setTimeoutInSeconds(timeoutInSecondsInstance);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String protocolInstance3;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    protocolInstance3 = xmlPullParser.getText();
                                                                                                    inputEndpointInstance.setProtocol(protocolInstance3);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Vip".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                InetAddress vipInstance2;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    vipInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                                                                    inputEndpointInstance.setVirtualIPAddress(vipInstance2);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "EnableDirectServerReturn".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                boolean enableDirectServerReturnInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    enableDirectServerReturnInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                                                                    inputEndpointInstance.setEnableDirectServerReturn(enableDirectServerReturnInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "LoadBalancerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String loadBalancerNameInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    loadBalancerNameInstance = xmlPullParser.getText();
                                                                                                    inputEndpointInstance.setLoadBalancerName(loadBalancerNameInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "EndpointAcl".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                EndpointAcl endpointAclInstance;
                                                                                                if (inputEndpointInstance.getEndpointAcl() == null) {
                                                                                                    endpointAclInstance = new EndpointAcl();
                                                                                                    inputEndpointInstance.setEndpointAcl(endpointAclInstance);
                                                                                                } else {
                                                                                                    endpointAclInstance = inputEndpointInstance.getEndpointAcl();
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Rules".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        if (eventType == XmlPullParser.START_TAG && "Rule".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                            AccessControlListRule ruleInstance;
                                                                                                            ruleInstance = new AccessControlListRule();
                                                                                                            endpointAclInstance.getRules().add(ruleInstance);
                                                                                                            
                                                                                                            while ((eventType == XmlPullParser.END_TAG && "Rule".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                if (eventType == XmlPullParser.START_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Order".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                        int orderInstance;
                                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                                            orderInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                                                            ruleInstance.setOrder(orderInstance);
                                                                                                                        }
                                                                                                                        
                                                                                                                        eventType = xmlPullParser.next();
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                if (eventType == XmlPullParser.START_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Action".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                        String actionInstance;
                                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                                            actionInstance = xmlPullParser.getText();
                                                                                                                            ruleInstance.setAction(actionInstance);
                                                                                                                        }
                                                                                                                        
                                                                                                                        eventType = xmlPullParser.next();
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                if (eventType == XmlPullParser.START_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                                    while ((eventType == XmlPullParser.END_TAG && "RemoteSubnet".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                        String remoteSubnetInstance;
                                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                                            remoteSubnetInstance = xmlPullParser.getText();
                                                                                                                            ruleInstance.setRemoteSubnet(remoteSubnetInstance);
                                                                                                                        }
                                                                                                                        
                                                                                                                        eventType = xmlPullParser.next();
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                                        String descriptionInstance;
                                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                                            descriptionInstance = xmlPullParser.getText();
                                                                                                                            ruleInstance.setDescription(descriptionInstance);
                                                                                                                        }
                                                                                                                        
                                                                                                                        eventType = xmlPullParser.next();
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                eventType = xmlPullParser.next();
                                                                                                            }
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                    
                                                                                                    eventType = xmlPullParser.next();
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "SubnetNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    configurationSetInstance.getSubnetNames().add(xmlPullParser.getText());
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "StaticVirtualNetworkIPAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String staticVirtualNetworkIPAddressInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    staticVirtualNetworkIPAddressInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setStaticVirtualNetworkIPAddress(staticVirtualNetworkIPAddressInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "PublicIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                if (eventType == XmlPullParser.START_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    ConfigurationSet.PublicIP publicIPInstance2;
                                                                                    publicIPInstance2 = new ConfigurationSet.PublicIP();
                                                                                    configurationSetInstance.getPublicIPs().add(publicIPInstance2);
                                                                                    
                                                                                    while ((eventType == XmlPullParser.END_TAG && "PublicIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String nameInstance7;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    nameInstance7 = xmlPullParser.getText();
                                                                                                    publicIPInstance2.setName(nameInstance7);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "ComputerName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String computerNameInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    computerNameInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setComputerName(computerNameInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "AdminPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String adminPasswordInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    adminPasswordInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setAdminPassword(adminPasswordInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "ResetPasswordOnFirstLogon".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                boolean resetPasswordOnFirstLogonInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    resetPasswordOnFirstLogonInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                                                    configurationSetInstance.setResetPasswordOnFirstLogon(resetPasswordOnFirstLogonInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "EnableAutomaticUpdates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                boolean enableAutomaticUpdatesInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    enableAutomaticUpdatesInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                                                    configurationSetInstance.setEnableAutomaticUpdates(enableAutomaticUpdatesInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "TimeZone".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String timeZoneInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    timeZoneInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setTimeZone(timeZoneInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "DomainJoin".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                DomainJoinSettings domainJoinInstance;
                                                                                if (configurationSetInstance.getDomainJoin() == null) {
                                                                                    domainJoinInstance = new DomainJoinSettings();
                                                                                    configurationSetInstance.setDomainJoin(domainJoinInstance);
                                                                                } else {
                                                                                    domainJoinInstance = configurationSetInstance.getDomainJoin();
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Credentials".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        DomainJoinCredentials credentialsInstance;
                                                                                        if (domainJoinInstance.getCredentials() == null) {
                                                                                            credentialsInstance = new DomainJoinCredentials();
                                                                                            domainJoinInstance.setCredentials(credentialsInstance);
                                                                                        } else {
                                                                                            credentialsInstance = domainJoinInstance.getCredentials();
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Domain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String domainInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    domainInstance = xmlPullParser.getText();
                                                                                                    credentialsInstance.setDomain(domainInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Username".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String usernameInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    usernameInstance = xmlPullParser.getText();
                                                                                                    credentialsInstance.setUserName(usernameInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String passwordInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    passwordInstance = xmlPullParser.getText();
                                                                                                    credentialsInstance.setPassword(passwordInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "JoinDomain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String joinDomainInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            joinDomainInstance = xmlPullParser.getText();
                                                                                            domainJoinInstance.setDomainToJoin(joinDomainInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "MachineObjectOU".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        String machineObjectOUInstance;
                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                            machineObjectOUInstance = xmlPullParser.getText();
                                                                                            domainJoinInstance.setLdapMachineObjectOU(machineObjectOUInstance);
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Provisioning".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        DomainJoinProvisioning provisioningInstance;
                                                                                        if (domainJoinInstance.getProvisioning() == null) {
                                                                                            provisioningInstance = new DomainJoinProvisioning();
                                                                                            domainJoinInstance.setProvisioning(provisioningInstance);
                                                                                        } else {
                                                                                            provisioningInstance = domainJoinInstance.getProvisioning();
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "AccountData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String accountDataInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    accountDataInstance = xmlPullParser.getText();
                                                                                                    provisioningInstance.setAccountData(accountDataInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "StoredCertificateSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                if (eventType == XmlPullParser.START_TAG && "CertificateSetting".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    StoredCertificateSettings certificateSettingInstance;
                                                                                    certificateSettingInstance = new StoredCertificateSettings();
                                                                                    configurationSetInstance.getStoredCertificateSettings().add(certificateSettingInstance);
                                                                                    
                                                                                    while ((eventType == XmlPullParser.END_TAG && "CertificateSetting".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "StoreLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "StoreName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String storeNameInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    storeNameInstance = xmlPullParser.getText();
                                                                                                    certificateSettingInstance.setStoreName(storeNameInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String thumbprintInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    thumbprintInstance = xmlPullParser.getText();
                                                                                                    certificateSettingInstance.setThumbprint(thumbprintInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "WinRM".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                WindowsRemoteManagementSettings winRMInstance;
                                                                                if (configurationSetInstance.getWindowsRemoteManagement() == null) {
                                                                                    winRMInstance = new WindowsRemoteManagementSettings();
                                                                                    configurationSetInstance.setWindowsRemoteManagement(winRMInstance);
                                                                                } else {
                                                                                    winRMInstance = configurationSetInstance.getWindowsRemoteManagement();
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "Listeners".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "Listener".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            WindowsRemoteManagementListener listenerInstance;
                                                                                            listenerInstance = new WindowsRemoteManagementListener();
                                                                                            winRMInstance.getListeners().add(listenerInstance);
                                                                                            
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Listener".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                if (eventType == XmlPullParser.START_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Protocol".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        VirtualMachineWindowsRemoteManagementListenerType protocolInstance4;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            protocolInstance4 = VirtualMachineWindowsRemoteManagementListenerType.valueOf(xmlPullParser.getText());
                                                                                                            listenerInstance.setListenerType(protocolInstance4);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "CertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String certificateThumbprintInstance;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            certificateThumbprintInstance = xmlPullParser.getText();
                                                                                                            listenerInstance.setCertificateThumbprint(certificateThumbprintInstance);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "AdminUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String adminUsernameInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    adminUsernameInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setAdminUserName(adminUsernameInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "HostName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String hostNameInstance2;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    hostNameInstance2 = xmlPullParser.getText();
                                                                                    configurationSetInstance.setHostName(hostNameInstance2);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "UserName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String userNameInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    userNameInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setUserName(userNameInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "UserPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String userPasswordInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    userPasswordInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setUserPassword(userPasswordInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "DisableSshPasswordAuthentication".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                boolean disableSshPasswordAuthenticationInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    disableSshPasswordAuthenticationInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                                                    configurationSetInstance.setDisableSshPasswordAuthentication(disableSshPasswordAuthenticationInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "SSH".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                SshSettings sSHInstance;
                                                                                if (configurationSetInstance.getSshSettings() == null) {
                                                                                    sSHInstance = new SshSettings();
                                                                                    configurationSetInstance.setSshSettings(sSHInstance);
                                                                                } else {
                                                                                    sSHInstance = configurationSetInstance.getSshSettings();
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "PublicKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "PublicKey".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            SshSettingPublicKey publicKeyInstance;
                                                                                            publicKeyInstance = new SshSettingPublicKey();
                                                                                            sSHInstance.getPublicKeys().add(publicKeyInstance);
                                                                                            
                                                                                            while ((eventType == XmlPullParser.END_TAG && "PublicKey".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String fingerprintInstance;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            fingerprintInstance = xmlPullParser.getText();
                                                                                                            publicKeyInstance.setFingerprint(fingerprintInstance);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String pathInstance2;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            pathInstance2 = xmlPullParser.getText();
                                                                                                            publicKeyInstance.setPath(pathInstance2);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                                
                                                                                if (eventType == XmlPullParser.START_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    while ((eventType == XmlPullParser.END_TAG && "KeyPairs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "KeyPair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            SshSettingKeyPair keyPairInstance;
                                                                                            keyPairInstance = new SshSettingKeyPair();
                                                                                            sSHInstance.getKeyPairs().add(keyPairInstance);
                                                                                            
                                                                                            while ((eventType == XmlPullParser.END_TAG && "KeyPair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                if (eventType == XmlPullParser.START_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Fingerprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String fingerprintInstance2;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            fingerprintInstance2 = xmlPullParser.getText();
                                                                                                            keyPairInstance.setFingerprint(fingerprintInstance2);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                if (eventType == XmlPullParser.START_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                                    while ((eventType == XmlPullParser.END_TAG && "Path".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                        String pathInstance3;
                                                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                                                            pathInstance3 = xmlPullParser.getText();
                                                                                                            keyPairInstance.setPath(pathInstance3);
                                                                                                        }
                                                                                                        
                                                                                                        eventType = xmlPullParser.next();
                                                                                                    }
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                    
                                                                                    eventType = xmlPullParser.next();
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "CustomData".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String customDataInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    customDataInstance = xmlPullParser.getText();
                                                                                    configurationSetInstance.setCustomData(customDataInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ResourceExtensionReferences".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionReferences".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "ResourceExtensionReference".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    ResourceExtensionReference resourceExtensionReferenceInstance;
                                                                    resourceExtensionReferenceInstance = new ResourceExtensionReference();
                                                                    roleInstance.getResourceExtensionReferences().add(resourceExtensionReferenceInstance);
                                                                    
                                                                    while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionReference".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.START_TAG && "ReferenceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "ReferenceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String referenceNameInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    referenceNameInstance = xmlPullParser.getText();
                                                                                    resourceExtensionReferenceInstance.setReferenceName(referenceNameInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Publisher".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Publisher".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String publisherInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    publisherInstance = xmlPullParser.getText();
                                                                                    resourceExtensionReferenceInstance.setPublisher(publisherInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String nameInstance8;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    nameInstance8 = xmlPullParser.getText();
                                                                                    resourceExtensionReferenceInstance.setName(nameInstance8);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String versionInstance2;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    versionInstance2 = xmlPullParser.getText();
                                                                                    resourceExtensionReferenceInstance.setVersion(versionInstance2);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "ResourceExtensionParameterValues".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionParameterValues".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                if (eventType == XmlPullParser.START_TAG && "ResourceExtensionParameterValue".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                    ResourceExtensionParameterValue resourceExtensionParameterValueInstance;
                                                                                    resourceExtensionParameterValueInstance = new ResourceExtensionParameterValue();
                                                                                    resourceExtensionReferenceInstance.getResourceExtensionParameterValues().add(resourceExtensionParameterValueInstance);
                                                                                    
                                                                                    while ((eventType == XmlPullParser.END_TAG && "ResourceExtensionParameterValue".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                        if (eventType == XmlPullParser.START_TAG && "Key".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Key".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String keyInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    keyInstance = xmlPullParser.getText();
                                                                                                    resourceExtensionParameterValueInstance.setKey(keyInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String valueInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    valueInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                                                                                    resourceExtensionParameterValueInstance.setValue(valueInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                                            while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                                String typeInstance;
                                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                                    typeInstance = xmlPullParser.getText();
                                                                                                    resourceExtensionParameterValueInstance.setType(typeInstance);
                                                                                                }
                                                                                                
                                                                                                eventType = xmlPullParser.next();
                                                                                            }
                                                                                        }
                                                                                        
                                                                                        eventType = xmlPullParser.next();
                                                                                    }
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                            
                                                                            eventType = xmlPullParser.next();
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String stateInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    stateInstance = xmlPullParser.getText();
                                                                                    resourceExtensionReferenceInstance.setState(stateInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "VMImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "VMImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String vMImageNameInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    vMImageNameInstance = xmlPullParser.getText();
                                                                    roleInstance.setVMImageName(vMImageNameInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "MediaLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "MediaLocation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                URI mediaLocationInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    mediaLocationInstance = new URI(xmlPullParser.getText());
                                                                    roleInstance.setMediaLocation(mediaLocationInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "AvailabilitySetName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String availabilitySetNameInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    availabilitySetNameInstance = xmlPullParser.getText();
                                                                    roleInstance.setAvailabilitySetName(availabilitySetNameInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "DataVirtualHardDisks".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "DataVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    DataVirtualHardDisk dataVirtualHardDiskInstance;
                                                                    dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                                                    roleInstance.getDataVirtualHardDisks().add(dataVirtualHardDiskInstance);
                                                                    
                                                                    while ((eventType == XmlPullParser.END_TAG && "DataVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String hostCachingInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    hostCachingInstance = xmlPullParser.getText();
                                                                                    dataVirtualHardDiskInstance.setHostCaching(hostCachingInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String diskLabelInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    diskLabelInstance = xmlPullParser.getText();
                                                                                    dataVirtualHardDiskInstance.setLabel(diskLabelInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                String diskNameInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    diskNameInstance = xmlPullParser.getText();
                                                                                    dataVirtualHardDiskInstance.setName(diskNameInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "Lun".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                int lunInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    lunInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                    dataVirtualHardDiskInstance.setLogicalUnitNumber(lunInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "LogicalDiskSizeInGB".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                int logicalDiskSizeInGBInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    logicalDiskSizeInGBInstance = Integer.parseInt(xmlPullParser.getText());
                                                                                    dataVirtualHardDiskInstance.setLogicalDiskSizeInGB(logicalDiskSizeInGBInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                URI mediaLinkInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    mediaLinkInstance = new URI(xmlPullParser.getText());
                                                                                    dataVirtualHardDiskInstance.setMediaLink(mediaLinkInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        if (eventType == XmlPullParser.START_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                            while ((eventType == XmlPullParser.END_TAG && "SourceMediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                                URI sourceMediaLinkInstance;
                                                                                if (eventType == XmlPullParser.TEXT) {
                                                                                    sourceMediaLinkInstance = new URI(xmlPullParser.getText());
                                                                                    dataVirtualHardDiskInstance.setSourceMediaLink(sourceMediaLinkInstance);
                                                                                }
                                                                                
                                                                                eventType = xmlPullParser.next();
                                                                            }
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String labelInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    labelInstance2 = xmlPullParser.getText();
                                                                    roleInstance.setLabel(labelInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "OSVirtualHardDisk".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                OSVirtualHardDisk oSVirtualHardDiskInstance;
                                                                if (roleInstance.getOSVirtualHardDisk() == null) {
                                                                    oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                                                    roleInstance.setOSVirtualHardDisk(oSVirtualHardDiskInstance);
                                                                } else {
                                                                    oSVirtualHardDiskInstance = roleInstance.getOSVirtualHardDisk();
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "HostCaching".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String hostCachingInstance2;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            hostCachingInstance2 = xmlPullParser.getText();
                                                                            oSVirtualHardDiskInstance.setHostCaching(hostCachingInstance2);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "DiskLabel".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String diskLabelInstance2;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            diskLabelInstance2 = xmlPullParser.getText();
                                                                            oSVirtualHardDiskInstance.setLabel(diskLabelInstance2);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "DiskName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String diskNameInstance2;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            diskNameInstance2 = xmlPullParser.getText();
                                                                            oSVirtualHardDiskInstance.setName(diskNameInstance2);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "MediaLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        URI mediaLinkInstance2;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            mediaLinkInstance2 = new URI(xmlPullParser.getText());
                                                                            oSVirtualHardDiskInstance.setMediaLink(mediaLinkInstance2);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "SourceImageName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String sourceImageNameInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            sourceImageNameInstance = xmlPullParser.getText();
                                                                            oSVirtualHardDiskInstance.setSourceImageName(sourceImageNameInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "OS".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String osInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            osInstance = xmlPullParser.getText();
                                                                            oSVirtualHardDiskInstance.setOperatingSystem(osInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "RoleSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String roleSizeInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    roleSizeInstance = xmlPullParser.getText();
                                                                    roleInstance.setRoleSize(roleSizeInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "DefaultWinRmCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String defaultWinRmCertificateThumbprintInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    defaultWinRmCertificateThumbprintInstance = xmlPullParser.getText();
                                                                    roleInstance.setDefaultWinRmCertificateThumbprint(defaultWinRmCertificateThumbprintInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "ProvisionGuestAgent".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "ProvisionGuestAgent".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                boolean provisionGuestAgentInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    provisionGuestAgentInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                                    roleInstance.setProvisionGuestAgent(provisionGuestAgentInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SdkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SdkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String sdkVersionInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    sdkVersionInstance = xmlPullParser.getText();
                                                    deploymentInstance.setSdkVersion(sdkVersionInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Locked".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Locked".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean lockedInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    lockedInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                    deploymentInstance.setLocked(lockedInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "RollbackAllowed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "RollbackAllowed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean rollbackAllowedInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    rollbackAllowedInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                    deploymentInstance.setRollbackAllowed(rollbackAllowedInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar createdTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    createdTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    deploymentInstance.setCreatedTime(createdTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String lastModifiedTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    lastModifiedTimeInstance = xmlPullParser.getText();
                                                    deploymentInstance.setLastModifiedTime(lastModifiedTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "VirtualNetworkName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "VirtualNetworkName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String virtualNetworkNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    virtualNetworkNameInstance = xmlPullParser.getText();
                                                    deploymentInstance.setVirtualNetworkName(virtualNetworkNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String key = null;
                                                        String value = null;
                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    key = xmlPullParser.getText();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    value = xmlPullParser.getText();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        if (key != null && value != null) {
                                                            deploymentInstance.getExtendedProperties().put(key, xmlPullParser.getText());
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "PersistentVMDowntime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "PersistentVMDowntime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                PersistentVMDowntime persistentVMDowntimeInstance;
                                                if (deploymentInstance.getPersistentVMDowntime() == null) {
                                                    persistentVMDowntimeInstance = new PersistentVMDowntime();
                                                    deploymentInstance.setPersistentVMDowntime(persistentVMDowntimeInstance);
                                                } else {
                                                    persistentVMDowntimeInstance = deploymentInstance.getPersistentVMDowntime();
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        Calendar startTimeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            startTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                            persistentVMDowntimeInstance.setStartTime(startTimeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        Calendar endTimeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            endTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                            persistentVMDowntimeInstance.setEndTime(endTimeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String statusInstance6;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            statusInstance6 = xmlPullParser.getText();
                                                            persistentVMDowntimeInstance.setStatus(statusInstance6);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "VirtualIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "VirtualIPs".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.START_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    VirtualIPAddress virtualIPInstance;
                                                    virtualIPInstance = new VirtualIPAddress();
                                                    deploymentInstance.getVirtualIPAddresses().add(virtualIPInstance);
                                                    
                                                    while ((eventType == XmlPullParser.END_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                InetAddress addressInstance2;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    addressInstance2 = InetAddress.getByName(xmlPullParser.getText());
                                                                    virtualIPInstance.setAddress(addressInstance2);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                String nameInstance9;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    nameInstance9 = xmlPullParser.getText();
                                                                    virtualIPInstance.setName(nameInstance9);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        if (eventType == XmlPullParser.START_TAG && "IsDnsProgrammed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "IsDnsProgrammed".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                boolean isDnsProgrammedInstance;
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    isDnsProgrammedInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                                    virtualIPInstance.setIsDnsProgrammed(isDnsProgrammedInstance);
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Dns".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Dns".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                DnsSettings dnsInstance;
                                                if (deploymentInstance.getDnsSettings() == null) {
                                                    dnsInstance = new DnsSettings();
                                                    deploymentInstance.setDnsSettings(dnsInstance);
                                                } else {
                                                    dnsInstance = deploymentInstance.getDnsSettings();
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "DnsServer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            DnsServer dnsServerInstance;
                                                            dnsServerInstance = new DnsServer();
                                                            dnsInstance.getDnsServers().add(dnsServerInstance);
                                                            
                                                            while ((eventType == XmlPullParser.END_TAG && "DnsServer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String nameInstance10;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            nameInstance10 = xmlPullParser.getText();
                                                                            dnsServerInstance.setName(nameInstance10);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Address".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        InetAddress addressInstance3;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            addressInstance3 = InetAddress.getByName(xmlPullParser.getText());
                                                                            dnsServerInstance.setAddress(addressInstance3);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                            
                            eventType = xmlPullParser.next();
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI urlInstance2;
                                if (eventType == XmlPullParser.TEXT) {
                                    urlInstance2 = new URI(xmlPullParser.getText());
                                    result.setUri(urlInstance2);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String serviceNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    serviceNameInstance = xmlPullParser.getText();
                                    result.setServiceName(serviceNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostedServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostedServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                HostedServiceProperties hostedServicePropertiesInstance;
                                if (result.getProperties() == null) {
                                    hostedServicePropertiesInstance = new HostedServiceProperties();
                                    result.setProperties(hostedServicePropertiesInstance);
                                } else {
                                    hostedServicePropertiesInstance = result.getProperties();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String descriptionInstance2;
                                        if (eventType == XmlPullParser.TEXT) {
                                            descriptionInstance2 = xmlPullParser.getText();
                                            hostedServicePropertiesInstance.setDescription(descriptionInstance2);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String affinityGroupInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            affinityGroupInstance = xmlPullParser.getText();
                                            hostedServicePropertiesInstance.setAffinityGroup(affinityGroupInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String locationInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            locationInstance = xmlPullParser.getText();
                                            hostedServicePropertiesInstance.setLocation(locationInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String labelInstance3;
                                        if (eventType == XmlPullParser.TEXT) {
                                            labelInstance3 = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            hostedServicePropertiesInstance.setLabel(labelInstance3);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        HostedServiceStatus statusInstance7;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusInstance7 = HostedServiceStatus.valueOf(xmlPullParser.getText());
                                            hostedServicePropertiesInstance.setStatus(statusInstance7);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "DateCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DateCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar dateCreatedInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            dateCreatedInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            hostedServicePropertiesInstance.setDateCreated(dateCreatedInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "DateLastModified".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "DateLastModified".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar dateLastModifiedInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            dateLastModifiedInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            hostedServicePropertiesInstance.setDateLastModified(dateLastModifiedInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key2 = null;
                                                String value2 = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key2 != null && value2 != null) {
                                                    hostedServicePropertiesInstance.getExtendedProperties().put(key2, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ComputeCapabilities".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ComputeCapabilities".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ComputeCapabilities computeCapabilitiesInstance;
                                if (result.getComputeCapabilities() == null) {
                                    computeCapabilitiesInstance = new ComputeCapabilities();
                                    result.setComputeCapabilities(computeCapabilitiesInstance);
                                } else {
                                    computeCapabilitiesInstance = result.getComputeCapabilities();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "VirtualMachinesRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "VirtualMachinesRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.TEXT) {
                                            computeCapabilitiesInstance.getVirtualMachinesRoleSizes().add(xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "WebWorkerRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "WebWorkerRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.TEXT) {
                                            computeCapabilitiesInstance.getWebWorkerRoleSizes().add(xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Get Extension operation retrieves information about a specified
    * extension that was added to a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169557.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param extensionId Required. The identifier that was assigned to the
    * extension when it was added to the cloud service
    * @return The Get Extension operation response.
    */
    @Override
    public Future<HostedServiceGetExtensionResponse> getExtensionAsync(final String serviceName, final String extensionId) {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceGetExtensionResponse>() { 
            @Override
            public HostedServiceGetExtensionResponse call() throws Exception {
                return getExtension(serviceName, extensionId);
            }
         });
    }
    
    /**
    * The Get Extension operation retrieves information about a specified
    * extension that was added to a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169557.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param extensionId Required. The identifier that was assigned to the
    * extension when it was added to the cloud service
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The Get Extension operation response.
    */
    @Override
    public HostedServiceGetExtensionResponse getExtension(String serviceName, String extensionId) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (extensionId == null) {
            throw new NullPointerException("extensionId");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("extensionId", extensionId);
            CloudTracing.enter(invocationId, this, "getExtensionAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/extensions/" + extensionId.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceGetExtensionResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceGetExtensionResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String providerNameSpaceInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    providerNameSpaceInstance = xmlPullParser.getText();
                                    result.setProviderNamespace(providerNameSpaceInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String typeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    typeInstance = xmlPullParser.getText();
                                    result.setType(typeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String idInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    idInstance = xmlPullParser.getText();
                                    result.setId(idInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String versionInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    versionInstance = xmlPullParser.getText();
                                    result.setVersion(versionInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String thumbprintInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    thumbprintInstance = xmlPullParser.getText();
                                    result.setThumbprint(thumbprintInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String thumbprintAlgorithmInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    thumbprintAlgorithmInstance = xmlPullParser.getText();
                                    result.setThumbprintAlgorithm(thumbprintAlgorithmInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PublicConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PublicConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String publicConfigurationInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    publicConfigurationInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                    result.setPublicConfiguration(publicConfigurationInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The List Hosted Services operation lists the cloud services available
    * under the current subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460781.aspx for
    * more information)
    *
    * @return The List Hosted Service operation response.
    */
    @Override
    public Future<HostedServiceListResponse> listAsync() {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceListResponse>() { 
            @Override
            public HostedServiceListResponse call() throws Exception {
                return list();
            }
         });
    }
    
    /**
    * The List Hosted Services operation lists the cloud services available
    * under the current subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460781.aspx for
    * more information)
    *
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The List Hosted Service operation response.
    */
    @Override
    public HostedServiceListResponse list() throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceListResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceListResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "HostedServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "HostedServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "HostedService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            HostedServiceListResponse.HostedService hostedServiceInstance;
                            hostedServiceInstance = new HostedServiceListResponse.HostedService();
                            result.getHostedServices().add(hostedServiceInstance);
                            
                            while ((eventType == XmlPullParser.END_TAG && "HostedService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI urlInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            urlInstance = new URI(xmlPullParser.getText());
                                            hostedServiceInstance.setUri(urlInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String serviceNameInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            serviceNameInstance = xmlPullParser.getText();
                                            hostedServiceInstance.setServiceName(serviceNameInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "HostedServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "HostedServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        HostedServiceProperties hostedServicePropertiesInstance;
                                        if (hostedServiceInstance.getProperties() == null) {
                                            hostedServicePropertiesInstance = new HostedServiceProperties();
                                            hostedServiceInstance.setProperties(hostedServicePropertiesInstance);
                                        } else {
                                            hostedServicePropertiesInstance = hostedServiceInstance.getProperties();
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String descriptionInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    descriptionInstance = xmlPullParser.getText();
                                                    hostedServicePropertiesInstance.setDescription(descriptionInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String affinityGroupInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    affinityGroupInstance = xmlPullParser.getText();
                                                    hostedServicePropertiesInstance.setAffinityGroup(affinityGroupInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String locationInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    locationInstance = xmlPullParser.getText();
                                                    hostedServicePropertiesInstance.setLocation(locationInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String labelInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    labelInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                                    hostedServicePropertiesInstance.setLabel(labelInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                HostedServiceStatus statusInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    statusInstance = HostedServiceStatus.valueOf(xmlPullParser.getText());
                                                    hostedServicePropertiesInstance.setStatus(statusInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "DateCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "DateCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar dateCreatedInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    dateCreatedInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    hostedServicePropertiesInstance.setDateCreated(dateCreatedInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "DateLastModified".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "DateLastModified".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar dateLastModifiedInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    dateLastModifiedInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    hostedServicePropertiesInstance.setDateLastModified(dateLastModifiedInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String key = null;
                                                        String value = null;
                                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    key = xmlPullParser.getText();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.TEXT) {
                                                                    value = xmlPullParser.getText();
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        if (key != null && value != null) {
                                                            hostedServicePropertiesInstance.getExtendedProperties().put(key, xmlPullParser.getText());
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ComputeCapabilities".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ComputeCapabilities".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        ComputeCapabilities computeCapabilitiesInstance;
                                        if (hostedServiceInstance.getComputeCapabilities() == null) {
                                            computeCapabilitiesInstance = new ComputeCapabilities();
                                            hostedServiceInstance.setComputeCapabilities(computeCapabilitiesInstance);
                                        } else {
                                            computeCapabilitiesInstance = hostedServiceInstance.getComputeCapabilities();
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "VirtualMachinesRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "VirtualMachinesRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    computeCapabilitiesInstance.getVirtualMachinesRoleSizes().add(xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "WebWorkerRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "WebWorkerRoleSizes".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    computeCapabilitiesInstance.getWebWorkerRoleSizes().add(xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                    
                    eventType = xmlPullParser.next();
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The List Available Extensions operation lists the extensions that are
    * available to add to your cloud service. In Windows Azure, a process can
    * run as an extension of a cloud service. For example, Remote Desktop
    * Access or the Azure Diagnostics Agent can run as extensions to the cloud
    * service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx for
    * more information)
    *
    * @return The List Available Extensions operation response.
    */
    @Override
    public Future<HostedServiceListAvailableExtensionsResponse> listAvailableExtensionsAsync() {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceListAvailableExtensionsResponse>() { 
            @Override
            public HostedServiceListAvailableExtensionsResponse call() throws Exception {
                return listAvailableExtensions();
            }
         });
    }
    
    /**
    * The List Available Extensions operation lists the extensions that are
    * available to add to your cloud service. In Windows Azure, a process can
    * run as an extension of a cloud service. For example, Remote Desktop
    * Access or the Azure Diagnostics Agent can run as extensions to the cloud
    * service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx for
    * more information)
    *
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The List Available Extensions operation response.
    */
    @Override
    public HostedServiceListAvailableExtensionsResponse listAvailableExtensions() throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            CloudTracing.enter(invocationId, this, "listAvailableExtensionsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/extensions";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceListAvailableExtensionsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceListAvailableExtensionsResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ExtensionImages".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ExtensionImages".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "ExtensionImage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            HostedServiceListAvailableExtensionsResponse.ExtensionImage extensionImageInstance;
                            extensionImageInstance = new HostedServiceListAvailableExtensionsResponse.ExtensionImage();
                            result.getExtensionImages().add(extensionImageInstance);
                            
                            while ((eventType == XmlPullParser.END_TAG && "ExtensionImage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String providerNameSpaceInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            providerNameSpaceInstance = xmlPullParser.getText();
                                            extensionImageInstance.setProviderNamespace(providerNameSpaceInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String typeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            typeInstance = xmlPullParser.getText();
                                            extensionImageInstance.setType(typeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String labelInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            labelInstance = xmlPullParser.getText();
                                            extensionImageInstance.setLabel(labelInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String versionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            versionInstance = xmlPullParser.getText();
                                            extensionImageInstance.setVersion(versionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String descriptionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            descriptionInstance = xmlPullParser.getText();
                                            extensionImageInstance.setDescription(descriptionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String thumbprintAlgorithmInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            thumbprintAlgorithmInstance = xmlPullParser.getText();
                                            extensionImageInstance.setThumbprintAlgorithm(thumbprintAlgorithmInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "HostingResources".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "HostingResources".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String hostingResourcesInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            hostingResourcesInstance = xmlPullParser.getText();
                                            extensionImageInstance.setHostingResources(hostingResourcesInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "PublicConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "PublicConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String publicConfigurationSchemaInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            publicConfigurationSchemaInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            extensionImageInstance.setPublicConfigurationSchema(publicConfigurationSchemaInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "PrivateConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "PrivateConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String privateConfigurationSchemaInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            privateConfigurationSchemaInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            extensionImageInstance.setPrivateConfigurationSchema(privateConfigurationSchemaInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "BlockRoleUponFailure".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "BlockRoleUponFailure".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        boolean blockRoleUponFailureInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            blockRoleUponFailureInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                            extensionImageInstance.setBlockRoleUponFailure(blockRoleUponFailureInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "SampleConfig".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "SampleConfig".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String sampleConfigInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            sampleConfigInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            extensionImageInstance.setSampleConfig(sampleConfigInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ReplicationCompleted".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ReplicationCompleted".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        boolean replicationCompletedInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            replicationCompletedInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                            extensionImageInstance.setReplicationCompleted(replicationCompletedInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Eula".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Eula".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI eulaInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            eulaInstance = new URI(xmlPullParser.getText());
                                            extensionImageInstance.setEula(eulaInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "PrivacyUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "PrivacyUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI privacyUriInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            privacyUriInstance = new URI(xmlPullParser.getText());
                                            extensionImageInstance.setPrivacyUri(privacyUriInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "HomepageUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "HomepageUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI homepageUriInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            homepageUriInstance = new URI(xmlPullParser.getText());
                                            extensionImageInstance.setHomepageUri(homepageUriInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "IsJsonExtension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "IsJsonExtension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        boolean isJsonExtensionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            isJsonExtensionInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                            extensionImageInstance.setIsJsonExtension(isJsonExtensionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                    
                    eventType = xmlPullParser.next();
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The List Extensions operation lists all of the extensions that were added
    * to a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169561.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @return The List Extensions operation response.
    */
    @Override
    public Future<HostedServiceListExtensionsResponse> listExtensionsAsync(final String serviceName) {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceListExtensionsResponse>() { 
            @Override
            public HostedServiceListExtensionsResponse call() throws Exception {
                return listExtensions(serviceName);
            }
         });
    }
    
    /**
    * The List Extensions operation lists all of the extensions that were added
    * to a cloud service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn169561.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The List Extensions operation response.
    */
    @Override
    public HostedServiceListExtensionsResponse listExtensions(String serviceName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            CloudTracing.enter(invocationId, this, "listExtensionsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim() + "/extensions";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceListExtensionsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceListExtensionsResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Extensions".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Extensions".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            HostedServiceListExtensionsResponse.Extension extensionInstance;
                            extensionInstance = new HostedServiceListExtensionsResponse.Extension();
                            result.getExtensions().add(extensionInstance);
                            
                            while ((eventType == XmlPullParser.END_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String providerNameSpaceInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            providerNameSpaceInstance = xmlPullParser.getText();
                                            extensionInstance.setProviderNamespace(providerNameSpaceInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String typeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            typeInstance = xmlPullParser.getText();
                                            extensionInstance.setType(typeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String idInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            idInstance = xmlPullParser.getText();
                                            extensionInstance.setId(idInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String versionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            versionInstance = xmlPullParser.getText();
                                            extensionInstance.setVersion(versionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String thumbprintInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            thumbprintInstance = xmlPullParser.getText();
                                            extensionInstance.setThumbprint(thumbprintInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String thumbprintAlgorithmInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            thumbprintAlgorithmInstance = xmlPullParser.getText();
                                            extensionInstance.setThumbprintAlgorithm(thumbprintAlgorithmInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "PublicConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "PublicConfiguration".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String publicConfigurationInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            publicConfigurationInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            extensionInstance.setPublicConfiguration(publicConfigurationInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                    
                    eventType = xmlPullParser.next();
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The List Extension Versions operation lists the versions of an extension
    * that are available to add to a cloud service. In Azure, a process can
    * run as an extension of a cloud service. For example, Remote Desktop
    * Access or the Azure Diagnostics Agent can run as extensions to the cloud
    * service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn495437.aspx for
    * more information)
    *
    * @param providerNamespace Required. The provider namespace.
    * @param extensionType Required. The extension type name.
    * @return The List Available Extensions operation response.
    */
    @Override
    public Future<HostedServiceListAvailableExtensionsResponse> listExtensionVersionsAsync(final String providerNamespace, final String extensionType) {
        return this.getClient().getExecutorService().submit(new Callable<HostedServiceListAvailableExtensionsResponse>() { 
            @Override
            public HostedServiceListAvailableExtensionsResponse call() throws Exception {
                return listExtensionVersions(providerNamespace, extensionType);
            }
         });
    }
    
    /**
    * The List Extension Versions operation lists the versions of an extension
    * that are available to add to a cloud service. In Azure, a process can
    * run as an extension of a cloud service. For example, Remote Desktop
    * Access or the Azure Diagnostics Agent can run as extensions to the cloud
    * service.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn495437.aspx for
    * more information)
    *
    * @param providerNamespace Required. The provider namespace.
    * @param extensionType Required. The extension type name.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The List Available Extensions operation response.
    */
    @Override
    public HostedServiceListAvailableExtensionsResponse listExtensionVersions(String providerNamespace, String extensionType) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        if (providerNamespace == null) {
            throw new NullPointerException("providerNamespace");
        }
        if (extensionType == null) {
            throw new NullPointerException("extensionType");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("providerNamespace", providerNamespace);
            tracingParameters.put("extensionType", extensionType);
            CloudTracing.enter(invocationId, this, "listExtensionVersionsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/extensions/" + providerNamespace.trim() + "/" + extensionType.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HostedServiceListAvailableExtensionsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new HostedServiceListAvailableExtensionsResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ExtensionImages".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ExtensionImages".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "ExtensionImage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            HostedServiceListAvailableExtensionsResponse.ExtensionImage extensionImageInstance;
                            extensionImageInstance = new HostedServiceListAvailableExtensionsResponse.ExtensionImage();
                            result.getExtensionImages().add(extensionImageInstance);
                            
                            while ((eventType == XmlPullParser.END_TAG && "ExtensionImage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ProviderNameSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String providerNameSpaceInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            providerNameSpaceInstance = xmlPullParser.getText();
                                            extensionImageInstance.setProviderNamespace(providerNameSpaceInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String typeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            typeInstance = xmlPullParser.getText();
                                            extensionImageInstance.setType(typeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String labelInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            labelInstance = xmlPullParser.getText();
                                            extensionImageInstance.setLabel(labelInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Version".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String versionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            versionInstance = xmlPullParser.getText();
                                            extensionImageInstance.setVersion(versionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String descriptionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            descriptionInstance = xmlPullParser.getText();
                                            extensionImageInstance.setDescription(descriptionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ThumbprintAlgorithm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String thumbprintAlgorithmInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            thumbprintAlgorithmInstance = xmlPullParser.getText();
                                            extensionImageInstance.setThumbprintAlgorithm(thumbprintAlgorithmInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "HostingResources".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "HostingResources".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String hostingResourcesInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            hostingResourcesInstance = xmlPullParser.getText();
                                            extensionImageInstance.setHostingResources(hostingResourcesInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "PublicConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "PublicConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String publicConfigurationSchemaInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            publicConfigurationSchemaInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            extensionImageInstance.setPublicConfigurationSchema(publicConfigurationSchemaInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "PrivateConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "PrivateConfigurationSchema".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String privateConfigurationSchemaInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            privateConfigurationSchemaInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            extensionImageInstance.setPrivateConfigurationSchema(privateConfigurationSchemaInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "BlockRoleUponFailure".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "BlockRoleUponFailure".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        boolean blockRoleUponFailureInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            blockRoleUponFailureInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                            extensionImageInstance.setBlockRoleUponFailure(blockRoleUponFailureInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "SampleConfig".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "SampleConfig".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String sampleConfigInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            sampleConfigInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            extensionImageInstance.setSampleConfig(sampleConfigInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ReplicationCompleted".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ReplicationCompleted".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        boolean replicationCompletedInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            replicationCompletedInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                            extensionImageInstance.setReplicationCompleted(replicationCompletedInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Eula".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Eula".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI eulaInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            eulaInstance = new URI(xmlPullParser.getText());
                                            extensionImageInstance.setEula(eulaInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "PrivacyUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "PrivacyUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI privacyUriInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            privacyUriInstance = new URI(xmlPullParser.getText());
                                            extensionImageInstance.setPrivacyUri(privacyUriInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "HomepageUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "HomepageUri".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI homepageUriInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            homepageUriInstance = new URI(xmlPullParser.getText());
                                            extensionImageInstance.setHomepageUri(homepageUriInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "IsJsonExtension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "IsJsonExtension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        boolean isJsonExtensionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            isJsonExtensionInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                            extensionImageInstance.setIsJsonExtension(isJsonExtensionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                    
                    eventType = xmlPullParser.next();
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Update Hosted Service operation can update the label or description
    * of a cloud service in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441303.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param parameters Required. Parameters supplied to the Update Hosted
    * Service operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> updateAsync(final String serviceName, final HostedServiceUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return update(serviceName, parameters);
            }
         });
    }
    
    /**
    * The Update Hosted Service operation can update the label or description
    * of a cloud service in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441303.aspx for
    * more information)
    *
    * @param serviceName Required. The name of the cloud service.
    * @param parameters Required. Parameters supplied to the Update Hosted
    * Service operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse update(String serviceName, HostedServiceUpdateParameters parameters) throws InterruptedException, ExecutionException, ServiceException, MalformedURLException, ProtocolException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serviceName == null) {
            throw new NullPointerException("serviceName");
        }
        // TODO: Validate serviceName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getDescription() != null && parameters.getDescription().length() > 1024) {
            throw new IllegalArgumentException("parameters.Description");
        }
        int labelCount = (parameters.getDescription() != null ? 1 : 0) + (parameters.getLabel() != null ? 1 : 0);
        if (labelCount < 1) {
            throw new IllegalArgumentException("Expected at least one of parameters.Description, parameters.Label to be provided.");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serviceName", serviceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/hostedservices/" + serviceName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpdateHostedService");
        
        if (parameters.getLabel() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
            xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        }
        
        if (parameters.getDescription() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.text(parameters.getDescription());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        }
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpdateHostedService");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
}
