apply plugin: "com.android.library"

version = "1.0.0-beta.1"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0-beta.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig file("$rootDir/eng/lint.xml")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }

        debug {
            debuggable true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.annotation:annotation:$annotationsVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonDataFormatXmlVersion"
    implementation "com.jakewharton.threetenabp:threetenabp:$threeTenAbpVersion"
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "javax.xml.stream:stax-api:$staxApiVersion" // https://stackoverflow.com/a/47371517/1473510
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
    testImplementation "junit:junit:$jUnitVersion"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = "sources"
}

// task javadoc(type: Javadoc) {
//     source = android.sourceSets.main.java.srcDirs
//     classpath += project.files(android.getBootClasspath().join(File.pathSeprator))
// }

// task javadocJar(type: Jar, dependsOn: javadoc) {
//     classifier = 'javadoc'
//     from javadoc.destinationDir
// }

artifacts {
    archives sourcesJar
//    archives javadocJar
}