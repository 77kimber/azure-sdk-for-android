// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.android.communication.chat.implementation;

import com.azure.android.communication.chat.implementation.models.AddChatParticipantsOptions;
import com.azure.android.communication.chat.implementation.models.ChatMessage;
import com.azure.android.communication.chat.implementation.models.ChatMessageReadReceipt;
import com.azure.android.communication.chat.implementation.models.ChatMessageReadReceiptsCollection;
import com.azure.android.communication.chat.implementation.models.ChatMessagesCollection;
import com.azure.android.communication.chat.implementation.models.ChatParticipant;
import com.azure.android.communication.chat.implementation.models.ChatParticipantsCollection;
import com.azure.android.communication.chat.implementation.models.CommunicationIdentifierModel;
import com.azure.android.communication.chat.implementation.models.SendChatMessageResult;
import com.azure.android.communication.chat.implementation.models.SendReadReceiptRequest;
import com.azure.android.communication.chat.models.AddChatParticipantsResult;
import com.azure.android.communication.chat.models.CommunicationErrorResponseException;
import com.azure.android.communication.chat.models.SendChatMessageOptions;
import com.azure.android.communication.chat.models.UpdateChatMessageOptions;
import com.azure.android.communication.chat.models.UpdateChatThreadOptions;
import com.azure.android.core.rest.annotation.BodyParam;
import com.azure.android.core.rest.annotation.Delete;
import com.azure.android.core.rest.annotation.ExpectedResponses;
import com.azure.android.core.rest.annotation.Get;
import com.azure.android.core.rest.annotation.HeaderParam;
import com.azure.android.core.rest.annotation.Host;
import com.azure.android.core.rest.annotation.HostParam;
import com.azure.android.core.rest.annotation.Patch;
import com.azure.android.core.rest.annotation.PathParam;
import com.azure.android.core.rest.annotation.Post;
import com.azure.android.core.rest.annotation.QueryParam;
import com.azure.android.core.rest.annotation.ReturnType;
import com.azure.android.core.rest.annotation.ServiceInterface;
import com.azure.android.core.rest.annotation.ServiceMethod;
import com.azure.android.core.rest.annotation.UnexpectedResponseExceptionType;
import com.azure.android.core.rest.annotation.UnexpectedResponseExceptionTypes;
import com.azure.android.core.rest.PagedResponse;
import com.azure.android.core.rest.PagedResponseBase;
import com.azure.android.core.rest.Response;
import com.azure.android.core.rest.RestProxy;
import com.azure.android.core.util.Context;
import com.azure.android.core.rest.Callback;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;

/** An instance of this class provides access to all the operations defined in ChatThreads. */
public final class ChatThreadImpl {
    /** The proxy service used to perform REST calls. */
    private final ChatThreadsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationChatServiceImpl client;

    /**
     * Initializes an instance of ChatThreadsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ChatThreadImpl(AzureCommunicationChatServiceImpl client) {
        this.service =
            RestProxy.create(ChatThreadsService.class, client.getHttpPipeline(), client.getJacksonSerder());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationChatServiceChatThreads to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCh")
    private interface ChatThreadsService {
        @Get("/chat/threads/{chatThreadId}/readReceipts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void listChatReadReceipts(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("skip") Integer skip,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<ChatMessageReadReceiptsCollection>> callback);

        @Post("/chat/threads/{chatThreadId}/readReceipts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void sendChatReadReceipt(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SendReadReceiptRequest sendReadReceiptRequest,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<Void>> callback);

        @Post("/chat/threads/{chatThreadId}/messages")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void sendChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SendChatMessageOptions sendChatMessageRequest,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<SendChatMessageResult>> callback);

        @Get("/chat/threads/{chatThreadId}/messages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void listChatMessages(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("startTime") OffsetDateTime startTime,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<ChatMessagesCollection>> callback);

        @Get("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void getChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<ChatMessage>> callback);

        @Patch("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void updateChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/merge-patch+json") UpdateChatMessageOptions updateChatMessageRequest,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<Void>> callback);

        @Delete("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void deleteChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<Void>> callback);

        @Post("/chat/threads/{chatThreadId}/typing")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void sendTypingNotification(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<Void>> callback);

        @Get("/chat/threads/{chatThreadId}/participants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void listChatParticipants(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("skip") Integer skip,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<ChatParticipantsCollection>> callback);

        @Post("/chat/threads/{chatThreadId}/participants/:remove")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void removeChatParticipant(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CommunicationIdentifierModel participantCommunicationIdentifier,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<Void>> callback);

        @Post("/chat/threads/{chatThreadId}/participants/:add")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void addChatParticipants(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AddChatParticipantsOptions addChatParticipantsRequest,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<AddChatParticipantsResult>> callback);

        @Patch("/chat/threads/{chatThreadId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void updateChatThread(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/merge-patch+json") UpdateChatThreadOptions updateChatThreadRequest,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<Void>> callback);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void listChatReadReceiptsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<ChatMessageReadReceiptsCollection>> callback);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void listChatMessagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<ChatMessagesCollection>> callback);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({
            @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        })
        void listChatParticipantsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context,
            Callback<Response<ChatParticipantsCollection>> callback);
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatReadReceiptsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip,
        Callback<PagedResponse<ChatMessageReadReceipt>> callback) {
        final String accept = "application/json";
        service.listChatReadReceipts(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            Context.NONE,
            new Callback<Response<ChatMessageReadReceiptsCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessageReadReceiptsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatReadReceiptsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context,
        Callback<PagedResponse<ChatMessageReadReceipt>> callback) {
        final String accept = "application/json";
        service.listChatReadReceipts(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            context,
            new Callback<Response<ChatMessageReadReceiptsCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessageReadReceiptsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

//    /**
//     * Gets chat message read receipts for a thread.
//     *
//     * @param chatThreadId Thread id to get the chat message read receipts for.
//     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
//     * @param skip Skips chat message read receipts up to a specified position in response.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return chat message read receipts for a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatMessageReadReceipt> listChatReadReceiptsAsync(
//        String chatThreadId, Integer maxPageSize, Integer skip) {
//        return new PagedFlux<>(
//            () -> listChatReadReceiptsSinglePageAsync(chatThreadId, maxPageSize, skip),
//            nextLink -> listChatReadReceiptsNextSinglePageAsync(nextLink));
//    }
//
//    /**
//     * Gets chat message read receipts for a thread.
//     *
//     * @param chatThreadId Thread id to get the chat message read receipts for.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return chat message read receipts for a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatMessageReadReceipt> listChatReadReceiptsAsync(String chatThreadId) {
//        final Integer maxPageSize = null;
//        final Integer skip = null;
//        return new PagedFlux<>(
//            () -> listChatReadReceiptsSinglePageAsync(chatThreadId, maxPageSize, skip),
//            nextLink -> listChatReadReceiptsNextSinglePageAsync(nextLink));
//    }
//
//    /**
//     * Gets chat message read receipts for a thread.
//     *
//     * @param chatThreadId Thread id to get the chat message read receipts for.
//     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
//     * @param skip Skips chat message read receipts up to a specified position in response.
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return chat message read receipts for a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatMessageReadReceipt> listChatReadReceiptsAsync(
//        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
//        return new PagedFlux<>(
//            () -> listChatReadReceiptsSinglePageAsync(chatThreadId, maxPageSize, skip, context),
//            nextLink -> listChatReadReceiptsNextSinglePageAsync(nextLink, context));
//    }
//
//    /**
//     * Gets chat message read receipts for a thread.
//     *
//     * @param chatThreadId Thread id to get the chat message read receipts for.
//     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
//     * @param skip Skips chat message read receipts up to a specified position in response.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return chat message read receipts for a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatMessageReadReceipt> listChatReadReceipts(
//        String chatThreadId, Integer maxPageSize, Integer skip) {
//        return new PagedIterable<>(listChatReadReceiptsAsync(chatThreadId, maxPageSize, skip));
//    }
//
//    /**
//     * Gets chat message read receipts for a thread.
//     *
//     * @param chatThreadId Thread id to get the chat message read receipts for.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return chat message read receipts for a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatMessageReadReceipt> listChatReadReceipts(String chatThreadId) {
//        final Integer maxPageSize = null;
//        final Integer skip = null;
//        return new PagedIterable<>(listChatReadReceiptsAsync(chatThreadId, maxPageSize, skip));
//    }
//
//    /**
//     * Gets chat message read receipts for a thread.
//     *
//     * @param chatThreadId Thread id to get the chat message read receipts for.
//     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
//     * @param skip Skips chat message read receipts up to a specified position in response.
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return chat message read receipts for a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatMessageReadReceipt> listChatReadReceipts(
//        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
//        return new PagedIterable<>(listChatReadReceiptsAsync(chatThreadId, maxPageSize, skip, context));
//    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceiptWithResponseAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";

        service.sendChatReadReceipt(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendReadReceiptRequest,
            accept,
            Context.NONE,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceiptWithResponseAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, Context context,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.sendChatReadReceipt(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendReadReceiptRequest,
            accept,
            context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceiptAsync(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest,
                                               Callback<Void> callback) {
        sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceiptAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, Context context, Callback<Void> callback) {
        sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        CountDownLatch latch = new CountDownLatch(1);
        final Throwable failure[] = new Throwable[1];
        sendChatReadReceiptAsync(chatThreadId, sendReadReceiptRequest, new Callback<Void>() {
            @Override
            public void onSuccess(Void response) {
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendChatReadReceiptWithResponse(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<Void>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    success.add(response);
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatMessageWithResponseAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest,
        Callback<Response<SendChatMessageResult>> callback) {
        final String accept = "application/json";
        service.sendChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendChatMessageRequest,
            accept,
            Context.NONE,
            new Callback<Response<SendChatMessageResult>>() {
                @Override
                public void onSuccess(Response<SendChatMessageResult> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatMessageWithResponseAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, Context context,
        Callback<Response<SendChatMessageResult>> callback) {
        final String accept = "application/json";
        service.sendChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendChatMessageRequest,
            accept,
            context,
            new Callback<Response<SendChatMessageResult>>() {
                @Override
                public void onSuccess(Response<SendChatMessageResult> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatMessageAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest,
        Callback<SendChatMessageResult> callback) {
        sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest,
            new Callback<Response<SendChatMessageResult>>() {
                @Override
                public void onSuccess(Response<SendChatMessageResult> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatMessageAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, Context context,
        Callback<SendChatMessageResult> callback) {
        sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest, context,
            new Callback<Response<SendChatMessageResult>>() {
                @Override
                public void onSuccess(Response<SendChatMessageResult> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SendChatMessageResult sendChatMessage(String chatThreadId, SendChatMessageOptions sendChatMessageRequest) {
        CountDownLatch latch = new CountDownLatch(1);
        final SendChatMessageResult[] success = new SendChatMessageResult[1];
        final Throwable failure[] = new Throwable[1];
        sendChatMessageAsync(chatThreadId, sendChatMessageRequest, new Callback<SendChatMessageResult>() {
            @Override
            public void onSuccess(SendChatMessageResult response) {
                success[0] = response;
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success[0];
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SendChatMessageResult> sendChatMessageWithResponse(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<SendChatMessageResult>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest, context,
            new Callback<Response<SendChatMessageResult>>() {
                @Override
                public void onSuccess(Response<SendChatMessageResult> response) {
                    success.add(response);
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatMessagesSinglePageAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime,
        Callback<PagedResponse<ChatMessage>> callback) {
        final String accept = "application/json";
        service.listChatMessages(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            startTime,
            this.client.getApiVersion(),
            accept,
            Context.NONE,
            new Callback<Response<ChatMessagesCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessagesCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatMessagesSinglePageAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, Context context,
        Callback<PagedResponse<ChatMessage>> callback) {
        final String accept = "application/json";
        service.listChatMessages(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            startTime,
            this.client.getApiVersion(),
            accept,
            context,
            new Callback<Response<ChatMessagesCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessagesCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

//    /**
//     * Gets a list of messages from a thread.
//     *
//     * @param chatThreadId The thread id of the message.
//     * @param maxPageSize The maximum number of messages to be returned per page.
//     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
//     *     `yyyy-MM-ddTHH:mm:ssZ`.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return a list of messages from a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatMessage> listChatMessagesAsync(
//        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
//        return new PagedFlux<>(
//            () -> listChatMessagesSinglePageAsync(chatThreadId, maxPageSize, startTime),
//            nextLink -> listChatMessagesNextSinglePageAsync(nextLink));
//    }
//
//    /**
//     * Gets a list of messages from a thread.
//     *
//     * @param chatThreadId The thread id of the message.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return a list of messages from a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatMessage> listChatMessagesAsync(String chatThreadId) {
//        final Integer maxPageSize = null;
//        final OffsetDateTime startTime = null;
//        return new PagedFlux<>(
//            () -> listChatMessagesSinglePageAsync(chatThreadId, maxPageSize, startTime),
//            nextLink -> listChatMessagesNextSinglePageAsync(nextLink));
//    }
//
//    /**
//     * Gets a list of messages from a thread.
//     *
//     * @param chatThreadId The thread id of the message.
//     * @param maxPageSize The maximum number of messages to be returned per page.
//     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
//     *     `yyyy-MM-ddTHH:mm:ssZ`.
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return a list of messages from a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatMessage> listChatMessagesAsync(
//        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, Context context) {
//        return new PagedFlux<>(
//            () -> listChatMessagesSinglePageAsync(chatThreadId, maxPageSize, startTime, context),
//            nextLink -> listChatMessagesNextSinglePageAsync(nextLink, context));
//    }
//
//    /**
//     * Gets a list of messages from a thread.
//     *
//     * @param chatThreadId The thread id of the message.
//     * @param maxPageSize The maximum number of messages to be returned per page.
//     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
//     *     `yyyy-MM-ddTHH:mm:ssZ`.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return a list of messages from a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatMessage> listChatMessages(
//        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
//        return new PagedIterable<>(listChatMessagesAsync(chatThreadId, maxPageSize, startTime));
//    }
//
//    /**
//     * Gets a list of messages from a thread.
//     *
//     * @param chatThreadId The thread id of the message.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return a list of messages from a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatMessage> listChatMessages(String chatThreadId) {
//        final Integer maxPageSize = null;
//        final OffsetDateTime startTime = null;
//        return new PagedIterable<>(listChatMessagesAsync(chatThreadId, maxPageSize, startTime));
//    }
//
//    /**
//     * Gets a list of messages from a thread.
//     *
//     * @param chatThreadId The thread id of the message.
//     * @param maxPageSize The maximum number of messages to be returned per page.
//     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
//     *     `yyyy-MM-ddTHH:mm:ssZ`.
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return a list of messages from a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatMessage> listChatMessages(
//        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, Context context) {
//        return new PagedIterable<>(listChatMessagesAsync(chatThreadId, maxPageSize, startTime, context));
//    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getChatMessageWithResponseAsync(String chatThreadId, String chatMessageId,
                                                Callback<Response<ChatMessage>> callback) {
        final String accept = "application/json";
        service.getChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            accept,
            Context.NONE,
            new Callback<Response<ChatMessage>>() {
                @Override
                public void onSuccess(Response<ChatMessage> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, Context context,
        Callback<Response<ChatMessage>> callback) {
        final String accept = "application/json";
        service.getChatMessage(
            this.client.getEndpoint(), chatThreadId, chatMessageId, this.client.getApiVersion(), accept, context,
            new Callback<Response<ChatMessage>>() {
                @Override
                public void onSuccess(Response<ChatMessage> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getChatMessageAsync(String chatThreadId, String chatMessageId,
                                    Callback<ChatMessage> callback) {
        getChatMessageWithResponseAsync(chatThreadId, chatMessageId, new Callback<Response<ChatMessage>>() {
            @Override
            public void onSuccess(Response<ChatMessage> response) {
                callback.onSuccess(response.getValue());
            }

            @Override
            public void onFailure(Throwable error) {
                callback.onFailure(error);
            }
        });
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getChatMessageAsync(String chatThreadId, String chatMessageId, Context context,
                                                 Callback<ChatMessage> callback) {
        getChatMessageWithResponseAsync(chatThreadId, chatMessageId, context, new Callback<Response<ChatMessage>>() {
                @Override
                public void onSuccess(Response<ChatMessage> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            }
        );
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatMessage getChatMessage(String chatThreadId, String chatMessageId) {
        CountDownLatch latch = new CountDownLatch(1);
        final ChatMessage success[] = new ChatMessage[1];
        final Throwable failure[] = new Throwable[1];
        getChatMessageAsync(chatThreadId, chatMessageId, new Callback<ChatMessage>() {
            @Override
            public void onSuccess(ChatMessage response) {
                success[0] = response;
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success[0];
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChatMessage> getChatMessageWithResponse(
        String chatThreadId, String chatMessageId, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<ChatMessage>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        getChatMessageWithResponseAsync(chatThreadId, chatMessageId, context,
            new Callback<Response<ChatMessage>>() {
                @Override
                public void onSuccess(Response<ChatMessage> response) {
                    success.add(response);
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });
        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.updateChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            updateChatMessageRequest,
            accept,
            Context.NONE,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessageWithResponseAsync(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        Context context,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.updateChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            updateChatMessageRequest,
            accept,
            context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessageAsync(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest,
        Callback<Void> callback) {
        updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessageAsync(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        Context context,
        Callback<Void> callback) {
        updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessage(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest) {
        CountDownLatch latch = new CountDownLatch(1);
        Throwable failure[] = new Throwable[1];
        updateChatMessageAsync(chatThreadId, chatMessageId, updateChatMessageRequest, new Callback<Void>() {
            @Override
            public void onSuccess(Void response) {
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateChatMessageWithResponse(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<Void>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    success.add(response);
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessageWithResponseAsync(String chatThreadId, String chatMessageId,
                                                   Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.deleteChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            accept,
            Context.NONE,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, Context context,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.deleteChatMessage(
            this.client.getEndpoint(), chatThreadId, chatMessageId, this.client.getApiVersion(), accept, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessageAsync(String chatThreadId, String chatMessageId, Callback<Void> callback) {
        deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId, new Callback<Response<Void>>() {
            @Override
            public void onSuccess(Response<Void> response) {
                callback.onSuccess(response.getValue());
            }

            @Override
            public void onFailure(Throwable error) {
                callback.onFailure(error);
            }
        });
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessageAsync(String chatThreadId, String chatMessageId, Context context,
                                       Callback<Void> callback) {
        deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId, context, new Callback<Response<Void>>() {
            @Override
            public void onSuccess(Response<Void> response) {
                callback.onSuccess(response.getValue());
            }

            @Override
            public void onFailure(Throwable error) {
                callback.onFailure(error);
            }
        });
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessage(String chatThreadId, String chatMessageId) {
        CountDownLatch latch = new CountDownLatch(1);
        Throwable failure[] = new Throwable[1];
        deleteChatMessageAsync(chatThreadId, chatMessageId, new Callback<Void>() {
            @Override
            public void onSuccess(Void response) {
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteChatMessageWithResponse(String chatThreadId, String chatMessageId, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<Void>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId, context, new Callback<Response<Void>>() {
            @Override
            public void onSuccess(Response<Void> response) {
                success.add(response);
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotificationWithResponseAsync(String chatThreadId,
                                                        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.sendTypingNotification(
            this.client.getEndpoint(), chatThreadId, this.client.getApiVersion(), accept, Context.NONE,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotificationWithResponseAsync(String chatThreadId, Context context,
                                                        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.sendTypingNotification(
            this.client.getEndpoint(), chatThreadId, this.client.getApiVersion(), accept, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotificationAsync(String chatThreadId, Callback<Void> callback) {
        sendTypingNotificationWithResponseAsync(chatThreadId, new Callback<Response<Void>>() {
            @Override
            public void onSuccess(Response<Void> response) {
                callback.onSuccess(response.getValue());
            }

            @Override
            public void onFailure(Throwable error) {
                callback.onFailure(error);
            }
        });
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotificationAsync(String chatThreadId, Context context, Callback<Void> callback) {
        sendTypingNotificationWithResponseAsync(chatThreadId, context, new Callback<Response<Void>>() {
            @Override
            public void onSuccess(Response<Void> response) {
                callback.onSuccess(response.getValue());
            }

            @Override
            public void onFailure(Throwable error) {
                callback.onFailure(error);
            }
        });
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotification(String chatThreadId) {
        CountDownLatch latch = new CountDownLatch(1);
        Throwable failure[] = new Throwable[1];
        sendTypingNotificationAsync(chatThreadId, new Callback<Void>() {
            @Override
            public void onSuccess(Void response) {
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendTypingNotificationWithResponse(String chatThreadId, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<Void>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        sendTypingNotificationWithResponseAsync(chatThreadId, context, new Callback<Response<Void>>() {
            @Override
            public void onSuccess(Response<Void> response) {
                success.add(response);
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatParticipantsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, Callback<PagedResponse<ChatParticipant>> callback) {
        final String accept = "application/json";
        service.listChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            Context.NONE,
            new Callback<Response<ChatParticipantsCollection>>() {
                @Override
                public void onSuccess(Response<ChatParticipantsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatParticipantsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context,
        Callback<PagedResponse<ChatParticipant>> callback) {
        final String accept = "application/json";

        service.listChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            context,
            new Callback<Response<ChatParticipantsCollection>>() {
                @Override
                public void onSuccess(Response<ChatParticipantsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

//    /**
//     * Gets the participants of a thread.
//     *
//     * @param chatThreadId Thread id to get participants for.
//     * @param maxPageSize The maximum number of participants to be returned per page.
//     * @param skip Skips participants up to a specified position in response.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the participants of a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatParticipant> listChatParticipantsAsync(
//        String chatThreadId, Integer maxPageSize, Integer skip) {
//        return new PagedFlux<>(
//            () -> listChatParticipantsSinglePageAsync(chatThreadId, maxPageSize, skip),
//            nextLink -> listChatParticipantsNextSinglePageAsync(nextLink));
//    }
//
//    /**
//     * Gets the participants of a thread.
//     *
//     * @param chatThreadId Thread id to get participants for.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the participants of a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatParticipant> listChatParticipantsAsync(String chatThreadId) {
//        final Integer maxPageSize = null;
//        final Integer skip = null;
//        return new PagedFlux<>(
//            () -> listChatParticipantsSinglePageAsync(chatThreadId, maxPageSize, skip),
//            nextLink -> listChatParticipantsNextSinglePageAsync(nextLink));
//    }
//
//    /**
//     * Gets the participants of a thread.
//     *
//     * @param chatThreadId Thread id to get participants for.
//     * @param maxPageSize The maximum number of participants to be returned per page.
//     * @param skip Skips participants up to a specified position in response.
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the participants of a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedFlux<ChatParticipant> listChatParticipantsAsync(
//        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
//        return new PagedFlux<>(
//            () -> listChatParticipantsSinglePageAsync(chatThreadId, maxPageSize, skip, context),
//            nextLink -> listChatParticipantsNextSinglePageAsync(nextLink, context));
//    }
//
//    /**
//     * Gets the participants of a thread.
//     *
//     * @param chatThreadId Thread id to get participants for.
//     * @param maxPageSize The maximum number of participants to be returned per page.
//     * @param skip Skips participants up to a specified position in response.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the participants of a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatParticipant> listChatParticipants(String chatThreadId, Integer maxPageSize, Integer skip) {
//        return new PagedIterable<>(listChatParticipantsAsync(chatThreadId, maxPageSize, skip));
//    }
//
//    /**
//     * Gets the participants of a thread.
//     *
//     * @param chatThreadId Thread id to get participants for.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the participants of a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatParticipant> listChatParticipants(String chatThreadId) {
//        final Integer maxPageSize = null;
//        final Integer skip = null;
//        return new PagedIterable<>(listChatParticipantsAsync(chatThreadId, maxPageSize, skip));
//    }
//
//    /**
//     * Gets the participants of a thread.
//     *
//     * @param chatThreadId Thread id to get participants for.
//     * @param maxPageSize The maximum number of participants to be returned per page.
//     * @param skip Skips participants up to a specified position in response.
//     * @param context The context to associate with this operation.
//     * @throws IllegalArgumentException thrown if parameters fail the validation.
//     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
//     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
//     * @return the participants of a thread.
//     */
//    @ServiceMethod(returns = ReturnType.COLLECTION)
//    public PagedIterable<ChatParticipant> listChatParticipants(
//        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
//        return new PagedIterable<>(listChatParticipantsAsync(chatThreadId, maxPageSize, skip, context));
//    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipantWithResponseAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.removeChatParticipant(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            participantCommunicationIdentifier,
            accept,
            Context.NONE,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipantWithResponseAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier, Context context,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.removeChatParticipant(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            participantCommunicationIdentifier,
            accept,
            context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipantAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier,
        Callback<Void> callback) {
        removeChatParticipantWithResponseAsync(chatThreadId, participantCommunicationIdentifier,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipantAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier, Context context,
        Callback<Void> callback) {
        removeChatParticipantWithResponseAsync(chatThreadId, participantCommunicationIdentifier, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipant(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier) {
        CountDownLatch latch = new CountDownLatch(1);
        Throwable failure[] = new Throwable[1];
        removeChatParticipantAsync(chatThreadId, participantCommunicationIdentifier, new Callback<Void>() {
            @Override
            public void onSuccess(Void response) {
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeChatParticipantWithResponse(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<Void>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        removeChatParticipantWithResponseAsync(chatThreadId, participantCommunicationIdentifier, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    success.add(response);
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addChatParticipantsWithResponseAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest,
        Callback<Response<AddChatParticipantsResult>> callback) {
        final String accept = "application/json";
        service.addChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            addChatParticipantsRequest,
            accept,
            Context.NONE,
            new Callback<Response<AddChatParticipantsResult>>() {
                @Override
                public void onSuccess(Response<AddChatParticipantsResult> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addChatParticipantsWithResponseAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, Context context,
        Callback<Response<AddChatParticipantsResult>> callback) {
        final String accept = "application/json";
        service.addChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            addChatParticipantsRequest,
            accept,
            context,
            new Callback<Response<AddChatParticipantsResult>>() {
                @Override
                public void onSuccess(Response<AddChatParticipantsResult> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addChatParticipantsAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest,
        Callback<AddChatParticipantsResult> callback) {
        addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest,
            new Callback<Response<AddChatParticipantsResult>>() {
                @Override
                public void onSuccess(Response<AddChatParticipantsResult> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addChatParticipantsAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, Context context,
        Callback<AddChatParticipantsResult> callback) {
        addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest, context,
            new Callback<Response<AddChatParticipantsResult>>() {
                @Override
                public void onSuccess(Response<AddChatParticipantsResult> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddChatParticipantsResult addChatParticipants(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest) {
        CountDownLatch latch = new CountDownLatch(1);
        final AddChatParticipantsResult success[] = new AddChatParticipantsResult[1];
        final Throwable failure[] = new Throwable[1];
        addChatParticipantsAsync(chatThreadId, addChatParticipantsRequest,
            new Callback<AddChatParticipantsResult>() {
                @Override
                public void onSuccess(AddChatParticipantsResult response) {
                    success[0] = response;
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success[0];
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AddChatParticipantsResult> addChatParticipantsWithResponse(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<AddChatParticipantsResult>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest, context,
            new Callback<Response<AddChatParticipantsResult>>() {
                @Override
                public void onSuccess(Response<AddChatParticipantsResult> response) {
                    success.add(response);
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThreadWithResponseAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.updateChatThread(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            updateChatThreadRequest,
            accept,
            Context.NONE,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThreadWithResponseAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, Context context,
        Callback<Response<Void>> callback) {
        final String accept = "application/json";
        service.updateChatThread(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            updateChatThreadRequest,
            accept,
            context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response);
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThreadAsync(String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest,
                                            Callback<Void> callback) {
        updateChatThreadWithResponseAsync(chatThreadId, updateChatThreadRequest,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThreadAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, Context context,
        Callback<Void> callback) {
        updateChatThreadWithResponseAsync(chatThreadId, updateChatThreadRequest, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    callback.onSuccess(response.getValue());
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest) {
        CountDownLatch latch = new CountDownLatch(1);
        Throwable failure[] = new Throwable[1];
        updateChatThreadAsync(chatThreadId, updateChatThreadRequest, new Callback<Void>() {
            @Override
            public void onSuccess(Void response) {
                latch.countDown();
            }

            @Override
            public void onFailure(Throwable error) {
                failure[0] = error;
                latch.countDown();
            }
        });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateChatThreadWithResponse(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, Context context) {
        CountDownLatch latch = new CountDownLatch(1);
        final ArrayList<Response<Void>> success = new ArrayList<>(1);
        final Throwable failure[] = new Throwable[1];
        updateChatThreadWithResponseAsync(chatThreadId, updateChatThreadRequest, context,
            new Callback<Response<Void>>() {
                @Override
                public void onSuccess(Response<Void> response) {
                    success.add(response);
                    latch.countDown();
                }

                @Override
                public void onFailure(Throwable error) {
                    failure[0] = error;
                    latch.countDown();
                }
            });

        if (failure[0] != null) {
            throw new RuntimeException(failure[0]);
        }
        return success.get(0);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of chat message read receipts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatReadReceiptsNextSinglePageAsync(String nextLink,
                                                        Callback<PagedResponse<ChatMessageReadReceipt>> callback) {
        final String accept = "application/json";
        service.listChatReadReceiptsNext(nextLink, this.client.getEndpoint(), accept, Context.NONE,
            new Callback<Response<ChatMessageReadReceiptsCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessageReadReceiptsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of chat message read receipts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatReadReceiptsNextSinglePageAsync(
        String nextLink, Context context,
        Callback<PagedResponse<ChatMessageReadReceipt>> callback) {
        final String accept = "application/json";
        service.listChatReadReceiptsNext(nextLink, this.client.getEndpoint(), accept, context,
            new Callback<Response<ChatMessageReadReceiptsCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessageReadReceiptsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat messages for a particular chat thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatMessagesNextSinglePageAsync(String nextLink,
                                                    Callback<PagedResponse<ChatMessage>> callback) {
        final String accept = "application/json";
        service.listChatMessagesNext(nextLink, this.client.getEndpoint(), accept, Context.NONE,
            new Callback<Response<ChatMessagesCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessagesCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat messages for a particular chat thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatMessagesNextSinglePageAsync(String nextLink, Context context,
                                                    Callback<PagedResponse<ChatMessage>> callback) {
        final String accept = "application/json";
        service.listChatMessagesNext(nextLink, this.client.getEndpoint(), accept, context,
            new Callback<Response<ChatMessagesCollection>>() {
                @Override
                public void onSuccess(Response<ChatMessagesCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of participants belong to a particular thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatParticipantsNextSinglePageAsync(String nextLink,
                                                        Callback<PagedResponse<ChatParticipant>> callback) {
        final String accept = "application/json";
        service.listChatParticipantsNext(nextLink, this.client.getEndpoint(), accept, Context.NONE,
            new Callback<Response<ChatParticipantsCollection>>() {
                @Override
                public void onSuccess(Response<ChatParticipantsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of participants belong to a particular thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listChatParticipantsNextSinglePageAsync(
        String nextLink, Context context,
        Callback<PagedResponse<ChatParticipant>> callback) {
        final String accept = "application/json";
        service.listChatParticipantsNext(nextLink, this.client.getEndpoint(), accept, context,
            new Callback<Response<ChatParticipantsCollection>>() {
                @Override
                public void onSuccess(Response<ChatParticipantsCollection> response) {
                    callback.onSuccess(new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null));
                }

                @Override
                public void onFailure(Throwable error) {
                    callback.onFailure(error);
                }
            });
    }
}
