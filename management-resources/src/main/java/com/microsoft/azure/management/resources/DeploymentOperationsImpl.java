/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.resources;

import com.microsoft.azure.management.resources.models.BasicDeployment;
import com.microsoft.azure.management.resources.models.Deployment;
import com.microsoft.azure.management.resources.models.DeploymentGetResult;
import com.microsoft.azure.management.resources.models.DeploymentListParameters;
import com.microsoft.azure.management.resources.models.DeploymentListResult;
import com.microsoft.azure.management.resources.models.DeploymentMode;
import com.microsoft.azure.management.resources.models.DeploymentOperationsCreateResult;
import com.microsoft.azure.management.resources.models.DeploymentProperties;
import com.microsoft.azure.management.resources.models.DeploymentValidateResponse;
import com.microsoft.azure.management.resources.models.ResourceManagementError;
import com.microsoft.azure.management.resources.models.ResourceManagementErrorWithDetails;
import com.microsoft.azure.management.resources.models.TemplateLink;
import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.Calendar;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.regex.Pattern;
import javax.xml.bind.DatatypeConverter;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.ObjectNode;

/**
* Operations for managing deployments.
*/
public class DeploymentOperationsImpl implements ServiceOperations<ResourceManagementClientImpl>, DeploymentOperations {
    /**
    * Initializes a new instance of the DeploymentOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    DeploymentOperationsImpl(ResourceManagementClientImpl client) {
        this.client = client;
    }
    
    private ResourceManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.azure.management.resources.ResourceManagementClientImpl.
    * @return The Client value.
    */
    public ResourceManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * Cancel a currently running template deployment.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> cancelAsync(final String resourceGroupName, final String deploymentName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return cancel(resourceGroupName, deploymentName);
            }
         });
    }
    
    /**
    * Cancel a currently running template deployment.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse cancel(String resourceGroupName, String deploymentName) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("deploymentName", deploymentName);
            CloudTracing.enter(invocationId, this, "cancelAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/deployments/" + deploymentName.trim() + "/cancel" + "?";
        url = url + "api-version=" + "2014-04-01-preview";
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpPost httpRequest = new HttpPost(url);
        
        // Set Headers
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_NO_CONTENT) {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Create a named template deployment using a template.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @param parameters Required. Additional parameters supplied to the
    * operation.
    * @return Template deployment operation create result.
    */
    @Override
    public Future<DeploymentOperationsCreateResult> createOrUpdateAsync(final String resourceGroupName, final String deploymentName, final BasicDeployment parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DeploymentOperationsCreateResult>() { 
            @Override
            public DeploymentOperationsCreateResult call() throws Exception {
                return createOrUpdate(resourceGroupName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * Create a named template deployment using a template.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @param parameters Required. Additional parameters supplied to the
    * operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return Template deployment operation create result.
    */
    @Override
    public DeploymentOperationsCreateResult createOrUpdate(String resourceGroupName, String deploymentName, BasicDeployment parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getTemplateLink() != null) {
            if (parameters.getTemplateLink().getUri() == null) {
                throw new NullPointerException("parameters.TemplateLink.Uri");
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createOrUpdateAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/deployments/" + deploymentName.trim() + "?";
        url = url + "api-version=" + "2014-04-01-preview";
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode propertiesValue = objectMapper.createObjectNode();
        requestDoc = objectMapper.createObjectNode();
        ((ObjectNode) requestDoc).put("properties", propertiesValue);
        
        if (parameters.getTemplateLink() != null) {
            ObjectNode templateLinkValue = objectMapper.createObjectNode();
            ((ObjectNode) propertiesValue).put("templateLink", templateLinkValue);
            
            ((ObjectNode) templateLinkValue).put("uri", parameters.getTemplateLink().getUri().toString());
            
            if (parameters.getTemplateLink().getContentVersion() != null) {
                ((ObjectNode) templateLinkValue).put("contentVersion", parameters.getTemplateLink().getContentVersion());
            }
        }
        
        if (parameters.getParameters() != null) {
            ((ObjectNode) propertiesValue).put("parameters", parameters.getParameters());
        }
        
        ((ObjectNode) propertiesValue).put("mode", parameters.getMode().toString());
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_CREATED) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DeploymentOperationsCreateResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DeploymentOperationsCreateResult();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                JsonNode resourceGroupValue = responseDoc.get("resourceGroup");
                if (resourceGroupValue != null) {
                    String resourceGroupInstance;
                    resourceGroupInstance = resourceGroupValue.getTextValue();
                    result.setResourceGroup(resourceGroupInstance);
                }
                
                JsonNode nameValue = responseDoc.get("name");
                if (nameValue != null) {
                    String nameInstance;
                    nameInstance = nameValue.getTextValue();
                    result.setName(nameInstance);
                }
                
                JsonNode propertiesValue2 = responseDoc.get("properties");
                if (propertiesValue2 != null) {
                    DeploymentProperties propertiesInstance = new DeploymentProperties();
                    result.setProperties(propertiesInstance);
                    
                    JsonNode provisioningStateValue = propertiesValue2.get("provisioningState");
                    if (provisioningStateValue != null) {
                        String provisioningStateInstance;
                        provisioningStateInstance = provisioningStateValue.getTextValue();
                        propertiesInstance.setProvisioningState(provisioningStateInstance);
                    }
                    
                    JsonNode correlationIdValue = propertiesValue2.get("correlationId");
                    if (correlationIdValue != null) {
                        String correlationIdInstance;
                        correlationIdInstance = correlationIdValue.getTextValue();
                        propertiesInstance.setCorrelationId(correlationIdInstance);
                    }
                    
                    JsonNode timestampValue = propertiesValue2.get("timestamp");
                    if (timestampValue != null) {
                        Calendar timestampInstance;
                        timestampInstance = DatatypeConverter.parseDateTime(timestampValue.getTextValue());
                        propertiesInstance.setTimestamp(timestampInstance);
                    }
                    
                    JsonNode outputsValue = propertiesValue2.get("outputs");
                    if (outputsValue != null) {
                        String outputsInstance;
                        outputsInstance = outputsValue.getTextValue();
                        propertiesInstance.setOutputs(outputsInstance);
                    }
                    
                    JsonNode templateLinkValue2 = propertiesValue2.get("templateLink");
                    if (templateLinkValue2 != null) {
                        TemplateLink templateLinkInstance = new TemplateLink();
                        propertiesInstance.setTemplateLink(templateLinkInstance);
                        
                        JsonNode uriValue = templateLinkValue2.get("uri");
                        if (uriValue != null) {
                            URI uriInstance;
                            uriInstance = new URI(uriValue.getTextValue());
                            templateLinkInstance.setUri(uriInstance);
                        }
                        
                        JsonNode contentVersionValue = templateLinkValue2.get("contentVersion");
                        if (contentVersionValue != null) {
                            String contentVersionInstance;
                            contentVersionInstance = contentVersionValue.getTextValue();
                            templateLinkInstance.setContentVersion(contentVersionInstance);
                        }
                    }
                    
                    JsonNode parametersValue = propertiesValue2.get("parameters");
                    if (parametersValue != null) {
                        String parametersInstance;
                        parametersInstance = parametersValue.getTextValue();
                        propertiesInstance.setParameters(parametersInstance);
                    }
                    
                    JsonNode modeValue = propertiesValue2.get("mode");
                    if (modeValue != null) {
                        DeploymentMode modeInstance;
                        modeInstance = DeploymentMode.valueOf(modeValue.getTextValue());
                        propertiesInstance.setMode(modeInstance);
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get a deployment.
    *
    * @param resourceGroupName Required. The name of the resource group to get.
    * The name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @return Template deployment information.
    */
    @Override
    public Future<DeploymentGetResult> getAsync(final String resourceGroupName, final String deploymentName) {
        return this.getClient().getExecutorService().submit(new Callable<DeploymentGetResult>() { 
            @Override
            public DeploymentGetResult call() throws Exception {
                return get(resourceGroupName, deploymentName);
            }
         });
    }
    
    /**
    * Get a deployment.
    *
    * @param resourceGroupName Required. The name of the resource group to get.
    * The name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return Template deployment information.
    */
    @Override
    public DeploymentGetResult get(String resourceGroupName, String deploymentName) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("deploymentName", deploymentName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/deployments/" + deploymentName.trim() + "?";
        url = url + "api-version=" + "2014-04-01-preview";
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DeploymentGetResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DeploymentGetResult();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                Deployment deploymentInstance = new Deployment();
                result.setDeployment(deploymentInstance);
                
                JsonNode nameValue = responseDoc.get("name");
                if (nameValue != null) {
                    String nameInstance;
                    nameInstance = nameValue.getTextValue();
                    deploymentInstance.setDeploymentName(nameInstance);
                }
                
                JsonNode propertiesValue = responseDoc.get("properties");
                if (propertiesValue != null) {
                    DeploymentProperties propertiesInstance = new DeploymentProperties();
                    deploymentInstance.setProperties(propertiesInstance);
                    
                    JsonNode provisioningStateValue = propertiesValue.get("provisioningState");
                    if (provisioningStateValue != null) {
                        String provisioningStateInstance;
                        provisioningStateInstance = provisioningStateValue.getTextValue();
                        propertiesInstance.setProvisioningState(provisioningStateInstance);
                    }
                    
                    JsonNode correlationIdValue = propertiesValue.get("correlationId");
                    if (correlationIdValue != null) {
                        String correlationIdInstance;
                        correlationIdInstance = correlationIdValue.getTextValue();
                        propertiesInstance.setCorrelationId(correlationIdInstance);
                    }
                    
                    JsonNode timestampValue = propertiesValue.get("timestamp");
                    if (timestampValue != null) {
                        Calendar timestampInstance;
                        timestampInstance = DatatypeConverter.parseDateTime(timestampValue.getTextValue());
                        propertiesInstance.setTimestamp(timestampInstance);
                    }
                    
                    JsonNode outputsValue = propertiesValue.get("outputs");
                    if (outputsValue != null) {
                        String outputsInstance;
                        outputsInstance = outputsValue.getTextValue();
                        propertiesInstance.setOutputs(outputsInstance);
                    }
                    
                    JsonNode templateLinkValue = propertiesValue.get("templateLink");
                    if (templateLinkValue != null) {
                        TemplateLink templateLinkInstance = new TemplateLink();
                        propertiesInstance.setTemplateLink(templateLinkInstance);
                        
                        JsonNode uriValue = templateLinkValue.get("uri");
                        if (uriValue != null) {
                            URI uriInstance;
                            uriInstance = new URI(uriValue.getTextValue());
                            templateLinkInstance.setUri(uriInstance);
                        }
                        
                        JsonNode contentVersionValue = templateLinkValue.get("contentVersion");
                        if (contentVersionValue != null) {
                            String contentVersionInstance;
                            contentVersionInstance = contentVersionValue.getTextValue();
                            templateLinkInstance.setContentVersion(contentVersionInstance);
                        }
                    }
                    
                    JsonNode parametersValue = propertiesValue.get("parameters");
                    if (parametersValue != null) {
                        String parametersInstance;
                        parametersInstance = parametersValue.getTextValue();
                        propertiesInstance.setParameters(parametersInstance);
                    }
                    
                    JsonNode modeValue = propertiesValue.get("mode");
                    if (modeValue != null) {
                        DeploymentMode modeInstance;
                        modeInstance = DeploymentMode.valueOf(modeValue.getTextValue());
                        propertiesInstance.setMode(modeInstance);
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get a list of deployments.
    *
    * @param resourceGroupName Required. The name of the resource group to
    * filter by. The name is case insensitive.
    * @param parameters Optional. Query parameters. If null is passed returns
    * all deployments.
    * @return List of deployments.
    */
    @Override
    public Future<DeploymentListResult> listAsync(final String resourceGroupName, final DeploymentListParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DeploymentListResult>() { 
            @Override
            public DeploymentListResult call() throws Exception {
                return list(resourceGroupName, parameters);
            }
         });
    }
    
    /**
    * Get a list of deployments.
    *
    * @param resourceGroupName Required. The name of the resource group to
    * filter by. The name is case insensitive.
    * @param parameters Optional. Query parameters. If null is passed returns
    * all deployments.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return List of deployments.
    */
    @Override
    public DeploymentListResult list(String resourceGroupName, DeploymentListParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/";
        url = url + "resourcegroups/" + URLEncoder.encode(resourceGroupName.trim(), "UTF-8") + "/";
        url = url + "deployments/" + "?";
        if (parameters != null && parameters.getProvisioningState() != null) {
            url = url + "$filter=provisioningState eq '" + URLEncoder.encode(parameters.getProvisioningState() != null ? parameters.getProvisioningState().trim() : "", "UTF-8") + "'";
        }
        if (parameters != null && parameters.getTop() != null) {
            url = url + "&" + "$top=" + URLEncoder.encode(Integer.toString(parameters.getTop()), "UTF-8");
        }
        url = url + "&" + "api-version=" + "2014-04-01-preview";
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DeploymentListResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DeploymentListResult();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                JsonNode valueArray = responseDoc.get("value");
                if (valueArray != null) {
                    for (JsonNode valueValue : ((ArrayNode) valueArray)) {
                        Deployment deploymentInstance = new Deployment();
                        result.getDeployments().add(deploymentInstance);
                        
                        JsonNode nameValue = valueValue.get("name");
                        if (nameValue != null) {
                            String nameInstance;
                            nameInstance = nameValue.getTextValue();
                            deploymentInstance.setDeploymentName(nameInstance);
                        }
                        
                        JsonNode propertiesValue = valueValue.get("properties");
                        if (propertiesValue != null) {
                            DeploymentProperties propertiesInstance = new DeploymentProperties();
                            deploymentInstance.setProperties(propertiesInstance);
                            
                            JsonNode provisioningStateValue = propertiesValue.get("provisioningState");
                            if (provisioningStateValue != null) {
                                String provisioningStateInstance;
                                provisioningStateInstance = provisioningStateValue.getTextValue();
                                propertiesInstance.setProvisioningState(provisioningStateInstance);
                            }
                            
                            JsonNode correlationIdValue = propertiesValue.get("correlationId");
                            if (correlationIdValue != null) {
                                String correlationIdInstance;
                                correlationIdInstance = correlationIdValue.getTextValue();
                                propertiesInstance.setCorrelationId(correlationIdInstance);
                            }
                            
                            JsonNode timestampValue = propertiesValue.get("timestamp");
                            if (timestampValue != null) {
                                Calendar timestampInstance;
                                timestampInstance = DatatypeConverter.parseDateTime(timestampValue.getTextValue());
                                propertiesInstance.setTimestamp(timestampInstance);
                            }
                            
                            JsonNode outputsValue = propertiesValue.get("outputs");
                            if (outputsValue != null) {
                                String outputsInstance;
                                outputsInstance = outputsValue.getTextValue();
                                propertiesInstance.setOutputs(outputsInstance);
                            }
                            
                            JsonNode templateLinkValue = propertiesValue.get("templateLink");
                            if (templateLinkValue != null) {
                                TemplateLink templateLinkInstance = new TemplateLink();
                                propertiesInstance.setTemplateLink(templateLinkInstance);
                                
                                JsonNode uriValue = templateLinkValue.get("uri");
                                if (uriValue != null) {
                                    URI uriInstance;
                                    uriInstance = new URI(uriValue.getTextValue());
                                    templateLinkInstance.setUri(uriInstance);
                                }
                                
                                JsonNode contentVersionValue = templateLinkValue.get("contentVersion");
                                if (contentVersionValue != null) {
                                    String contentVersionInstance;
                                    contentVersionInstance = contentVersionValue.getTextValue();
                                    templateLinkInstance.setContentVersion(contentVersionInstance);
                                }
                            }
                            
                            JsonNode parametersValue = propertiesValue.get("parameters");
                            if (parametersValue != null) {
                                String parametersInstance;
                                parametersInstance = parametersValue.getTextValue();
                                propertiesInstance.setParameters(parametersInstance);
                            }
                            
                            JsonNode modeValue = propertiesValue.get("mode");
                            if (modeValue != null) {
                                DeploymentMode modeInstance;
                                modeInstance = DeploymentMode.valueOf(modeValue.getTextValue());
                                propertiesInstance.setMode(modeInstance);
                            }
                        }
                    }
                }
                
                JsonNode odatanextLinkValue = responseDoc.get("@odata.nextLink");
                if (odatanextLinkValue != null) {
                    String odatanextLinkInstance;
                    odatanextLinkInstance = odatanextLinkValue.getTextValue();
                    result.setNextLink(odatanextLinkInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get a list of deployments.
    *
    * @param nextLink Required. NextLink from the previous successful call to
    * List operation.
    * @return List of deployments.
    */
    @Override
    public Future<DeploymentListResult> listNextAsync(final String nextLink) {
        return this.getClient().getExecutorService().submit(new Callable<DeploymentListResult>() { 
            @Override
            public DeploymentListResult call() throws Exception {
                return listNext(nextLink);
            }
         });
    }
    
    /**
    * Get a list of deployments.
    *
    * @param nextLink Required. NextLink from the previous successful call to
    * List operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return List of deployments.
    */
    @Override
    public DeploymentListResult listNext(String nextLink) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (nextLink == null) {
            throw new NullPointerException("nextLink");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("nextLink", nextLink);
            CloudTracing.enter(invocationId, this, "listNextAsync", tracingParameters);
        }
        
        // Construct URL
        String url = nextLink.trim();
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DeploymentListResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DeploymentListResult();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                JsonNode valueArray = responseDoc.get("value");
                if (valueArray != null) {
                    for (JsonNode valueValue : ((ArrayNode) valueArray)) {
                        Deployment deploymentInstance = new Deployment();
                        result.getDeployments().add(deploymentInstance);
                        
                        JsonNode nameValue = valueValue.get("name");
                        if (nameValue != null) {
                            String nameInstance;
                            nameInstance = nameValue.getTextValue();
                            deploymentInstance.setDeploymentName(nameInstance);
                        }
                        
                        JsonNode propertiesValue = valueValue.get("properties");
                        if (propertiesValue != null) {
                            DeploymentProperties propertiesInstance = new DeploymentProperties();
                            deploymentInstance.setProperties(propertiesInstance);
                            
                            JsonNode provisioningStateValue = propertiesValue.get("provisioningState");
                            if (provisioningStateValue != null) {
                                String provisioningStateInstance;
                                provisioningStateInstance = provisioningStateValue.getTextValue();
                                propertiesInstance.setProvisioningState(provisioningStateInstance);
                            }
                            
                            JsonNode correlationIdValue = propertiesValue.get("correlationId");
                            if (correlationIdValue != null) {
                                String correlationIdInstance;
                                correlationIdInstance = correlationIdValue.getTextValue();
                                propertiesInstance.setCorrelationId(correlationIdInstance);
                            }
                            
                            JsonNode timestampValue = propertiesValue.get("timestamp");
                            if (timestampValue != null) {
                                Calendar timestampInstance;
                                timestampInstance = DatatypeConverter.parseDateTime(timestampValue.getTextValue());
                                propertiesInstance.setTimestamp(timestampInstance);
                            }
                            
                            JsonNode outputsValue = propertiesValue.get("outputs");
                            if (outputsValue != null) {
                                String outputsInstance;
                                outputsInstance = outputsValue.getTextValue();
                                propertiesInstance.setOutputs(outputsInstance);
                            }
                            
                            JsonNode templateLinkValue = propertiesValue.get("templateLink");
                            if (templateLinkValue != null) {
                                TemplateLink templateLinkInstance = new TemplateLink();
                                propertiesInstance.setTemplateLink(templateLinkInstance);
                                
                                JsonNode uriValue = templateLinkValue.get("uri");
                                if (uriValue != null) {
                                    URI uriInstance;
                                    uriInstance = new URI(uriValue.getTextValue());
                                    templateLinkInstance.setUri(uriInstance);
                                }
                                
                                JsonNode contentVersionValue = templateLinkValue.get("contentVersion");
                                if (contentVersionValue != null) {
                                    String contentVersionInstance;
                                    contentVersionInstance = contentVersionValue.getTextValue();
                                    templateLinkInstance.setContentVersion(contentVersionInstance);
                                }
                            }
                            
                            JsonNode parametersValue = propertiesValue.get("parameters");
                            if (parametersValue != null) {
                                String parametersInstance;
                                parametersInstance = parametersValue.getTextValue();
                                propertiesInstance.setParameters(parametersInstance);
                            }
                            
                            JsonNode modeValue = propertiesValue.get("mode");
                            if (modeValue != null) {
                                DeploymentMode modeInstance;
                                modeInstance = DeploymentMode.valueOf(modeValue.getTextValue());
                                propertiesInstance.setMode(modeInstance);
                            }
                        }
                    }
                }
                
                JsonNode odatanextLinkValue = responseDoc.get("@odata.nextLink");
                if (odatanextLinkValue != null) {
                    String odatanextLinkInstance;
                    odatanextLinkInstance = odatanextLinkValue.getTextValue();
                    result.setNextLink(odatanextLinkInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Validate a deployment template.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @param parameters Required. Deployment to validate.
    * @return Information from validate template deployment response.
    */
    @Override
    public Future<DeploymentValidateResponse> validateAsync(final String resourceGroupName, final String deploymentName, final BasicDeployment parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DeploymentValidateResponse>() { 
            @Override
            public DeploymentValidateResponse call() throws Exception {
                return validate(resourceGroupName, deploymentName, parameters);
            }
         });
    }
    
    /**
    * Validate a deployment template.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param deploymentName Required. The name of the deployment.
    * @param parameters Required. Deployment to validate.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Information from validate template deployment response.
    */
    @Override
    public DeploymentValidateResponse validate(String resourceGroupName, String deploymentName, BasicDeployment parameters) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (deploymentName == null) {
            throw new NullPointerException("deploymentName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getTemplateLink() != null) {
            if (parameters.getTemplateLink().getUri() == null) {
                throw new NullPointerException("parameters.TemplateLink.Uri");
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("deploymentName", deploymentName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "validateAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/deployments/" + deploymentName.trim() + "/validate" + "?";
        url = url + "&" + "api-version=" + "2014-04-01-preview";
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpPost httpRequest = new HttpPost(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode propertiesValue = objectMapper.createObjectNode();
        requestDoc = objectMapper.createObjectNode();
        ((ObjectNode) requestDoc).put("properties", propertiesValue);
        
        if (parameters.getTemplateLink() != null) {
            ObjectNode templateLinkValue = objectMapper.createObjectNode();
            ((ObjectNode) propertiesValue).put("templateLink", templateLinkValue);
            
            ((ObjectNode) templateLinkValue).put("uri", parameters.getTemplateLink().getUri().toString());
            
            if (parameters.getTemplateLink().getContentVersion() != null) {
                ((ObjectNode) templateLinkValue).put("contentVersion", parameters.getTemplateLink().getContentVersion());
            }
        }
        
        if (parameters.getParameters() != null) {
            ((ObjectNode) propertiesValue).put("parameters", parameters.getParameters());
        }
        
        ((ObjectNode) propertiesValue).put("mode", parameters.getMode().toString());
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_BAD_REQUEST) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DeploymentValidateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new DeploymentValidateResponse();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                JsonNode errorValue = responseDoc.get("error");
                if (errorValue != null) {
                    ResourceManagementErrorWithDetails errorInstance = new ResourceManagementErrorWithDetails();
                    result.setError(errorInstance);
                    
                    JsonNode detailsArray = errorValue.get("details");
                    if (detailsArray != null) {
                        for (JsonNode detailsValue : ((ArrayNode) detailsArray)) {
                            ResourceManagementError resourceManagementErrorInstance = new ResourceManagementError();
                            errorInstance.getDetails().add(resourceManagementErrorInstance);
                            
                            JsonNode codeValue = detailsValue.get("code");
                            if (codeValue != null) {
                                String codeInstance;
                                codeInstance = codeValue.getTextValue();
                                resourceManagementErrorInstance.setCode(codeInstance);
                            }
                            
                            JsonNode messageValue = detailsValue.get("message");
                            if (messageValue != null) {
                                String messageInstance;
                                messageInstance = messageValue.getTextValue();
                                resourceManagementErrorInstance.setMessage(messageInstance);
                            }
                            
                            JsonNode targetValue = detailsValue.get("target");
                            if (targetValue != null) {
                                String targetInstance;
                                targetInstance = targetValue.getTextValue();
                                resourceManagementErrorInstance.setTarget(targetInstance);
                            }
                        }
                    }
                    
                    JsonNode codeValue2 = errorValue.get("code");
                    if (codeValue2 != null) {
                        String codeInstance2;
                        codeInstance2 = codeValue2.getTextValue();
                        errorInstance.setCode(codeInstance2);
                    }
                    
                    JsonNode messageValue2 = errorValue.get("message");
                    if (messageValue2 != null) {
                        String messageInstance2;
                        messageInstance2 = messageValue2.getTextValue();
                        errorInstance.setMessage(messageInstance2);
                    }
                    
                    JsonNode targetValue2 = errorValue.get("target");
                    if (targetValue2 != null) {
                        String targetInstance2;
                        targetInstance2 = targetValue2.getTextValue();
                        errorInstance.setTarget(targetInstance2);
                    }
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            if (statusCode == HttpStatus.SC_OK) {
                result.setIsValid(true);
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
}
