/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.resources;

import com.microsoft.azure.management.resources.models.BasicResource;
import com.microsoft.azure.management.resources.models.Resource;
import com.microsoft.azure.management.resources.models.ResourceCreateOrUpdateParameters;
import com.microsoft.azure.management.resources.models.ResourceCreateOrUpdateResult;
import com.microsoft.azure.management.resources.models.ResourceExistsResult;
import com.microsoft.azure.management.resources.models.ResourceGetResult;
import com.microsoft.azure.management.resources.models.ResourceIdentity;
import com.microsoft.azure.management.resources.models.ResourceListParameters;
import com.microsoft.azure.management.resources.models.ResourceListResult;
import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.core.pipeline.apache.CustomHttpDelete;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.regex.Pattern;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.ObjectNode;

/**
* Operations for managing resources.
*/
public class ResourceOperationsImpl implements ServiceOperations<ResourceManagementClientImpl>, ResourceOperations {
    /**
    * Initializes a new instance of the ResourceOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    ResourceOperationsImpl(ResourceManagementClientImpl client) {
        this.client = client;
    }
    
    private ResourceManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.azure.management.resources.ResourceManagementClientImpl.
    * @return The Client value.
    */
    public ResourceManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * Checks whether resource exists.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @return Resource group information.
    */
    @Override
    public Future<ResourceExistsResult> checkExistenceAsync(final String resourceGroupName, final ResourceIdentity identity) {
        return this.getClient().getExecutorService().submit(new Callable<ResourceExistsResult>() { 
            @Override
            public ResourceExistsResult call() throws Exception {
                return checkExistence(resourceGroupName, identity);
            }
         });
    }
    
    /**
    * Checks whether resource exists.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return Resource group information.
    */
    @Override
    public ResourceExistsResult checkExistence(String resourceGroupName, ResourceIdentity identity) throws IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (identity == null) {
            throw new NullPointerException("identity");
        }
        if (identity.getResourceName() == null) {
            throw new NullPointerException("identity.ResourceName");
        }
        if (identity.getResourceProviderApiVersion() == null) {
            throw new NullPointerException("identity.ResourceProviderApiVersion");
        }
        if (identity.getResourceProviderNamespace() == null) {
            throw new NullPointerException("identity.ResourceProviderNamespace");
        }
        if (identity.getResourceType() == null) {
            throw new NullPointerException("identity.ResourceType");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("identity", identity);
            CloudTracing.enter(invocationId, this, "checkExistenceAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/providers/" + identity.getResourceProviderNamespace().trim() + "/" + (identity.getParentResourcePath() != null ? identity.getParentResourcePath().trim() : "") + "/" + identity.getResourceType().trim() + "/" + identity.getResourceName().trim() + "?";
        url = url + "api-version=" + URLEncoder.encode(identity.getResourceProviderApiVersion().trim(), "UTF-8");
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_NOT_FOUND) {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ResourceExistsResult result = null;
            result = new ResourceExistsResult();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            if (statusCode == HttpStatus.SC_OK) {
                result.setExists(true);
            } else {
                result.setExists(false);
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Create a resource.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @param parameters Required. Create or update resource parameters.
    * @return Resource information.
    */
    @Override
    public Future<ResourceCreateOrUpdateResult> createOrUpdateAsync(final String resourceGroupName, final ResourceIdentity identity, final ResourceCreateOrUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<ResourceCreateOrUpdateResult>() { 
            @Override
            public ResourceCreateOrUpdateResult call() throws Exception {
                return createOrUpdate(resourceGroupName, identity, parameters);
            }
         });
    }
    
    /**
    * Create a resource.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @param parameters Required. Create or update resource parameters.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return Resource information.
    */
    @Override
    public ResourceCreateOrUpdateResult createOrUpdate(String resourceGroupName, ResourceIdentity identity, ResourceCreateOrUpdateParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (identity == null) {
            throw new NullPointerException("identity");
        }
        if (identity.getResourceName() == null) {
            throw new NullPointerException("identity.ResourceName");
        }
        if (identity.getResourceProviderApiVersion() == null) {
            throw new NullPointerException("identity.ResourceProviderApiVersion");
        }
        if (identity.getResourceProviderNamespace() == null) {
            throw new NullPointerException("identity.ResourceProviderNamespace");
        }
        if (identity.getResourceType() == null) {
            throw new NullPointerException("identity.ResourceType");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getResource() == null) {
            throw new NullPointerException("parameters.Resource");
        }
        if (parameters.getResource().getLocation() == null) {
            throw new NullPointerException("parameters.Resource.Location");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("identity", identity);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createOrUpdateAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/providers/" + identity.getResourceProviderNamespace().trim() + "/" + (identity.getParentResourcePath() != null ? identity.getParentResourcePath().trim() : "") + "/" + identity.getResourceType().trim() + "/" + identity.getResourceName().trim() + "?";
        url = url + "api-version=" + URLEncoder.encode(identity.getResourceProviderApiVersion().trim(), "UTF-8");
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpPut httpRequest = new HttpPut(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Serialize Request
        String requestContent = null;
        JsonNode requestDoc = null;
        
        ObjectMapper objectMapper = new ObjectMapper();
        requestDoc = objectMapper.createObjectNode();
        ((ObjectNode) requestDoc).put("location", parameters.getResource().getLocation());
        
        if (parameters.getResource().getProperties() != null) {
            ((ObjectNode) requestDoc).put("properties", parameters.getResource().getProperties());
        }
        
        if (parameters.getResource().getProvisioningState() != null) {
            ((ObjectNode) requestDoc).put("provisioningState", parameters.getResource().getProvisioningState());
        }
        
        StringWriter stringWriter = new StringWriter();
        objectMapper.writeValue(stringWriter, requestDoc);
        requestContent = stringWriter.toString();
        StringEntity entity = new StringEntity(requestContent);
        httpRequest.setEntity(entity);
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_CREATED) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, requestContent, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ResourceCreateOrUpdateResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ResourceCreateOrUpdateResult();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                BasicResource resourceInstance = new BasicResource();
                result.setResource(resourceInstance);
                
                JsonNode propertiesValue = responseDoc.get("properties");
                if (propertiesValue != null) {
                    JsonNode provisioningStateValue = propertiesValue.get("provisioningState");
                    if (provisioningStateValue != null) {
                        String provisioningStateInstance;
                        provisioningStateInstance = provisioningStateValue.getTextValue();
                        resourceInstance.setProvisioningState(provisioningStateInstance);
                    }
                }
                
                JsonNode locationValue = responseDoc.get("location");
                if (locationValue != null) {
                    String locationInstance;
                    locationInstance = locationValue.getTextValue();
                    resourceInstance.setLocation(locationInstance);
                }
                
                JsonNode propertiesValue2 = responseDoc.get("properties");
                if (propertiesValue2 != null) {
                    String propertiesInstance;
                    propertiesInstance = propertiesValue2.getTextValue();
                    resourceInstance.setProperties(propertiesInstance);
                }
                
                JsonNode provisioningStateValue2 = responseDoc.get("provisioningState");
                if (provisioningStateValue2 != null) {
                    String provisioningStateInstance2;
                    provisioningStateInstance2 = provisioningStateValue2.getTextValue();
                    resourceInstance.setProvisioningState(provisioningStateInstance2);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Delete resource and all of its resources.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String resourceGroupName, final ResourceIdentity identity) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return delete(resourceGroupName, identity);
            }
         });
    }
    
    /**
    * Delete resource and all of its resources.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws IOException Thrown if there was an error setting up tracing for
    * the request.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String resourceGroupName, ResourceIdentity identity) throws InterruptedException, ExecutionException, IOException, ServiceException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (identity == null) {
            throw new NullPointerException("identity");
        }
        if (identity.getResourceName() == null) {
            throw new NullPointerException("identity.ResourceName");
        }
        if (identity.getResourceProviderApiVersion() == null) {
            throw new NullPointerException("identity.ResourceProviderApiVersion");
        }
        if (identity.getResourceProviderNamespace() == null) {
            throw new NullPointerException("identity.ResourceProviderNamespace");
        }
        if (identity.getResourceType() == null) {
            throw new NullPointerException("identity.ResourceType");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("identity", identity);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/providers/" + identity.getResourceProviderNamespace().trim() + "/" + (identity.getParentResourcePath() != null ? identity.getParentResourcePath().trim() : "") + "/" + identity.getResourceType().trim() + "/" + identity.getResourceName().trim() + "?";
        url = url + "api-version=" + URLEncoder.encode(identity.getResourceProviderApiVersion().trim(), "UTF-8");
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        CustomHttpDelete httpRequest = new CustomHttpDelete(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_ACCEPTED && statusCode != HttpStatus.SC_NO_CONTENT) {
                ServiceException ex = ServiceException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Returns a resource belonging to a resource group.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @return Resource information.
    */
    @Override
    public Future<ResourceGetResult> getAsync(final String resourceGroupName, final ResourceIdentity identity) {
        return this.getClient().getExecutorService().submit(new Callable<ResourceGetResult>() { 
            @Override
            public ResourceGetResult call() throws Exception {
                return get(resourceGroupName, identity);
            }
         });
    }
    
    /**
    * Returns a resource belonging to a resource group.
    *
    * @param resourceGroupName Required. The name of the resource group. The
    * name is case insensitive.
    * @param identity Required. Resource identity.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return Resource information.
    */
    @Override
    public ResourceGetResult get(String resourceGroupName, ResourceIdentity identity) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (resourceGroupName == null) {
            throw new NullPointerException("resourceGroupName");
        }
        if (resourceGroupName != null && resourceGroupName.length() > 1000) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (Pattern.matches("^[-\\w\\._]+$", resourceGroupName) == false) {
            throw new IllegalArgumentException("resourceGroupName");
        }
        if (identity == null) {
            throw new NullPointerException("identity");
        }
        if (identity.getResourceName() == null) {
            throw new NullPointerException("identity.ResourceName");
        }
        if (identity.getResourceProviderApiVersion() == null) {
            throw new NullPointerException("identity.ResourceProviderApiVersion");
        }
        if (identity.getResourceProviderNamespace() == null) {
            throw new NullPointerException("identity.ResourceProviderNamespace");
        }
        if (identity.getResourceType() == null) {
            throw new NullPointerException("identity.ResourceType");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceGroupName", resourceGroupName);
            tracingParameters.put("identity", identity);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/resourcegroups/" + resourceGroupName.trim() + "/providers/" + identity.getResourceProviderNamespace().trim() + "/" + (identity.getParentResourcePath() != null ? identity.getParentResourcePath().trim() : "") + "/" + identity.getResourceType().trim() + "/" + identity.getResourceName().trim() + "?";
        url = url + "api-version=" + URLEncoder.encode(identity.getResourceProviderApiVersion().trim(), "UTF-8");
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ResourceGetResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ResourceGetResult();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                Resource resourceInstance = new Resource();
                result.setResource(resourceInstance);
                
                JsonNode idValue = responseDoc.get("id");
                if (idValue != null) {
                    String idInstance;
                    idInstance = idValue.getTextValue();
                    resourceInstance.setId(idInstance);
                }
                
                JsonNode nameValue = responseDoc.get("name");
                if (nameValue != null) {
                    String nameInstance;
                    nameInstance = nameValue.getTextValue();
                    resourceInstance.setName(nameInstance);
                }
                
                JsonNode typeValue = responseDoc.get("type");
                if (typeValue != null) {
                    String typeInstance;
                    typeInstance = typeValue.getTextValue();
                    resourceInstance.setType(typeInstance);
                }
                
                JsonNode propertiesValue = responseDoc.get("properties");
                if (propertiesValue != null) {
                    JsonNode provisioningStateValue = propertiesValue.get("provisioningState");
                    if (provisioningStateValue != null) {
                        String provisioningStateInstance;
                        provisioningStateInstance = provisioningStateValue.getTextValue();
                        resourceInstance.setProvisioningState(provisioningStateInstance);
                    }
                }
                
                JsonNode locationValue = responseDoc.get("location");
                if (locationValue != null) {
                    String locationInstance;
                    locationInstance = locationValue.getTextValue();
                    resourceInstance.setLocation(locationInstance);
                }
                
                JsonNode propertiesValue2 = responseDoc.get("properties");
                if (propertiesValue2 != null) {
                    String propertiesInstance;
                    propertiesInstance = propertiesValue2.getTextValue();
                    resourceInstance.setProperties(propertiesInstance);
                }
                
                JsonNode provisioningStateValue2 = responseDoc.get("provisioningState");
                if (provisioningStateValue2 != null) {
                    String provisioningStateInstance2;
                    provisioningStateInstance2 = provisioningStateValue2.getTextValue();
                    resourceInstance.setProvisioningState(provisioningStateInstance2);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get all of the resources under a subscription.
    *
    * @param parameters Optional. Query parameters. If null is passed returns
    * all resource groups.
    * @return List of resource groups.
    */
    @Override
    public Future<ResourceListResult> listAsync(final ResourceListParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<ResourceListResult>() { 
            @Override
            public ResourceListResult call() throws Exception {
                return list(parameters);
            }
         });
    }
    
    /**
    * Get all of the resources under a subscription.
    *
    * @param parameters Optional. Query parameters. If null is passed returns
    * all resource groups.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return List of resource groups.
    */
    @Override
    public ResourceListResult list(ResourceListParameters parameters) throws IOException, ServiceException, URISyntaxException {
        // Validate
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/subscriptions/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/";
        if (parameters != null && parameters.getResourceGroupName() != null) {
            url = url + "resourceGroups/" + URLEncoder.encode(parameters.getResourceGroupName() != null ? parameters.getResourceGroupName().trim() : "", "UTF-8") + "/";
        }
        url = url + "resources" + "?";
        url = url + "api-version=" + "2014-04-01-preview";
        if (parameters != null && parameters.getTop() != null) {
            url = url + "&" + "$top=" + URLEncoder.encode(Integer.toString(parameters.getTop()), "UTF-8");
        }
        if (parameters != null && parameters.getResourceType() != null) {
            url = url + "&" + "$filter=resourceType eq '" + URLEncoder.encode(parameters.getResourceType() != null ? parameters.getResourceType().trim() : "", "UTF-8") + "'";
        }
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ResourceListResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ResourceListResult();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                JsonNode valueArray = responseDoc.get("value");
                if (valueArray != null) {
                    for (JsonNode valueValue : ((ArrayNode) valueArray)) {
                        Resource resourceJsonFormatInstance = new Resource();
                        result.getResources().add(resourceJsonFormatInstance);
                        
                        JsonNode idValue = valueValue.get("id");
                        if (idValue != null) {
                            String idInstance;
                            idInstance = idValue.getTextValue();
                            resourceJsonFormatInstance.setId(idInstance);
                        }
                        
                        JsonNode nameValue = valueValue.get("name");
                        if (nameValue != null) {
                            String nameInstance;
                            nameInstance = nameValue.getTextValue();
                            resourceJsonFormatInstance.setName(nameInstance);
                        }
                        
                        JsonNode typeValue = valueValue.get("type");
                        if (typeValue != null) {
                            String typeInstance;
                            typeInstance = typeValue.getTextValue();
                            resourceJsonFormatInstance.setType(typeInstance);
                        }
                        
                        JsonNode propertiesValue = valueValue.get("properties");
                        if (propertiesValue != null) {
                            JsonNode provisioningStateValue = propertiesValue.get("provisioningState");
                            if (provisioningStateValue != null) {
                                String provisioningStateInstance;
                                provisioningStateInstance = provisioningStateValue.getTextValue();
                                resourceJsonFormatInstance.setProvisioningState(provisioningStateInstance);
                            }
                        }
                        
                        JsonNode locationValue = valueValue.get("location");
                        if (locationValue != null) {
                            String locationInstance;
                            locationInstance = locationValue.getTextValue();
                            resourceJsonFormatInstance.setLocation(locationInstance);
                        }
                        
                        JsonNode propertiesValue2 = valueValue.get("properties");
                        if (propertiesValue2 != null) {
                            String propertiesInstance;
                            propertiesInstance = propertiesValue2.getTextValue();
                            resourceJsonFormatInstance.setProperties(propertiesInstance);
                        }
                        
                        JsonNode provisioningStateValue2 = valueValue.get("provisioningState");
                        if (provisioningStateValue2 != null) {
                            String provisioningStateInstance2;
                            provisioningStateInstance2 = provisioningStateValue2.getTextValue();
                            resourceJsonFormatInstance.setProvisioningState(provisioningStateInstance2);
                        }
                    }
                }
                
                JsonNode odatanextLinkValue = responseDoc.get("@odata.nextLink");
                if (odatanextLinkValue != null) {
                    String odatanextLinkInstance;
                    odatanextLinkInstance = odatanextLinkValue.getTextValue();
                    result.setNextLink(odatanextLinkInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
    
    /**
    * Get a list of deployments.
    *
    * @param nextLink Required. NextLink from the previous successful call to
    * List operation.
    * @return List of resource groups.
    */
    @Override
    public Future<ResourceListResult> listNextAsync(final String nextLink) {
        return this.getClient().getExecutorService().submit(new Callable<ResourceListResult>() { 
            @Override
            public ResourceListResult call() throws Exception {
                return listNext(nextLink);
            }
         });
    }
    
    /**
    * Get a list of deployments.
    *
    * @param nextLink Required. NextLink from the previous successful call to
    * List operation.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred. This class is the general class of exceptions produced by
    * failed or interrupted I/O operations.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return List of resource groups.
    */
    @Override
    public ResourceListResult listNext(String nextLink) throws IOException, ServiceException, URISyntaxException {
        // Validate
        if (nextLink == null) {
            throw new NullPointerException("nextLink");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("nextLink", nextLink);
            CloudTracing.enter(invocationId, this, "listNextAsync", tracingParameters);
        }
        
        // Construct URL
        String url = nextLink.trim();
        
        // Create HTTP transport objects
        HttpGet httpRequest = new HttpGet(url);
        
        // Set Headers
        httpRequest.setHeader("Content-Type", "application/json");
        
        // Send Request
        HttpResponse httpResponse = null;
        try {
            if (shouldTrace) {
                CloudTracing.sendRequest(invocationId, httpRequest);
            }
            httpResponse = this.getClient().getHttpClient().execute(httpRequest);
            if (shouldTrace) {
                CloudTracing.receiveResponse(invocationId, httpResponse);
            }
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                ServiceException ex = ServiceException.createFromJson(httpRequest, null, httpResponse, httpResponse.getEntity());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ResourceListResult result = null;
            // Deserialize Response
            InputStream responseContent = httpResponse.getEntity().getContent();
            result = new ResourceListResult();
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseDoc = null;
            if (responseContent == null == false) {
                responseDoc = objectMapper.readTree(responseContent);
            }
            
            if (responseDoc != null) {
                JsonNode valueArray = responseDoc.get("value");
                if (valueArray != null) {
                    for (JsonNode valueValue : ((ArrayNode) valueArray)) {
                        Resource resourceJsonFormatInstance = new Resource();
                        result.getResources().add(resourceJsonFormatInstance);
                        
                        JsonNode idValue = valueValue.get("id");
                        if (idValue != null) {
                            String idInstance;
                            idInstance = idValue.getTextValue();
                            resourceJsonFormatInstance.setId(idInstance);
                        }
                        
                        JsonNode nameValue = valueValue.get("name");
                        if (nameValue != null) {
                            String nameInstance;
                            nameInstance = nameValue.getTextValue();
                            resourceJsonFormatInstance.setName(nameInstance);
                        }
                        
                        JsonNode typeValue = valueValue.get("type");
                        if (typeValue != null) {
                            String typeInstance;
                            typeInstance = typeValue.getTextValue();
                            resourceJsonFormatInstance.setType(typeInstance);
                        }
                        
                        JsonNode propertiesValue = valueValue.get("properties");
                        if (propertiesValue != null) {
                            JsonNode provisioningStateValue = propertiesValue.get("provisioningState");
                            if (provisioningStateValue != null) {
                                String provisioningStateInstance;
                                provisioningStateInstance = provisioningStateValue.getTextValue();
                                resourceJsonFormatInstance.setProvisioningState(provisioningStateInstance);
                            }
                        }
                        
                        JsonNode locationValue = valueValue.get("location");
                        if (locationValue != null) {
                            String locationInstance;
                            locationInstance = locationValue.getTextValue();
                            resourceJsonFormatInstance.setLocation(locationInstance);
                        }
                        
                        JsonNode propertiesValue2 = valueValue.get("properties");
                        if (propertiesValue2 != null) {
                            String propertiesInstance;
                            propertiesInstance = propertiesValue2.getTextValue();
                            resourceJsonFormatInstance.setProperties(propertiesInstance);
                        }
                        
                        JsonNode provisioningStateValue2 = valueValue.get("provisioningState");
                        if (provisioningStateValue2 != null) {
                            String provisioningStateInstance2;
                            provisioningStateInstance2 = provisioningStateValue2.getTextValue();
                            resourceJsonFormatInstance.setProvisioningState(provisioningStateInstance2);
                        }
                    }
                }
                
                JsonNode odatanextLinkValue = responseDoc.get("@odata.nextLink");
                if (odatanextLinkValue != null) {
                    String odatanextLinkInstance;
                    odatanextLinkInstance = odatanextLinkValue.getTextValue();
                    result.setNextLink(odatanextLinkInstance);
                }
            }
            
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").length > 0) {
                result.setRequestId(httpResponse.getFirstHeader("x-ms-request-id").getValue());
            }
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpResponse != null && httpResponse.getEntity() != null) {
                httpResponse.getEntity().getContent().close();
            }
        }
    }
}
