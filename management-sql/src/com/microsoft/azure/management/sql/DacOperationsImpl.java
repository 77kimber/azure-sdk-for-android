/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.sql;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.datatype.DatatypeFactoryImpl;
import com.microsoft.azure.core.utils.BOMInputStream;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.sql.models.DacExportParameters;
import com.microsoft.azure.management.sql.models.DacGetStatusParameters;
import com.microsoft.azure.management.sql.models.DacGetStatusResponse;
import com.microsoft.azure.management.sql.models.DacImportExportResponse;
import com.microsoft.azure.management.sql.models.DacImportParameters;
import com.microsoft.azure.management.sql.models.StatusInfo;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Calendar;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

/**
* Includes operations for importing and exporting Azure SQL Databases into and
* out of Azure blob storage.
*/
public class DacOperationsImpl implements ServiceOperations<SqlManagementClientImpl>, DacOperations {
    /**
    * Initializes a new instance of the DacOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    DacOperationsImpl(SqlManagementClientImpl client) {
        this.client = client;
    }
    
    private SqlManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.sql.SqlManagementClientImpl.
    * @return The Client value.
    */
    public SqlManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * Exports an Azure SQL Database into a DACPAC file in Azure Blob Storage.
    *
    * @param serverName Required. The name of the Azure SQL Database Server in
    * which the database to export resides.
    * @param parameters Optional. The parameters needed to initiate the export
    * request.
    * @return Represents the response that the service returns once an import
    * or export operation has been initiated.
    */
    @Override
    public Future<DacImportExportResponse> exportDatabaseAsync(final String serverName, final DacExportParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DacImportExportResponse>() { 
            @Override
            public DacImportExportResponse call() throws Exception {
                return exportDatabase(serverName, parameters);
            }
         });
    }
    
    /**
    * Exports an Azure SQL Database into a DACPAC file in Azure Blob Storage.
    *
    * @param serverName Required. The name of the Azure SQL Database Server in
    * which the database to export resides.
    * @param parameters Optional. The parameters needed to initiate the export
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return Represents the response that the service returns once an import
    * or export operation has been initiated.
    */
    @Override
    public DacImportExportResponse exportDatabase(String serverName, DacExportParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (parameters != null) {
            if (parameters.getBlobCredentials() != null) {
                if (parameters.getBlobCredentials().getStorageAccessKey() == null) {
                    throw new NullPointerException("parameters.BlobCredentials.StorageAccessKey");
                }
                if (parameters.getBlobCredentials().getUri() == null) {
                    throw new NullPointerException("parameters.BlobCredentials.Uri");
                }
            }
            if (parameters.getConnectionInfo() != null) {
                if (parameters.getConnectionInfo().getDatabaseName() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.DatabaseName");
                }
                if (parameters.getConnectionInfo().getPassword() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.Password");
                }
                if (parameters.getConnectionInfo().getServerName() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.ServerName");
                }
                if (parameters.getConnectionInfo().getUserName() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.UserName");
                }
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "exportDatabaseAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/sqlservers/servers/" + serverName.trim() + "/DacOperations/Export";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2012-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        if (parameters != null) {
            xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ExportInput");
            
            if (parameters.getBlobCredentials() != null) {
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "BlobCredentials");
                
                xmlSerializer.attribute("http://www.w3.org/2001/XMLSchema-instance", "type", "BlobStorageAccessKeyCredentials");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Uri");
                xmlSerializer.text(parameters.getBlobCredentials().getUri().toString());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Uri");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "StorageAccessKey");
                xmlSerializer.text(parameters.getBlobCredentials().getStorageAccessKey());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "StorageAccessKey");
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "BlobCredentials");
            }
            
            if (parameters.getConnectionInfo() != null) {
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ConnectionInfo");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "DatabaseName");
                xmlSerializer.text(parameters.getConnectionInfo().getDatabaseName());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "DatabaseName");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Password");
                xmlSerializer.text(parameters.getConnectionInfo().getPassword());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Password");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ServerName");
                xmlSerializer.text(parameters.getConnectionInfo().getServerName());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ServerName");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "UserName");
                xmlSerializer.text(parameters.getConnectionInfo().getUserName());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "UserName");
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ConnectionInfo");
            }
            xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ExportInput");
        }
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DacImportExportResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new DacImportExportResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "guid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "guid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.TEXT) {
                            result.setGuid(xmlPullParser.getText());
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Gets the status of the import or export operation in the specified server
    * with the corresponding request ID.  The request ID is provided in the
    * responses of the import or export operation.
    *
    * @param serverName Required. The name of the server in which the import or
    * export operation is taking place.
    * @param fullyQualifiedServerName Required. The fully qualified domain name
    * of the Azure SQL Database Server where the operation is taking place.
    * Example: a9s7f7s9d3.database.windows.net
    * @param username Required. The administrator username for the Azure SQL
    * Database Server.
    * @param password Required. The administrator password for the Azure SQL
    * Database Server.
    * @param requestId Required. The request ID of the operation being queried.
    * The request ID is obtained from the responses of the import and export
    * operations.
    * @return Represents a list of import or export status values returned from
    * GetStatus.
    */
    @Override
    public Future<DacGetStatusResponse> getStatusAsync(final String serverName, final String fullyQualifiedServerName, final String username, final String password, final String requestId) {
        return this.getClient().getExecutorService().submit(new Callable<DacGetStatusResponse>() { 
            @Override
            public DacGetStatusResponse call() throws Exception {
                return getStatus(serverName, fullyQualifiedServerName, username, password, requestId);
            }
         });
    }
    
    /**
    * Gets the status of the import or export operation in the specified server
    * with the corresponding request ID.  The request ID is provided in the
    * responses of the import or export operation.
    *
    * @param serverName Required. The name of the server in which the import or
    * export operation is taking place.
    * @param fullyQualifiedServerName Required. The fully qualified domain name
    * of the Azure SQL Database Server where the operation is taking place.
    * Example: a9s7f7s9d3.database.windows.net
    * @param username Required. The administrator username for the Azure SQL
    * Database Server.
    * @param password Required. The administrator password for the Azure SQL
    * Database Server.
    * @param requestId Required. The request ID of the operation being queried.
    * The request ID is obtained from the responses of the import and export
    * operations.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return Represents a list of import or export status values returned from
    * GetStatus.
    */
    @Override
    public DacGetStatusResponse getStatus(String serverName, String fullyQualifiedServerName, String username, String password, String requestId) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (fullyQualifiedServerName == null) {
            throw new NullPointerException("fullyQualifiedServerName");
        }
        if (username == null) {
            throw new NullPointerException("username");
        }
        if (password == null) {
            throw new NullPointerException("password");
        }
        if (requestId == null) {
            throw new NullPointerException("requestId");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("fullyQualifiedServerName", fullyQualifiedServerName);
            tracingParameters.put("username", username);
            tracingParameters.put("password", password);
            tracingParameters.put("requestId", requestId);
            CloudTracing.enter(invocationId, this, "getStatusAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/sqlservers/servers/" + serverName.trim() + "/DacOperations/Status" + "?";
        url = url + "servername=" + URLEncoder.encode(fullyQualifiedServerName.trim(), "UTF-8");
        url = url + "&" + "username=" + URLEncoder.encode(username.trim(), "UTF-8");
        url = url + "&" + "password=" + URLEncoder.encode(password.trim(), "UTF-8");
        url = url + "&" + "reqId=" + URLEncoder.encode(requestId.trim(), "UTF-8");
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2012-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DacGetStatusResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new DacGetStatusResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ArrayOfStatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ArrayOfStatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                    StatusInfo statusInfoInstance;
                                    statusInfoInstance = new StatusInfo();
                                    result.getStatusInfoList().add(statusInfoInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "BlobUri".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "BlobUri".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                URI blobUriInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    blobUriInstance = new URI(xmlPullParser.getText());
                                                    statusInfoInstance.setBlobUri(blobUriInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "DatabaseName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "DatabaseName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String databaseNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    databaseNameInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setDatabaseName(databaseNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ErrorMessage".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ErrorMessage".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String errorMessageInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    errorMessageInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setErrorMessage(errorMessageInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar lastModifiedTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    lastModifiedTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    statusInfoInstance.setLastModifiedTime(lastModifiedTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "QueuedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "QueuedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar queuedTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    queuedTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    statusInfoInstance.setQueuedTime(queuedTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "RequestId".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "RequestId".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String requestIdInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    requestIdInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setRequestId(requestIdInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "RequestType".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "RequestType".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String requestTypeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    requestTypeInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setRequestType(requestTypeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ServerName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ServerName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String serverNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    serverNameInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setServerName(serverNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String statusInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    statusInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setStatus(statusInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                            
                            eventType = xmlPullParser.next();
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Gets the status of the import or export operation in the specified server
    * with the corresponding request ID.  The request ID is provided in the
    * responses of the import or export operation.
    *
    * @param serverName Required. The name of the server in which the import or
    * export operation is taking place.
    * @param parameters Required. The parameters needed to get the status of an
    * import or export operation.
    * @return Represents a list of import or export status values returned from
    * GetStatus.
    */
    @Override
    public Future<DacGetStatusResponse> getStatusPostAsync(final String serverName, final DacGetStatusParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DacGetStatusResponse>() { 
            @Override
            public DacGetStatusResponse call() throws Exception {
                return getStatusPost(serverName, parameters);
            }
         });
    }
    
    /**
    * Gets the status of the import or export operation in the specified server
    * with the corresponding request ID.  The request ID is provided in the
    * responses of the import or export operation.
    *
    * @param serverName Required. The name of the server in which the import or
    * export operation is taking place.
    * @param parameters Required. The parameters needed to get the status of an
    * import or export operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return Represents a list of import or export status values returned from
    * GetStatus.
    */
    @Override
    public DacGetStatusResponse getStatusPost(String serverName, DacGetStatusParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getPassword() == null) {
            throw new NullPointerException("parameters.Password");
        }
        if (parameters.getRequestId() == null) {
            throw new NullPointerException("parameters.RequestId");
        }
        if (parameters.getServerName() == null) {
            throw new NullPointerException("parameters.ServerName");
        }
        if (parameters.getUserName() == null) {
            throw new NullPointerException("parameters.UserName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "getStatusPostAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/sqlservers/servers/" + serverName.trim() + "/DacOperations/Status";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2012-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "StatusInput");
        
        xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Password");
        xmlSerializer.text(parameters.getPassword());
        xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Password");
        
        xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "RequestId");
        xmlSerializer.text(parameters.getRequestId());
        xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "RequestId");
        
        xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ServerName");
        xmlSerializer.text(parameters.getServerName());
        xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ServerName");
        
        xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "UserName");
        xmlSerializer.text(parameters.getUserName());
        xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "UserName");
        xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "StatusInput");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DacGetStatusResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new DacGetStatusResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ArrayOfStatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ArrayOfStatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                    StatusInfo statusInfoInstance;
                                    statusInfoInstance = new StatusInfo();
                                    result.getStatusInfoList().add(statusInfoInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "StatusInfo".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "BlobUri".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "BlobUri".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                URI blobUriInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    blobUriInstance = new URI(xmlPullParser.getText());
                                                    statusInfoInstance.setBlobUri(blobUriInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "DatabaseName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "DatabaseName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String databaseNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    databaseNameInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setDatabaseName(databaseNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ErrorMessage".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ErrorMessage".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String errorMessageInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    errorMessageInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setErrorMessage(errorMessageInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar lastModifiedTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    lastModifiedTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    statusInfoInstance.setLastModifiedTime(lastModifiedTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "QueuedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "QueuedTime".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar queuedTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    queuedTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    statusInfoInstance.setQueuedTime(queuedTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "RequestId".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "RequestId".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String requestIdInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    requestIdInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setRequestId(requestIdInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "RequestType".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "RequestType".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String requestTypeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    requestTypeInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setRequestType(requestTypeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ServerName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ServerName".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String serverNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    serverNameInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setServerName(serverNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes".equals(xmlPullParser.getNamespace())) != true) {
                                                String statusInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    statusInstance = xmlPullParser.getText();
                                                    statusInfoInstance.setStatus(statusInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                            
                            eventType = xmlPullParser.next();
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Initiates an Import of a DACPAC file from Azure Blob Storage into a Azure
    * SQL Database.
    *
    * @param serverName Required. The name of the Azure SQL Database Server
    * into which the database is being imported.
    * @param parameters Optional. The parameters needed to initiated the Import
    * request.
    * @return Represents the response that the service returns once an import
    * or export operation has been initiated.
    */
    @Override
    public Future<DacImportExportResponse> importAsync(final String serverName, final DacImportParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<DacImportExportResponse>() { 
            @Override
            public DacImportExportResponse call() throws Exception {
                return importDatabase(serverName, parameters);
            }
         });
    }
    
    /**
    * Initiates an Import of a DACPAC file from Azure Blob Storage into a Azure
    * SQL Database.
    *
    * @param serverName Required. The name of the Azure SQL Database Server
    * into which the database is being imported.
    * @param parameters Optional. The parameters needed to initiated the Import
    * request.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return Represents the response that the service returns once an import
    * or export operation has been initiated.
    */
    @Override
    public DacImportExportResponse importDatabase(String serverName, DacImportParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (serverName == null) {
            throw new NullPointerException("serverName");
        }
        if (parameters != null) {
            if (parameters.getBlobCredentials() != null) {
                if (parameters.getBlobCredentials().getStorageAccessKey() == null) {
                    throw new NullPointerException("parameters.BlobCredentials.StorageAccessKey");
                }
                if (parameters.getBlobCredentials().getUri() == null) {
                    throw new NullPointerException("parameters.BlobCredentials.Uri");
                }
            }
            if (parameters.getConnectionInfo() != null) {
                if (parameters.getConnectionInfo().getDatabaseName() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.DatabaseName");
                }
                if (parameters.getConnectionInfo().getPassword() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.Password");
                }
                if (parameters.getConnectionInfo().getServerName() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.ServerName");
                }
                if (parameters.getConnectionInfo().getUserName() == null) {
                    throw new NullPointerException("parameters.ConnectionInfo.UserName");
                }
            }
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("serverName", serverName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "importAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/sqlservers/servers/" + serverName.trim() + "/DacOperations/Import";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2012-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        if (parameters != null) {
            xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ImportInput");
            
            if (parameters.getAzureEdition() != null) {
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "AzureEdition");
                xmlSerializer.text(parameters.getAzureEdition());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "AzureEdition");
            }
            
            if (parameters.getBlobCredentials() != null) {
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "BlobCredentials");
                
                xmlSerializer.attribute("http://www.w3.org/2001/XMLSchema-instance", "type", "BlobStorageAccessKeyCredentials");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Uri");
                xmlSerializer.text(parameters.getBlobCredentials().getUri().toString());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Uri");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "StorageAccessKey");
                xmlSerializer.text(parameters.getBlobCredentials().getStorageAccessKey());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "StorageAccessKey");
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "BlobCredentials");
            }
            
            if (parameters.getConnectionInfo() != null) {
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ConnectionInfo");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "DatabaseName");
                xmlSerializer.text(parameters.getConnectionInfo().getDatabaseName());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "DatabaseName");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Password");
                xmlSerializer.text(parameters.getConnectionInfo().getPassword());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "Password");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ServerName");
                xmlSerializer.text(parameters.getConnectionInfo().getServerName());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ServerName");
                
                xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "UserName");
                xmlSerializer.text(parameters.getConnectionInfo().getUserName());
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "UserName");
                xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ConnectionInfo");
            }
            
            xmlSerializer.startTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "DatabaseSizeInGB");
            xmlSerializer.text(Integer.toString(parameters.getDatabaseSizeInGB()));
            xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "DatabaseSizeInGB");
            xmlSerializer.endTag("http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes", "ImportInput");
        }
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            DacImportExportResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new DacImportExportResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "guid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "guid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.TEXT) {
                            result.setGuid(xmlPullParser.getText());
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
}
