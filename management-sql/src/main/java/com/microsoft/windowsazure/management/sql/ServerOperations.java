/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.sql;

import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.management.sql.models.ServerChangeAdministratorPasswordParameters;
import com.microsoft.windowsazure.management.sql.models.ServerCreateParameters;
import com.microsoft.windowsazure.management.sql.models.ServerCreateResponse;
import com.microsoft.windowsazure.management.sql.models.ServerListResponse;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.util.concurrent.Future;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;

/**
* The SQL Database Management API includes operations for managing SQL Database
* servers for a subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/gg715271.aspx for more
* information)
*/
public interface ServerOperations {
    /**
    * Sets the administrative password of a SQL Database server for a
    * subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx for
    * more information)
    *
    * @param serverName Required. The server that will have the change made to
    * the administrative user.
    * @param parameters Required. Parameters for the Manage Administrator
    * Password operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ParserConfigurationException Thrown if there was an error
    * configuring the parser for the response body.
    * @throws SAXException Thrown if there was an error parsing the response
    * body.
    * @throws TransformerException Thrown if there was an error creating the
    * DOM transformer.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse changeAdministratorPassword(String serverName, ServerChangeAdministratorPasswordParameters parameters) throws MalformedURLException, ProtocolException, ParserConfigurationException, SAXException, TransformerException, ServiceException, IOException;
    
    /**
    * Sets the administrative password of a SQL Database server for a
    * subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx for
    * more information)
    *
    * @param serverName Required. The server that will have the change made to
    * the administrative user.
    * @param parameters Required. Parameters for the Manage Administrator
    * Password operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> changeAdministratorPasswordAsync(String serverName, ServerChangeAdministratorPasswordParameters parameters);
    
    /**
    * Adds a new SQL Database server to a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Create Server
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ParserConfigurationException Thrown if there was an error
    * configuring the parser for the response body.
    * @throws SAXException Thrown if there was an error parsing the response
    * body.
    * @throws TransformerException Thrown if there was an error creating the
    * DOM transformer.
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return The response returned from the Create Server operation.
    */
    ServerCreateResponse create(ServerCreateParameters parameters) throws MalformedURLException, ProtocolException, ParserConfigurationException, SAXException, TransformerException, ServiceException, IOException;
    
    /**
    * Adds a new SQL Database server to a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Create Server
    * operation.
    * @return The response returned from the Create Server operation.
    */
    Future<ServerCreateResponse> createAsync(ServerCreateParameters parameters);
    
    /**
    * Drops a SQL Database server from a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx for
    * more information)
    *
    * @param serverName Required. The name of the server to be deleted.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse delete(String serverName) throws MalformedURLException, ProtocolException, ServiceException, IOException;
    
    /**
    * Drops a SQL Database server from a subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx for
    * more information)
    *
    * @param serverName Required. The name of the server to be deleted.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> deleteAsync(String serverName);
    
    /**
    * Returns all SQL Database servers that are provisioned for a subscription.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx
    * for more information)
    *
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws ParserConfigurationException Thrown if there was a serious
    * configuration error with the document parser.
    * @throws SAXException Thrown if there was an error parsing the XML
    * response.
    * @return The response structure for the Server List operation.
    */
    ServerListResponse list() throws MalformedURLException, ProtocolException, ServiceException, IOException, ParserConfigurationException, SAXException;
    
    /**
    * Returns all SQL Database servers that are provisioned for a subscription.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx
    * for more information)
    *
    * @return The response structure for the Server List operation.
    */
    Future<ServerListResponse> listAsync();
}
