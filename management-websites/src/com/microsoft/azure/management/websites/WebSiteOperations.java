/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.websites;

import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.websites.models.WebSiteCreateParameters;
import com.microsoft.azure.management.websites.models.WebSiteCreateResponse;
import com.microsoft.azure.management.websites.models.WebSiteDeleteParameters;
import com.microsoft.azure.management.websites.models.WebSiteDeleteRepositoryResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetConfigurationResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetHistoricalUsageMetricsParameters;
import com.microsoft.azure.management.websites.models.WebSiteGetHistoricalUsageMetricsResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetParameters;
import com.microsoft.azure.management.websites.models.WebSiteGetPublishProfileResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetRepositoryResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetUsageMetricsResponse;
import com.microsoft.azure.management.websites.models.WebSiteInstanceIdsResponse;
import com.microsoft.azure.management.websites.models.WebSiteIsHostnameAvailableResponse;
import com.microsoft.azure.management.websites.models.WebSiteOperationStatusResponse;
import com.microsoft.azure.management.websites.models.WebSiteUpdateConfigurationParameters;
import com.microsoft.azure.management.websites.models.WebSiteUpdateParameters;
import com.microsoft.azure.management.websites.models.WebSiteUpdateResponse;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URISyntaxException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParserException;

/**
* Operations for managing the web sites in a web space.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for more
* information)
*/
public interface WebSiteOperations {
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    WebSiteOperationStatusResponse beginSwapingSlots(String webSpaceName, String webSiteName, String sourceSlotName, String targetSlotName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException;
    
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    Future<WebSiteOperationStatusResponse> beginSwapingSlotsAsync(String webSpaceName, String webSiteName, String sourceSlotName, String targetSlotName);
    
    /**
    * You can create a web site by using a POST request that includes the name
    * of the web site and other information in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Create Web Site
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Create Web Site operation response.
    */
    WebSiteCreateResponse create(String webSpaceName, WebSiteCreateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException;
    
    /**
    * You can create a web site by using a POST request that includes the name
    * of the web site and other information in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Create Web Site
    * operation.
    * @return The Create Web Site operation response.
    */
    Future<WebSiteCreateResponse> createAsync(String webSpaceName, WebSiteCreateParameters parameters);
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository create operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse createRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException;
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository create operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> createRepositoryAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can delete a web site by issuing an HTTP DELETE request. If the web
    * site being deleted is the only site remaining in a server farm, you can
    * optionally delete the server farm as well by using the
    * deleteEmptyServerFarm parameter.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Delete Web Site
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse delete(String webSpaceName, String webSiteName, WebSiteDeleteParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException;
    
    /**
    * You can delete a web site by issuing an HTTP DELETE request. If the web
    * site being deleted is the only site remaining in a server farm, you can
    * optionally delete the server farm as well by using the
    * deleteEmptyServerFarm parameter.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Delete Web Site
    * operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> deleteAsync(String webSpaceName, String webSiteName, WebSiteDeleteParameters parameters);
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository delete operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Delete Repository Web Site operation response.
    */
    WebSiteDeleteRepositoryResponse deleteRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException;
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository delete operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Delete Repository Web Site operation response.
    */
    Future<WebSiteDeleteRepositoryResponse> deleteRepositoryAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can generate a new random password for publishing a site by issuing
    * an HTTP POST request. Tip: If you want to verify that the publish
    * password has changed, issue an HTTP GET on /publishxml before calling
    * /newpassword. In the publish XML, note the hash value in the userPWD
    * attribute. After calling /newpassword, call /publishxml again. You can
    * then compare the new value of userPWD in the Publish XML with the one
    * you noted earlier.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse generatePassword(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException;
    
    /**
    * You can generate a new random password for publishing a site by issuing
    * an HTTP POST request. Tip: If you want to verify that the publish
    * password has changed, issue an HTTP GET on /publishxml before calling
    * /newpassword. In the publish XML, note the hash value in the userPWD
    * attribute. After calling /newpassword, call /publishxml again. You can
    * then compare the new value of userPWD in the Publish XML with the one
    * you noted earlier.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> generatePasswordAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can retrieve details for a web site by issuing an HTTP GET request.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
    * for more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Optional. Parameters supplied to the Get Web Site
    * Operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Web Site operation response.
    */
    WebSiteGetResponse get(String webSpaceName, String webSiteName, WebSiteGetParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException;
    
    /**
    * You can retrieve details for a web site by issuing an HTTP GET request.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
    * for more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Optional. Parameters supplied to the Get Web Site
    * Operation.
    * @return The Get Web Site operation response.
    */
    Future<WebSiteGetResponse> getAsync(String webSpaceName, String webSiteName, WebSiteGetParameters parameters);
    
    /**
    * You can retrieve the config settings for a web site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The Get Configuration Web Site operation response.
    */
    WebSiteGetConfigurationResponse getConfiguration(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException;
    
    /**
    * You can retrieve the config settings for a web site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Configuration Web Site operation response.
    */
    Future<WebSiteGetConfigurationResponse> getConfigurationAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can retrieve historical usage metrics for a site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Get Historical
    * Usage Metrics Web Site operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Historical Usage Metrics Web Site operation response.
    */
    WebSiteGetHistoricalUsageMetricsResponse getHistoricalUsageMetrics(String webSpaceName, String webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException;
    
    /**
    * You can retrieve historical usage metrics for a site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Get Historical
    * Usage Metrics Web Site operation.
    * @return The Get Historical Usage Metrics Web Site operation response.
    */
    Future<WebSiteGetHistoricalUsageMetricsResponse> getHistoricalUsageMetricsAsync(String webSpaceName, String webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters);
    
    /**
    * You can retrieve the list of active instances by ids for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The web site instance ids response.
    */
    WebSiteInstanceIdsResponse getInstanceIds(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException;
    
    /**
    * You can retrieve the list of active instances by ids for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The web site instance ids response.
    */
    Future<WebSiteInstanceIdsResponse> getInstanceIdsAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can retrieve the publish settings information for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Publish Profile Web Site operation response.
    */
    WebSiteGetPublishProfileResponse getPublishProfile(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException;
    
    /**
    * You can retrieve the publish settings information for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Publish Profile Web Site operation response.
    */
    Future<WebSiteGetPublishProfileResponse> getPublishProfileAsync(String webSpaceName, String webSiteName);
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository get operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Repository Web Site operation response.
    */
    WebSiteGetRepositoryResponse getRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException;
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository get operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Repository Web Site operation response.
    */
    Future<WebSiteGetRepositoryResponse> getRepositoryAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can retrieve current usage metrics for a site by issuing an HTTP GET
    * request. The metrics returned include CPU Time, Data In, Data Out, Local
    * Bytes Read, Local Bytes Written, Network Bytes Read, Network Bytes
    * Written, WP Stop Requests, Memory Usage, CPU Time - Minute Limit, and
    * File System Storage.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Usage Metrics Web Site operation response.
    */
    WebSiteGetUsageMetricsResponse getUsageMetrics(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException;
    
    /**
    * You can retrieve current usage metrics for a site by issuing an HTTP GET
    * request. The metrics returned include CPU Time, Data In, Data Out, Local
    * Bytes Read, Local Bytes Written, Network Bytes Read, Network Bytes
    * Written, WP Stop Requests, Memory Usage, CPU Time - Minute Limit, and
    * File System Storage.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Usage Metrics Web Site operation response.
    */
    Future<WebSiteGetUsageMetricsResponse> getUsageMetricsAsync(String webSpaceName, String webSiteName);
    
    /**
    * Determines if a host name is available.
    *
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The Is Hostname Available Web Site operation response.
    */
    WebSiteIsHostnameAvailableResponse isHostnameAvailable(String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException;
    
    /**
    * Determines if a host name is available.
    *
    * @param webSiteName Required. The name of the web site.
    * @return The Is Hostname Available Web Site operation response.
    */
    Future<WebSiteIsHostnameAvailableResponse> isHostnameAvailableAsync(String webSiteName);
    
    /**
    * You can restart a web site by issuing an HTTP POST request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse restart(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException;
    
    /**
    * You can restart a web site by issuing an HTTP POST request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> restartAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    WebSiteOperationStatusResponse swapSlots(String webSpaceName, String webSiteName, String sourceSlotName, String targetSlotName) throws InterruptedException, ExecutionException, ServiceException;
    
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    Future<WebSiteOperationStatusResponse> swapSlotsAsync(String webSpaceName, String webSiteName, String sourceSlotName, String targetSlotName);
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository sync operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse syncRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException;
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository sync operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> syncRepositoryAsync(String webSpaceName, String webSiteName);
    
    /**
    * You can update the settings for a web site by using the HTTP PUT method
    * and by specifying the settings in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update Web Site
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Update Web Site operation response.
    */
    WebSiteUpdateResponse update(String webSpaceName, String webSiteName, WebSiteUpdateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException;
    
    /**
    * You can update the settings for a web site by using the HTTP PUT method
    * and by specifying the settings in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update Web Site
    * operation.
    * @return The Update Web Site operation response.
    */
    Future<WebSiteUpdateResponse> updateAsync(String webSpaceName, String webSiteName, WebSiteUpdateParameters parameters);
    
    /**
    * You can update the config settings for a web site by issuing an HTTP PUT
    * with a request body containing the updated settings.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update
    * Configuration Web Site operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    OperationResponse updateConfiguration(String webSpaceName, String webSiteName, WebSiteUpdateConfigurationParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException;
    
    /**
    * You can update the config settings for a web site by issuing an HTTP PUT
    * with a request body containing the updated settings.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update
    * Configuration Web Site operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    Future<OperationResponse> updateConfigurationAsync(String webSpaceName, String webSiteName, WebSiteUpdateConfigurationParameters parameters);
}
