/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.websites;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.datatype.DatatypeFactoryImpl;
import com.microsoft.azure.core.utils.BOMInputStream;
import com.microsoft.azure.core.utils.Base64;
import com.microsoft.azure.core.utils.CommaStringBuilder;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.websites.models.ManagedPipelineMode;
import com.microsoft.azure.management.websites.models.RemoteDebuggingVersion;
import com.microsoft.azure.management.websites.models.WebSite;
import com.microsoft.azure.management.websites.models.WebSiteComputeMode;
import com.microsoft.azure.management.websites.models.WebSiteCreateParameters;
import com.microsoft.azure.management.websites.models.WebSiteCreateResponse;
import com.microsoft.azure.management.websites.models.WebSiteDeleteParameters;
import com.microsoft.azure.management.websites.models.WebSiteDeleteRepositoryResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetConfigurationResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetHistoricalUsageMetricsParameters;
import com.microsoft.azure.management.websites.models.WebSiteGetHistoricalUsageMetricsResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetParameters;
import com.microsoft.azure.management.websites.models.WebSiteGetPublishProfileResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetRepositoryResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetResponse;
import com.microsoft.azure.management.websites.models.WebSiteGetUsageMetricsResponse;
import com.microsoft.azure.management.websites.models.WebSiteInstanceIdsResponse;
import com.microsoft.azure.management.websites.models.WebSiteIsHostnameAvailableResponse;
import com.microsoft.azure.management.websites.models.WebSiteMode;
import com.microsoft.azure.management.websites.models.WebSiteOperationStatus;
import com.microsoft.azure.management.websites.models.WebSiteOperationStatusResponse;
import com.microsoft.azure.management.websites.models.WebSiteRuntimeAvailabilityState;
import com.microsoft.azure.management.websites.models.WebSiteSslState;
import com.microsoft.azure.management.websites.models.WebSiteUpdateConfigurationParameters;
import com.microsoft.azure.management.websites.models.WebSiteUpdateParameters;
import com.microsoft.azure.management.websites.models.WebSiteUpdateResponse;
import com.microsoft.azure.management.websites.models.WebSiteUsageState;
import com.microsoft.azure.management.websites.models.WebSpaceAvailabilityState;
import com.microsoft.azure.tracing.ClientRequestTrackingHandler;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

/**
* Operations for managing the web sites in a web space.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for more
* information)
*/
public class WebSiteOperationsImpl implements ServiceOperations<WebSiteManagementClientImpl>, WebSiteOperations {
    /**
    * Initializes a new instance of the WebSiteOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    WebSiteOperationsImpl(WebSiteManagementClientImpl client) {
        this.client = client;
    }
    
    private WebSiteManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.websites.WebSiteManagementClientImpl.
    * @return The Client value.
    */
    public WebSiteManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    @Override
    public Future<WebSiteOperationStatusResponse> beginSwapingSlotsAsync(final String webSpaceName, final String webSiteName, final String sourceSlotName, final String targetSlotName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteOperationStatusResponse>() { 
            @Override
            public WebSiteOperationStatusResponse call() throws Exception {
                return beginSwapingSlots(webSpaceName, webSiteName, sourceSlotName, targetSlotName);
            }
         });
    }
    
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    @Override
    public WebSiteOperationStatusResponse beginSwapingSlots(String webSpaceName, String webSiteName, String sourceSlotName, String targetSlotName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        if (sourceSlotName == null) {
            throw new NullPointerException("sourceSlotName");
        }
        if (targetSlotName == null) {
            throw new NullPointerException("targetSlotName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            tracingParameters.put("sourceSlotName", sourceSlotName);
            tracingParameters.put("targetSlotName", targetSlotName);
            CloudTracing.enter(invocationId, this, "beginSwapingSlotsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "(" + sourceSlotName.trim() + ")/slots" + "?";
        url = url + "Command=swap";
        url = url + "&" + "targetSlot=" + URLEncoder.encode(targetSlotName.trim(), "UTF-8");
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteOperationStatusResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteOperationStatusResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Operation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CreatedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar createdTimeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    createdTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    result.setCreatedTime(createdTimeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Errors".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Errors".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Error".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSiteOperationStatusResponse.Error errorInstance;
                                    errorInstance = new WebSiteOperationStatusResponse.Error();
                                    result.getErrors().add(errorInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "Error".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String codeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    codeInstance = xmlPullParser.getText();
                                                    errorInstance.setCode(codeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String messageInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    messageInstance = xmlPullParser.getText();
                                                    errorInstance.setMessage(messageInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ExtendedCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExtendedCode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String extendedCodeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    extendedCodeInstance = xmlPullParser.getText();
                                                    errorInstance.setExtendedCode(extendedCodeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "MessageTemplate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "MessageTemplate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String messageTemplateInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    messageTemplateInstance = xmlPullParser.getText();
                                                    errorInstance.setMessageTemplate(messageTemplateInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Parameters".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Parameters".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    errorInstance.getParameters().add(xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "InnerErrors".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "InnerErrors".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String innerErrorsInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    innerErrorsInstance = xmlPullParser.getText();
                                                    errorInstance.setInnerErrors(innerErrorsInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ExpirationTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ExpirationTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar expirationTimeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    expirationTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    result.setExpirationTime(expirationTimeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "GeoMasterOperationId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "GeoMasterOperationId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String geoMasterOperationIdInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    geoMasterOperationIdInstance = xmlPullParser.getText();
                                    result.setGeoMasterOperationId(geoMasterOperationIdInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Id".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String idInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    idInstance = xmlPullParser.getText();
                                    result.setOperationId(idInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ModifiedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar modifiedTimeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    modifiedTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    result.setModifiedTime(modifiedTimeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance = xmlPullParser.getText();
                                    result.setName(nameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteOperationStatus statusInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    statusInstance = WebSiteOperationStatus.valueOf(xmlPullParser.getText());
                                    result.setStatus(statusInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can create a web site by using a POST request that includes the name
    * of the web site and other information in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Create Web Site
    * operation.
    * @return The Create Web Site operation response.
    */
    @Override
    public Future<WebSiteCreateResponse> createAsync(final String webSpaceName, final WebSiteCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteCreateResponse>() { 
            @Override
            public WebSiteCreateResponse call() throws Exception {
                return create(webSpaceName, parameters);
            }
         });
    }
    
    /**
    * You can create a web site by using a POST request that includes the name
    * of the web site and other information in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Create Web Site
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Create Web Site operation response.
    */
    @Override
    public WebSiteCreateResponse create(String webSpaceName, WebSiteCreateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getName() == null) {
            throw new NullPointerException("parameters.Name");
        }
        if (parameters.getWebSpace() != null) {
            if (parameters.getWebSpace().getGeoRegion() == null) {
                throw new NullPointerException("parameters.WebSpace.GeoRegion");
            }
            if (parameters.getWebSpace().getName() == null) {
                throw new NullPointerException("parameters.WebSpace.Name");
            }
            if (parameters.getWebSpace().getPlan() == null) {
                throw new NullPointerException("parameters.WebSpace.Plan");
            }
        }
        if (parameters.getWebSpaceName() == null) {
            throw new NullPointerException("parameters.WebSpaceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Site");
        
        if (parameters.getHostNames() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostNames");
            for (String hostNamesItem : parameters.getHostNames()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string");
                xmlSerializer.text(hostNamesItem);
                xmlSerializer.endTag("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostNames");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
        xmlSerializer.text(parameters.getName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
        
        if (parameters.getComputeMode() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ComputeMode");
            xmlSerializer.text(parameters.getComputeMode().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ComputeMode");
        }
        
        if (parameters.getServerFarm() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
            xmlSerializer.text(parameters.getServerFarm());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
        }
        
        if (parameters.getSiteMode() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SiteMode");
            xmlSerializer.text(parameters.getSiteMode().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SiteMode");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WebSpace");
        xmlSerializer.text(parameters.getWebSpaceName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WebSpace");
        
        if (parameters.getWebSpace() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WebSpaceToCreate");
            
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "GeoRegion");
            xmlSerializer.text(parameters.getWebSpace().getGeoRegion());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "GeoRegion");
            
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
            xmlSerializer.text(parameters.getWebSpace().getName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
            
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Plan");
            xmlSerializer.text(parameters.getWebSpace().getPlan());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Plan");
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WebSpaceToCreate");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Site");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK && statusCode != AzureHttpStatus.CREATED) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteCreateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteCreateResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Site".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Site".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        WebSite webSiteInstance;
                        if (result.getWebSite() == null) {
                            webSiteInstance = new WebSite();
                            result.setWebSite(webSiteInstance);
                        } else {
                            webSiteInstance = result.getWebSite();
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AdminEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AdminEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean adminEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    adminEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    webSiteInstance.setAdminEnabled(adminEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSpaceAvailabilityState availabilityStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    availabilityStateInstance = WebSpaceAvailabilityState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setAvailabilityState(availabilityStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteComputeMode computeModeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    computeModeInstance = WebSiteComputeMode.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setComputeMode(computeModeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Enabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Enabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean enabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    enabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    webSiteInstance.setEnabled(enabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "EnabledHostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "EnabledHostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.TEXT) {
                                    webSiteInstance.getEnabledHostNames().add(xmlPullParser.getText());
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostNameSslStates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostNameSslStates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "HostNameSslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSite.WebSiteHostNameSslState hostNameSslStateInstance;
                                    hostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                    webSiteInstance.getHostNameSslStates().add(hostNameSslStateInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "HostNameSslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String nameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    nameInstance = xmlPullParser.getText();
                                                    hostNameSslStateInstance.setName(nameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                WebSiteSslState sslStateInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    sslStateInstance = WebSiteSslState.valueOf(xmlPullParser.getText());
                                                    hostNameSslStateInstance.setSslState(sslStateInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String thumbprintInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    thumbprintInstance = xmlPullParser.getText();
                                                    hostNameSslStateInstance.setThumbprint(thumbprintInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                InetAddress virtualIPInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    virtualIPInstance = InetAddress.getByName(xmlPullParser.getText());
                                                    hostNameSslStateInstance.setVirtualIP(virtualIPInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.TEXT) {
                                    webSiteInstance.getHostNames().add(xmlPullParser.getText());
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTimeUtc".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTimeUtc".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar lastModifiedTimeUtcInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    lastModifiedTimeUtcInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    webSiteInstance.setLastModifiedTimeUtc(lastModifiedTimeUtcInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance2;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance2 = xmlPullParser.getText();
                                    webSiteInstance.setName(nameInstance2);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Owner".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Owner".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String ownerInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    ownerInstance = xmlPullParser.getText();
                                    webSiteInstance.setOwner(ownerInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RepositorySiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RepositorySiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String repositorySiteNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    repositorySiteNameInstance = xmlPullParser.getText();
                                    webSiteInstance.setRepositorySiteName(repositorySiteNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RuntimeAvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RuntimeAvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    runtimeAvailabilityStateInstance = WebSiteRuntimeAvailabilityState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setRuntimeAvailabilityState(runtimeAvailabilityStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SSLCertificates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SSLCertificates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Certificate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSite.WebSiteSslCertificate certificateInstance;
                                    certificateInstance = new WebSite.WebSiteSslCertificate();
                                    webSiteInstance.getSslCertificates().add(certificateInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "Certificate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ExpirationDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExpirationDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil = false;
                                                for (int i = 0; i < xmlPullParser.getAttributeCount(); i = i + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                        isNil = "true".equals(xmlPullParser.getAttributeValue(i));
                                                    }
                                                }
                                                if (isNil == false) {
                                                    Calendar expirationDateInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        expirationDateInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                        certificateInstance.setExpirationDate(expirationDateInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "FriendlyName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "FriendlyName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String friendlyNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    friendlyNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setFriendlyName(friendlyNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    certificateInstance.getHostNames().add(xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "IssueDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "IssueDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil2 = false;
                                                for (int i2 = 0; i2 < xmlPullParser.getAttributeCount(); i2 = i2 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i2)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                                        isNil2 = "true".equals(xmlPullParser.getAttributeValue(i2));
                                                    }
                                                }
                                                if (isNil2 == false) {
                                                    Calendar issueDateInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        issueDateInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                        certificateInstance.setIssueDate(issueDateInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Issuer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Issuer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String issuerInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    issuerInstance = xmlPullParser.getText();
                                                    certificateInstance.setIssuer(issuerInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String passwordInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    passwordInstance = xmlPullParser.getText();
                                                    certificateInstance.setPassword(passwordInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "PfxBlob".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "PfxBlob".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                byte[] pfxBlobInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    pfxBlobInstance = xmlPullParser.getText() != null ? Base64.decode(xmlPullParser.getText()) : null;
                                                    certificateInstance.setPfxBlob(pfxBlobInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                URI selfLinkInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    selfLinkInstance = new URI(xmlPullParser.getText());
                                                    certificateInstance.setSelfLinkUri(selfLinkInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String siteNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    siteNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setSiteName(siteNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SubjectName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SubjectName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String subjectNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    subjectNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setSubjectName(subjectNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String thumbprintInstance2;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    thumbprintInstance2 = xmlPullParser.getText();
                                                    certificateInstance.setThumbprint(thumbprintInstance2);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ToDelete".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ToDelete".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil3 = false;
                                                for (int i3 = 0; i3 < xmlPullParser.getAttributeCount(); i3 = i3 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i3)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i3))) {
                                                        isNil3 = "true".equals(xmlPullParser.getAttributeValue(i3));
                                                    }
                                                }
                                                if (isNil3 == false) {
                                                    boolean toDeleteInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        toDeleteInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                        certificateInstance.setIsToBeDeleted(toDeleteInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Valid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Valid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil4 = false;
                                                for (int i4 = 0; i4 < xmlPullParser.getAttributeCount(); i4 = i4 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i4)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i4))) {
                                                        isNil4 = "true".equals(xmlPullParser.getAttributeValue(i4));
                                                    }
                                                }
                                                if (isNil4 == false) {
                                                    boolean validInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        validInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                        certificateInstance.setIsValid(validInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI selfLinkInstance2;
                                if (eventType == XmlPullParser.TEXT) {
                                    selfLinkInstance2 = new URI(xmlPullParser.getText());
                                    webSiteInstance.setUri(selfLinkInstance2);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String serverFarmInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    serverFarmInstance = xmlPullParser.getText();
                                    webSiteInstance.setServerFarm(serverFarmInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteMode siteModeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    siteModeInstance = WebSiteMode.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setSiteMode(siteModeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SiteProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SiteProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSite.WebSiteProperties sitePropertiesInstance;
                                if (webSiteInstance.getSiteProperties() == null) {
                                    sitePropertiesInstance = new WebSite.WebSiteProperties();
                                    webSiteInstance.setSiteProperties(sitePropertiesInstance);
                                } else {
                                    sitePropertiesInstance = webSiteInstance.getSiteProperties();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key = null;
                                                String value = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key != null && value != null) {
                                                    sitePropertiesInstance.getAppSettings().put(key, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key2 = null;
                                                String value2 = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key2 != null && value2 != null) {
                                                    sitePropertiesInstance.getMetadata().put(key2, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Properties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Properties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key3 = null;
                                                String value3 = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key3 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value3 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key3 != null && value3 != null) {
                                                    sitePropertiesInstance.getProperties().put(key3, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String stateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    stateInstance = xmlPullParser.getText();
                                    webSiteInstance.setState(stateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "UsageState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UsageState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteUsageState usageStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    usageStateInstance = WebSiteUsageState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setUsageState(usageStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "WebSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "WebSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String webSpaceInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    webSpaceInstance = xmlPullParser.getText();
                                    webSiteInstance.setWebSpace(webSpaceInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository create operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> createRepositoryAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return createRepository(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository create operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse createRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "createRepositoryAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/repository";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can delete a web site by issuing an HTTP DELETE request. If the web
    * site being deleted is the only site remaining in a server farm, you can
    * optionally delete the server farm as well by using the
    * deleteEmptyServerFarm parameter.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Delete Web Site
    * operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String webSpaceName, final String webSiteName, final WebSiteDeleteParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return delete(webSpaceName, webSiteName, parameters);
            }
         });
    }
    
    /**
    * You can delete a web site by issuing an HTTP DELETE request. If the web
    * site being deleted is the only site remaining in a server farm, you can
    * optionally delete the server farm as well by using the
    * deleteEmptyServerFarm parameter.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Delete Web Site
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String webSpaceName, String webSiteName, WebSiteDeleteParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "?";
        url = url + "deleteEmptyServerFarm=" + URLEncoder.encode(Boolean.toString(parameters.isDeleteEmptyServerFarm()).toLowerCase(), "UTF-8");
        url = url + "&" + "deleteMetrics=" + URLEncoder.encode(Boolean.toString(parameters.isDeleteMetrics()).toLowerCase(), "UTF-8");
        url = url + "&" + "deleteAllSlots=" + URLEncoder.encode(Boolean.toString(parameters.isDeleteAllSlots()).toLowerCase(), "UTF-8");
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository delete operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Delete Repository Web Site operation response.
    */
    @Override
    public Future<WebSiteDeleteRepositoryResponse> deleteRepositoryAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteDeleteRepositoryResponse>() { 
            @Override
            public WebSiteDeleteRepositoryResponse call() throws Exception {
                return deleteRepository(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository delete operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Delete Repository Web Site operation response.
    */
    @Override
    public WebSiteDeleteRepositoryResponse deleteRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "deleteRepositoryAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/repository";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteDeleteRepositoryResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteDeleteRepositoryResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "anyURI".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "anyURI".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.TEXT) {
                            result.setUri(new URI(xmlPullParser.getText()));
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can generate a new random password for publishing a site by issuing
    * an HTTP POST request. Tip: If you want to verify that the publish
    * password has changed, issue an HTTP GET on /publishxml before calling
    * /newpassword. In the publish XML, note the hash value in the userPWD
    * attribute. After calling /newpassword, call /publishxml again. You can
    * then compare the new value of userPWD in the Publish XML with the one
    * you noted earlier.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> generatePasswordAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return generatePassword(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * You can generate a new random password for publishing a site by issuing
    * an HTTP POST request. Tip: If you want to verify that the publish
    * password has changed, issue an HTTP GET on /publishxml before calling
    * /newpassword. In the publish XML, note the hash value in the userPWD
    * attribute. After calling /newpassword, call /publishxml again. You can
    * then compare the new value of userPWD in the Publish XML with the one
    * you noted earlier.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse generatePassword(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "generatePasswordAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/newpassword";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can retrieve details for a web site by issuing an HTTP GET request.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
    * for more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Optional. Parameters supplied to the Get Web Site
    * Operation.
    * @return The Get Web Site operation response.
    */
    @Override
    public Future<WebSiteGetResponse> getAsync(final String webSpaceName, final String webSiteName, final WebSiteGetParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteGetResponse>() { 
            @Override
            public WebSiteGetResponse call() throws Exception {
                return get(webSpaceName, webSiteName, parameters);
            }
         });
    }
    
    /**
    * You can retrieve details for a web site by issuing an HTTP GET request.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
    * for more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Optional. Parameters supplied to the Get Web Site
    * Operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Web Site operation response.
    */
    @Override
    public WebSiteGetResponse get(String webSpaceName, String webSiteName, WebSiteGetParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "?";
        if (parameters != null && parameters.getPropertiesToInclude() != null && parameters.getPropertiesToInclude().size() > 0) {
            url = url + "propertiesToInclude=" + URLEncoder.encode(CommaStringBuilder.join(parameters.getPropertiesToInclude()), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Site".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Site".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        WebSite webSiteInstance;
                        if (result.getWebSite() == null) {
                            webSiteInstance = new WebSite();
                            result.setWebSite(webSiteInstance);
                        } else {
                            webSiteInstance = result.getWebSite();
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AdminEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AdminEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean adminEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    adminEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    webSiteInstance.setAdminEnabled(adminEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSpaceAvailabilityState availabilityStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    availabilityStateInstance = WebSpaceAvailabilityState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setAvailabilityState(availabilityStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteComputeMode computeModeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    computeModeInstance = WebSiteComputeMode.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setComputeMode(computeModeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Enabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Enabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean enabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    enabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    webSiteInstance.setEnabled(enabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "EnabledHostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "EnabledHostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.TEXT) {
                                    webSiteInstance.getEnabledHostNames().add(xmlPullParser.getText());
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostNameSslStates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostNameSslStates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "HostNameSslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSite.WebSiteHostNameSslState hostNameSslStateInstance;
                                    hostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                    webSiteInstance.getHostNameSslStates().add(hostNameSslStateInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "HostNameSslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String nameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    nameInstance = xmlPullParser.getText();
                                                    hostNameSslStateInstance.setName(nameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                WebSiteSslState sslStateInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    sslStateInstance = WebSiteSslState.valueOf(xmlPullParser.getText());
                                                    hostNameSslStateInstance.setSslState(sslStateInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String thumbprintInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    thumbprintInstance = xmlPullParser.getText();
                                                    hostNameSslStateInstance.setThumbprint(thumbprintInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                InetAddress virtualIPInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    virtualIPInstance = InetAddress.getByName(xmlPullParser.getText());
                                                    hostNameSslStateInstance.setVirtualIP(virtualIPInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.TEXT) {
                                    webSiteInstance.getHostNames().add(xmlPullParser.getText());
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTimeUtc".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTimeUtc".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar lastModifiedTimeUtcInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    lastModifiedTimeUtcInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    webSiteInstance.setLastModifiedTimeUtc(lastModifiedTimeUtcInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance2;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance2 = xmlPullParser.getText();
                                    webSiteInstance.setName(nameInstance2);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Owner".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Owner".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String ownerInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    ownerInstance = xmlPullParser.getText();
                                    webSiteInstance.setOwner(ownerInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RepositorySiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RepositorySiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String repositorySiteNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    repositorySiteNameInstance = xmlPullParser.getText();
                                    webSiteInstance.setRepositorySiteName(repositorySiteNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RuntimeAvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RuntimeAvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    runtimeAvailabilityStateInstance = WebSiteRuntimeAvailabilityState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setRuntimeAvailabilityState(runtimeAvailabilityStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SSLCertificates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SSLCertificates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Certificate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSite.WebSiteSslCertificate certificateInstance;
                                    certificateInstance = new WebSite.WebSiteSslCertificate();
                                    webSiteInstance.getSslCertificates().add(certificateInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "Certificate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ExpirationDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExpirationDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil = false;
                                                for (int i = 0; i < xmlPullParser.getAttributeCount(); i = i + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                        isNil = "true".equals(xmlPullParser.getAttributeValue(i));
                                                    }
                                                }
                                                if (isNil == false) {
                                                    Calendar expirationDateInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        expirationDateInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                        certificateInstance.setExpirationDate(expirationDateInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "FriendlyName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "FriendlyName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String friendlyNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    friendlyNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setFriendlyName(friendlyNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    certificateInstance.getHostNames().add(xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "IssueDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "IssueDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil2 = false;
                                                for (int i2 = 0; i2 < xmlPullParser.getAttributeCount(); i2 = i2 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i2)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                                        isNil2 = "true".equals(xmlPullParser.getAttributeValue(i2));
                                                    }
                                                }
                                                if (isNil2 == false) {
                                                    Calendar issueDateInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        issueDateInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                        certificateInstance.setIssueDate(issueDateInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Issuer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Issuer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String issuerInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    issuerInstance = xmlPullParser.getText();
                                                    certificateInstance.setIssuer(issuerInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String passwordInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    passwordInstance = xmlPullParser.getText();
                                                    certificateInstance.setPassword(passwordInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "PfxBlob".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "PfxBlob".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                byte[] pfxBlobInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    pfxBlobInstance = xmlPullParser.getText() != null ? Base64.decode(xmlPullParser.getText()) : null;
                                                    certificateInstance.setPfxBlob(pfxBlobInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                URI selfLinkInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    selfLinkInstance = new URI(xmlPullParser.getText());
                                                    certificateInstance.setSelfLinkUri(selfLinkInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String siteNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    siteNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setSiteName(siteNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SubjectName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SubjectName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String subjectNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    subjectNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setSubjectName(subjectNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String thumbprintInstance2;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    thumbprintInstance2 = xmlPullParser.getText();
                                                    certificateInstance.setThumbprint(thumbprintInstance2);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ToDelete".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ToDelete".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil3 = false;
                                                for (int i3 = 0; i3 < xmlPullParser.getAttributeCount(); i3 = i3 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i3)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i3))) {
                                                        isNil3 = "true".equals(xmlPullParser.getAttributeValue(i3));
                                                    }
                                                }
                                                if (isNil3 == false) {
                                                    boolean toDeleteInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        toDeleteInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                        certificateInstance.setIsToBeDeleted(toDeleteInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Valid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Valid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil4 = false;
                                                for (int i4 = 0; i4 < xmlPullParser.getAttributeCount(); i4 = i4 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i4)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i4))) {
                                                        isNil4 = "true".equals(xmlPullParser.getAttributeValue(i4));
                                                    }
                                                }
                                                if (isNil4 == false) {
                                                    boolean validInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        validInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                        certificateInstance.setIsValid(validInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI selfLinkInstance2;
                                if (eventType == XmlPullParser.TEXT) {
                                    selfLinkInstance2 = new URI(xmlPullParser.getText());
                                    webSiteInstance.setUri(selfLinkInstance2);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String serverFarmInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    serverFarmInstance = xmlPullParser.getText();
                                    webSiteInstance.setServerFarm(serverFarmInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteMode siteModeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    siteModeInstance = WebSiteMode.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setSiteMode(siteModeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SiteProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SiteProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSite.WebSiteProperties sitePropertiesInstance;
                                if (webSiteInstance.getSiteProperties() == null) {
                                    sitePropertiesInstance = new WebSite.WebSiteProperties();
                                    webSiteInstance.setSiteProperties(sitePropertiesInstance);
                                } else {
                                    sitePropertiesInstance = webSiteInstance.getSiteProperties();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key = null;
                                                String value = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key != null && value != null) {
                                                    sitePropertiesInstance.getAppSettings().put(key, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key2 = null;
                                                String value2 = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key2 != null && value2 != null) {
                                                    sitePropertiesInstance.getMetadata().put(key2, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Properties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Properties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key3 = null;
                                                String value3 = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key3 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value3 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key3 != null && value3 != null) {
                                                    sitePropertiesInstance.getProperties().put(key3, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String stateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    stateInstance = xmlPullParser.getText();
                                    webSiteInstance.setState(stateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "UsageState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UsageState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteUsageState usageStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    usageStateInstance = WebSiteUsageState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setUsageState(usageStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "WebSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "WebSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String webSpaceInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    webSpaceInstance = xmlPullParser.getText();
                                    webSiteInstance.setWebSpace(webSpaceInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can retrieve the config settings for a web site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Configuration Web Site operation response.
    */
    @Override
    public Future<WebSiteGetConfigurationResponse> getConfigurationAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteGetConfigurationResponse>() { 
            @Override
            public WebSiteGetConfigurationResponse call() throws Exception {
                return getConfiguration(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * You can retrieve the config settings for a web site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Configuration Web Site operation response.
    */
    @Override
    public WebSiteGetConfigurationResponse getConfiguration(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "getConfigurationAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/config";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteGetConfigurationResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteGetConfigurationResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "SiteConfig".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "SiteConfig".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String key = null;
                                        String value = null;
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    key = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    value = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        if (key != null && value != null) {
                                            result.getAppSettings().put(key, xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ConnectionStrings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ConnectionStrings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ConnStringInfo".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSiteGetConfigurationResponse.ConnectionStringInfo connStringInfoInstance;
                                    connStringInfoInstance = new WebSiteGetConfigurationResponse.ConnectionStringInfo();
                                    result.getConnectionStrings().add(connStringInfoInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "ConnStringInfo".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ConnectionString".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ConnectionString".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String connectionStringInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    connectionStringInstance = xmlPullParser.getText();
                                                    connStringInfoInstance.setConnectionString(connectionStringInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String nameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    nameInstance = xmlPullParser.getText();
                                                    connStringInfoInstance.setName(nameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Type".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String typeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    typeInstance = xmlPullParser.getText();
                                                    connStringInfoInstance.setType(typeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "DefaultDocuments".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "DefaultDocuments".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.TEXT) {
                                    result.getDefaultDocuments().add(xmlPullParser.getText());
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "DetailedErrorLoggingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "DetailedErrorLoggingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean detailedErrorLoggingEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    detailedErrorLoggingEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setDetailedErrorLoggingEnabled(detailedErrorLoggingEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "DocumentRoot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "DocumentRoot".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String documentRootInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    documentRootInstance = xmlPullParser.getText();
                                    result.setDocumentRoot(documentRootInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HandlerMappings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HandlerMappings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "HandlerMapping".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSiteGetConfigurationResponse.HandlerMapping handlerMappingInstance;
                                    handlerMappingInstance = new WebSiteGetConfigurationResponse.HandlerMapping();
                                    result.getHandlerMappings().add(handlerMappingInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "HandlerMapping".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Arguments".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Arguments".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String argumentsInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    argumentsInstance = xmlPullParser.getText();
                                                    handlerMappingInstance.setArguments(argumentsInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Extension".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String extensionInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    extensionInstance = xmlPullParser.getText();
                                                    handlerMappingInstance.setExtension(extensionInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ScriptProcessor".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ScriptProcessor".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String scriptProcessorInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    scriptProcessorInstance = xmlPullParser.getText();
                                                    handlerMappingInstance.setScriptProcessor(scriptProcessorInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HttpLoggingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HttpLoggingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean httpLoggingEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    httpLoggingEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setHttpLoggingEnabled(httpLoggingEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LogsDirectorySizeLimit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LogsDirectorySizeLimit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int logsDirectorySizeLimitInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    logsDirectorySizeLimitInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setLogsDirectorySizeLimit(logsDirectorySizeLimitInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ManagedPipelineMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ManagedPipelineMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ManagedPipelineMode managedPipelineModeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    managedPipelineModeInstance = ManagedPipelineMode.valueOf(xmlPullParser.getText());
                                    result.setManagedPipelineMode(managedPipelineModeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String key2 = null;
                                        String value2 = null;
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    key2 = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    value2 = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        if (key2 != null && value2 != null) {
                                            result.getMetadata().put(key2, xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "NetFrameworkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "NetFrameworkVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String netFrameworkVersionInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    netFrameworkVersionInstance = xmlPullParser.getText();
                                    result.setNetFrameworkVersion(netFrameworkVersionInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int numberOfWorkersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    numberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setNumberOfWorkers(numberOfWorkersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PhpVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PhpVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String phpVersionInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    phpVersionInstance = xmlPullParser.getText();
                                    result.setPhpVersion(phpVersionInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PublishingPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PublishingPassword".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String publishingPasswordInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    publishingPasswordInstance = xmlPullParser.getText();
                                    result.setPublishingPassword(publishingPasswordInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "PublishingUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PublishingUsername".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String publishingUsernameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    publishingUsernameInstance = xmlPullParser.getText();
                                    result.setPublishingUserName(publishingUsernameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RemoteDebuggingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RemoteDebuggingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean remoteDebuggingEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    remoteDebuggingEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setRemoteDebuggingEnabled(remoteDebuggingEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RemoteDebuggingVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RemoteDebuggingVersion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean isNil = false;
                                for (int i = 0; i < xmlPullParser.getAttributeCount(); i = i + 1) {
                                    if ("nil".equals(xmlPullParser.getAttributeName(i)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i))) {
                                        isNil = "true".equals(xmlPullParser.getAttributeValue(i));
                                    }
                                }
                                if (isNil == false) {
                                    RemoteDebuggingVersion remoteDebuggingVersionInstance;
                                    if (eventType == XmlPullParser.TEXT) {
                                        remoteDebuggingVersionInstance = RemoteDebuggingVersion.valueOf(xmlPullParser.getText());
                                        result.setRemoteDebuggingVersion(remoteDebuggingVersionInstance);
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RequestTracingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RequestTracingEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean requestTracingEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    requestTracingEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setRequestTracingEnabled(requestTracingEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RequestTracingExpirationTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RequestTracingExpirationTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean isNil2 = false;
                                for (int i2 = 0; i2 < xmlPullParser.getAttributeCount(); i2 = i2 + 1) {
                                    if ("nil".equals(xmlPullParser.getAttributeName(i2)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                        isNil2 = "true".equals(xmlPullParser.getAttributeValue(i2));
                                    }
                                }
                                if (isNil2 == false) {
                                    Calendar requestTracingExpirationTimeInstance;
                                    if (eventType == XmlPullParser.TEXT) {
                                        requestTracingExpirationTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                        result.setRequestTracingExpirationTime(requestTracingExpirationTimeInstance);
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ScmType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ScmType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String scmTypeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    scmTypeInstance = xmlPullParser.getText();
                                    result.setScmType(scmTypeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Use32BitWorkerProcess".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Use32BitWorkerProcess".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean use32BitWorkerProcessInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    use32BitWorkerProcessInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setUse32BitWorkerProcess(use32BitWorkerProcessInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "WebSocketsEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "WebSocketsEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean webSocketsEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    webSocketsEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setWebSocketsEnabled(webSocketsEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can retrieve historical usage metrics for a site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Get Historical
    * Usage Metrics Web Site operation.
    * @return The Get Historical Usage Metrics Web Site operation response.
    */
    @Override
    public Future<WebSiteGetHistoricalUsageMetricsResponse> getHistoricalUsageMetricsAsync(final String webSpaceName, final String webSiteName, final WebSiteGetHistoricalUsageMetricsParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteGetHistoricalUsageMetricsResponse>() { 
            @Override
            public WebSiteGetHistoricalUsageMetricsResponse call() throws Exception {
                return getHistoricalUsageMetrics(webSpaceName, webSiteName, parameters);
            }
         });
    }
    
    /**
    * You can retrieve historical usage metrics for a site by issuing an HTTP
    * GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Get Historical
    * Usage Metrics Web Site operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Historical Usage Metrics Web Site operation response.
    */
    @Override
    public WebSiteGetHistoricalUsageMetricsResponse getHistoricalUsageMetrics(String webSpaceName, String webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "getHistoricalUsageMetricsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/metrics" + "?";
        if (parameters.getMetricNames() != null && parameters.getMetricNames().size() > 0) {
            url = url + "&" + "names=" + URLEncoder.encode(CommaStringBuilder.join(parameters.getMetricNames()), "UTF-8");
        }
        if (parameters.getStartTime() != null) {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            url = url + "&" + "StartTime=" + URLEncoder.encode(simpleDateFormat.format(parameters.getStartTime().getTime()), "UTF-8");
        }
        if (parameters.getEndTime() != null) {
            SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
            simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
            url = url + "&" + "EndTime=" + URLEncoder.encode(simpleDateFormat2.format(parameters.getEndTime().getTime()), "UTF-8");
        }
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteGetHistoricalUsageMetricsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteGetHistoricalUsageMetricsResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "MetricResponses".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "MetricResponses".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "UsageMetrics".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UsageMetrics".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "MetricResponse".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric metricResponseInstance;
                                    metricResponseInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric();
                                    result.getUsageMetrics().add(metricResponseInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "MetricResponse".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Code".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String codeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    codeInstance = xmlPullParser.getText();
                                                    metricResponseInstance.setCode(codeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Data".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Data".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData dataInstance;
                                                if (metricResponseInstance.getData() == null) {
                                                    dataInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData();
                                                    metricResponseInstance.setData(dataInstance);
                                                } else {
                                                    dataInstance = metricResponseInstance.getData();
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "DisplayName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "DisplayName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String displayNameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            displayNameInstance = xmlPullParser.getText();
                                                            dataInstance.setDisplayName(displayNameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "EndTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        Calendar endTimeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            endTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                            dataInstance.setEndTime(endTimeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String nameInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            nameInstance = xmlPullParser.getText();
                                                            dataInstance.setName(nameInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "PrimaryAggregationType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "PrimaryAggregationType".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String primaryAggregationTypeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            primaryAggregationTypeInstance = xmlPullParser.getText();
                                                            dataInstance.setPrimaryAggregationType(primaryAggregationTypeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "StartTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        Calendar startTimeInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            startTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                            dataInstance.setStartTime(startTimeInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "TimeGrain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "TimeGrain".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String timeGrainInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            timeGrainInstance = xmlPullParser.getText();
                                                            dataInstance.setTimeGrain(timeGrainInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Unit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Unit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        String unitInstance;
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            unitInstance = xmlPullParser.getText();
                                                            dataInstance.setUnit(unitInstance);
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                if (eventType == XmlPullParser.START_TAG && "Values".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Values".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.START_TAG && "MetricSample".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                            WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample metricSampleInstance;
                                                            metricSampleInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample();
                                                            dataInstance.getValues().add(metricSampleInstance);
                                                            
                                                            while ((eventType == XmlPullParser.END_TAG && "MetricSample".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                if (eventType == XmlPullParser.START_TAG && "Count".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Count".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        int countInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            countInstance = Integer.parseInt(xmlPullParser.getText());
                                                                            metricSampleInstance.setCount(countInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Maximum".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Maximum".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String maximumInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            maximumInstance = xmlPullParser.getText();
                                                                            metricSampleInstance.setMaximum(maximumInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Minimum".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Minimum".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String minimumInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            minimumInstance = xmlPullParser.getText();
                                                                            metricSampleInstance.setMinimum(minimumInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "TimeCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "TimeCreated".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        Calendar timeCreatedInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            timeCreatedInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                                            metricSampleInstance.setTimeCreated(timeCreatedInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                if (eventType == XmlPullParser.START_TAG && "Total".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                                    while ((eventType == XmlPullParser.END_TAG && "Total".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                                        String totalInstance;
                                                                        if (eventType == XmlPullParser.TEXT) {
                                                                            totalInstance = xmlPullParser.getText();
                                                                            metricSampleInstance.setTotal(totalInstance);
                                                                        }
                                                                        
                                                                        eventType = xmlPullParser.next();
                                                                    }
                                                                }
                                                                
                                                                eventType = xmlPullParser.next();
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Message".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String messageInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    messageInstance = xmlPullParser.getText();
                                                    metricResponseInstance.setMessage(messageInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can retrieve the list of active instances by ids for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The web site instance ids response.
    */
    @Override
    public Future<WebSiteInstanceIdsResponse> getInstanceIdsAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteInstanceIdsResponse>() { 
            @Override
            public WebSiteInstanceIdsResponse call() throws Exception {
                return getInstanceIds(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * You can retrieve the list of active instances by ids for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The web site instance ids response.
    */
    @Override
    public WebSiteInstanceIdsResponse getInstanceIds(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "getInstanceIdsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/instanceids";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteInstanceIdsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteInstanceIdsResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ArrayOfstring".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/Arrays".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ArrayOfstring".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/Arrays".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.TEXT) {
                            result.getInstanceIds().add(xmlPullParser.getText());
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can retrieve the publish settings information for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Publish Profile Web Site operation response.
    */
    @Override
    public Future<WebSiteGetPublishProfileResponse> getPublishProfileAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteGetPublishProfileResponse>() { 
            @Override
            public WebSiteGetPublishProfileResponse call() throws Exception {
                return getPublishProfile(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * You can retrieve the publish settings information for a web site by
    * issuing an HTTP GET request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Publish Profile Web Site operation response.
    */
    @Override
    public WebSiteGetPublishProfileResponse getPublishProfile(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "getPublishProfileAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/publishxml";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteGetPublishProfileResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteGetPublishProfileResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "publishData".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "publishData".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "PublishProfiles".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "PublishProfiles".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "publishProfile".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) {
                                    WebSiteGetPublishProfileResponse.PublishProfile publishProfileInstance;
                                    publishProfileInstance = new WebSiteGetPublishProfileResponse.PublishProfile();
                                    result.getPublishProfiles().add(publishProfileInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "publishProfile".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) != true) {
                                        for (int i = 0; i < xmlPullParser.getAttributeCount(); i = i + 1) {
                                            if ("profileName".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setProfileName(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("publishMethod".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setPublishMethod(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("publishUrl".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setPublishUrl(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("msdeploySite".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setMSDeploySite(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("ftpPassiveMode".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setFtpPassiveMode(Boolean.parseBoolean(xmlPullParser.getAttributeValue(i).toLowerCase()));
                                            }
                                            if ("userName".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setUserName(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("userPWD".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setUserPassword(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("destinationAppUrl".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setDestinationAppUri(new URI(xmlPullParser.getAttributeValue(i)));
                                            }
                                            if ("SQLServerDBConnectionString".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setSqlServerConnectionString(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("mySQLDBConnectionString".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setMySqlConnectionString(xmlPullParser.getAttributeValue(i));
                                            }
                                            if ("hostingProviderForumLink".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setHostingProviderForumUri(new URI(xmlPullParser.getAttributeValue(i)));
                                            }
                                            if ("controlPanelLink".equals(xmlPullParser.getAttributeName(i)) && "".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                publishProfileInstance.setControlPanelUri(new URI(xmlPullParser.getAttributeValue(i)));
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "databases".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "databases".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.START_TAG && "add".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) {
                                                    WebSiteGetPublishProfileResponse.Database addInstance;
                                                    addInstance = new WebSiteGetPublishProfileResponse.Database();
                                                    publishProfileInstance.getDatabases().add(addInstance);
                                                    
                                                    while ((eventType == XmlPullParser.END_TAG && "add".equals(xmlPullParser.getName()) && "".equals(xmlPullParser.getNamespace())) != true) {
                                                        for (int i2 = 0; i2 < xmlPullParser.getAttributeCount(); i2 = i2 + 1) {
                                                            if ("name".equals(xmlPullParser.getAttributeName(i2)) && "".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                                                addInstance.setName(xmlPullParser.getAttributeValue(i2));
                                                            }
                                                            if ("connectionString".equals(xmlPullParser.getAttributeName(i2)) && "".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                                                addInstance.setConnectionString(xmlPullParser.getAttributeValue(i2));
                                                            }
                                                            if ("providerName".equals(xmlPullParser.getAttributeName(i2)) && "".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                                                addInstance.setProviderName(xmlPullParser.getAttributeValue(i2));
                                                            }
                                                            if ("type".equals(xmlPullParser.getAttributeName(i2)) && "".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                                                addInstance.setType(xmlPullParser.getAttributeValue(i2));
                                                            }
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository get operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Repository Web Site operation response.
    */
    @Override
    public Future<WebSiteGetRepositoryResponse> getRepositoryAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteGetRepositoryResponse>() { 
            @Override
            public WebSiteGetRepositoryResponse call() throws Exception {
                return getRepository(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository get operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Repository Web Site operation response.
    */
    @Override
    public WebSiteGetRepositoryResponse getRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "getRepositoryAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/repository";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteGetRepositoryResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteGetRepositoryResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "anyURI".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "anyURI".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.TEXT) {
                            result.setUri(new URI(xmlPullParser.getText()));
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can retrieve current usage metrics for a site by issuing an HTTP GET
    * request. The metrics returned include CPU Time, Data In, Data Out, Local
    * Bytes Read, Local Bytes Written, Network Bytes Read, Network Bytes
    * Written, WP Stop Requests, Memory Usage, CPU Time - Minute Limit, and
    * File System Storage.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return The Get Usage Metrics Web Site operation response.
    */
    @Override
    public Future<WebSiteGetUsageMetricsResponse> getUsageMetricsAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteGetUsageMetricsResponse>() { 
            @Override
            public WebSiteGetUsageMetricsResponse call() throws Exception {
                return getUsageMetrics(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * You can retrieve current usage metrics for a site by issuing an HTTP GET
    * request. The metrics returned include CPU Time, Data In, Data Out, Local
    * Bytes Read, Local Bytes Written, Network Bytes Read, Network Bytes
    * Written, WP Stop Requests, Memory Usage, CPU Time - Minute Limit, and
    * File System Storage.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Usage Metrics Web Site operation response.
    */
    @Override
    public WebSiteGetUsageMetricsResponse getUsageMetrics(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "getUsageMetricsAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/usages";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteGetUsageMetricsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteGetUsageMetricsResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Usages".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Usages".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "UsageMetrics".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UsageMetrics".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Usage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSiteGetUsageMetricsResponse.UsageMetric usageInstance;
                                    usageInstance = new WebSiteGetUsageMetricsResponse.UsageMetric();
                                    result.getUsageMetrics().add(usageInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "Usage".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                WebSiteComputeMode computeModeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    computeModeInstance = WebSiteComputeMode.valueOf(xmlPullParser.getText());
                                                    usageInstance.setComputeMode(computeModeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "CurrentValue".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "CurrentValue".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String currentValueInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    currentValueInstance = xmlPullParser.getText();
                                                    usageInstance.setCurrentValue(currentValueInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "DisplayName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "DisplayName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String displayNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    displayNameInstance = xmlPullParser.getText();
                                                    usageInstance.setDisplayName(displayNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Limit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Limit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String limitInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    limitInstance = xmlPullParser.getText();
                                                    usageInstance.setLimit(limitInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String nameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    nameInstance = xmlPullParser.getText();
                                                    usageInstance.setName(nameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "NextResetTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NextResetTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar nextResetTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    nextResetTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    usageInstance.setNextResetTime(nextResetTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ResourceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ResourceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String resourceNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    resourceNameInstance = xmlPullParser.getText();
                                                    usageInstance.setResourceName(resourceNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                WebSiteMode siteModeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    siteModeInstance = WebSiteMode.valueOf(xmlPullParser.getText());
                                                    usageInstance.setSiteMode(siteModeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Unit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Unit".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String unitInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    unitInstance = xmlPullParser.getText();
                                                    usageInstance.setUnit(unitInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Determines if a host name is available.
    *
    * @param webSiteName Required. The name of the web site.
    * @return The Is Hostname Available Web Site operation response.
    */
    @Override
    public Future<WebSiteIsHostnameAvailableResponse> isHostnameAvailableAsync(final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteIsHostnameAvailableResponse>() { 
            @Override
            public WebSiteIsHostnameAvailableResponse call() throws Exception {
                return isHostnameAvailable(webSiteName);
            }
         });
    }
    
    /**
    * Determines if a host name is available.
    *
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The Is Hostname Available Web Site operation response.
    */
    @Override
    public WebSiteIsHostnameAvailableResponse isHostnameAvailable(String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "isHostnameAvailableAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces" + "?";
        url = url + "ishostnameavailable=" + URLEncoder.encode(webSiteName.trim(), "UTF-8");
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteIsHostnameAvailableResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteIsHostnameAvailableResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "boolean".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "boolean".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/2003/10/Serialization/".equals(xmlPullParser.getNamespace())) != true) {
                        boolean booleanInstance;
                        if (eventType == XmlPullParser.TEXT) {
                            booleanInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                            result.setIsAvailable(booleanInstance);
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can restart a web site by issuing an HTTP POST request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> restartAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return restart(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * You can restart a web site by issuing an HTTP POST request.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse restart(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "restartAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/restart";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    @Override
    public Future<WebSiteOperationStatusResponse> swapSlotsAsync(final String webSpaceName, final String webSiteName, final String sourceSlotName, final String targetSlotName) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteOperationStatusResponse>() { 
            @Override
            public WebSiteOperationStatusResponse call() throws Exception {
                return swapSlots(webSpaceName, webSiteName, sourceSlotName, targetSlotName);
            }
         });
    }
    
    /**
    * You can swap a web site from one slot to another slot.
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param sourceSlotName Required. The name of the first web site slot to
    * swap (source).
    * @param targetSlotName Required. The name of the second web site slot to
    * swap with (target).
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * long-running operation, indicating whether it has succeeded, is
    * inprogress, has timed out, or has failed. Note that this status is
    * distinct from the HTTP status code returned for the Get Operation Status
    * operation itself. If the long-running operation failed, the response
    * body includes error information regarding the failure.
    */
    @Override
    public WebSiteOperationStatusResponse swapSlots(String webSpaceName, String webSiteName, String sourceSlotName, String targetSlotName) throws InterruptedException, ExecutionException, ServiceException {
        WebSiteManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            tracingParameters.put("sourceSlotName", sourceSlotName);
            tracingParameters.put("targetSlotName", targetSlotName);
            CloudTracing.enter(invocationId, this, "swapSlotsAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        WebSiteOperationStatusResponse response = client2.getWebSitesOperations().beginSwapingSlotsAsync(webSpaceName, webSiteName, sourceSlotName, targetSlotName).get();
        if (response.getStatus() == WebSiteOperationStatus.Succeeded) {
            return response;
        }
        WebSiteOperationStatusResponse result = client2.getOperationStatusAsync(webSpaceName, webSiteName, response.getOperationId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != WebSiteOperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(webSpaceName, webSiteName, response.getOperationId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != WebSiteOperationStatus.Succeeded) {
            if (result.getErrors() != null && result.getErrors().size() > 0) {
                ServiceException ex = new ServiceException(result.getErrors().get(0).getCode() + " : " + result.getErrors().get(0).getMessage());
                ex.setErrorCode(result.getErrors().get(0).getCode());
                ex.setErrorMessage(result.getErrors().get(0).getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository sync operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> syncRepositoryAsync(final String webSpaceName, final String webSiteName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return syncRepository(webSpaceName, webSiteName);
            }
         });
    }
    
    /**
    * A web site repository is essentially a Git repository that you can use to
    * manage your web site content. By using Git source control tools, you can
    * push or pull version-controlled changes to your site. This API executes
    * a repository sync operation.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse syncRepository(String webSpaceName, String webSiteName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            CloudTracing.enter(invocationId, this, "syncRepositoryAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/repository" + "?" + "action=sync";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can update the settings for a web site by using the HTTP PUT method
    * and by specifying the settings in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update Web Site
    * operation.
    * @return The Update Web Site operation response.
    */
    @Override
    public Future<WebSiteUpdateResponse> updateAsync(final String webSpaceName, final String webSiteName, final WebSiteUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<WebSiteUpdateResponse>() { 
            @Override
            public WebSiteUpdateResponse call() throws Exception {
                return update(webSpaceName, webSiteName, parameters);
            }
         });
    }
    
    /**
    * You can update the settings for a web site by using the HTTP PUT method
    * and by specifying the settings in the request body.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update Web Site
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Update Web Site operation response.
    */
    @Override
    public WebSiteUpdateResponse update(String webSpaceName, String webSiteName, WebSiteUpdateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Site");
        
        if (parameters.getAvailabilityState() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AvailabilityState");
            xmlSerializer.text(parameters.getAvailabilityState().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AvailabilityState");
        }
        
        if (parameters.getComputeMode() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ComputeMode");
            xmlSerializer.text(parameters.getComputeMode().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ComputeMode");
        }
        
        if (parameters.isEnabled() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Enabled");
            xmlSerializer.text(Boolean.toString(parameters.isEnabled()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Enabled");
        }
        
        if (parameters.getHostNameSslStates() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostNameSslStates");
            for (WebSiteUpdateParameters.WebSiteHostNameSslState hostNameSslStatesItem : parameters.getHostNameSslStates()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WebSiteHostNameSslState");
                
                if (hostNameSslStatesItem.getSslState() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SslState");
                    xmlSerializer.text(hostNameSslStatesItem.getSslState().toString());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SslState");
                }
                
                if (hostNameSslStatesItem.getThumbprint() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                    xmlSerializer.text(hostNameSslStatesItem.getThumbprint());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                } else {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                    xmlSerializer.attribute("http://www.w3.org/2001/XMLSchema-instance", "nil", "true");
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                }
                
                if (hostNameSslStatesItem.isToUpdate() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ToUpdate");
                    xmlSerializer.text(Boolean.toString(hostNameSslStatesItem.isToUpdate()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ToUpdate");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WebSiteHostNameSslState");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostNameSslStates");
        }
        
        if (parameters.getHostNames() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HostNames");
            for (String hostNamesItem : parameters.getHostNames()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string");
                xmlSerializer.text(hostNamesItem);
                xmlSerializer.endTag("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HostNames");
        }
        
        if (parameters.getRuntimeAvailabilityState() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RuntimeAvailabilityState");
            xmlSerializer.text(parameters.getRuntimeAvailabilityState().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RuntimeAvailabilityState");
        }
        
        if (parameters.getSslCertificates() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SSLCertificates");
            for (WebSiteUpdateParameters.WebSiteSslCertificate sSLCertificatesItem : parameters.getSslCertificates()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Certificate");
                
                if (sSLCertificatesItem.getPassword() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Password");
                    xmlSerializer.text(sSLCertificatesItem.getPassword());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Password");
                }
                
                if (sSLCertificatesItem.getPfxBlob() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PfxBlob");
                    xmlSerializer.text(Base64.encode(sSLCertificatesItem.getPfxBlob()));
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PfxBlob");
                }
                
                if (sSLCertificatesItem.getThumbprint() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                    xmlSerializer.text(sSLCertificatesItem.getThumbprint());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Thumbprint");
                }
                
                if (sSLCertificatesItem.isToBeDeleted() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ToDelete");
                    xmlSerializer.text(Boolean.toString(sSLCertificatesItem.isToBeDeleted()).toLowerCase());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ToDelete");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Certificate");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SSLCertificates");
        }
        
        if (parameters.getServerFarm() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
            xmlSerializer.text(parameters.getServerFarm());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
        }
        
        if (parameters.getSiteMode() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SiteMode");
            xmlSerializer.text(parameters.getSiteMode().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SiteMode");
        }
        
        if (parameters.getState() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "State");
            xmlSerializer.text(parameters.getState());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "State");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Site");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            WebSiteUpdateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new WebSiteUpdateResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Site".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Site".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        WebSite webSiteInstance;
                        if (result.getWebSite() == null) {
                            webSiteInstance = new WebSite();
                            result.setWebSite(webSiteInstance);
                        } else {
                            webSiteInstance = result.getWebSite();
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AdminEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AdminEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean adminEnabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    adminEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    webSiteInstance.setAdminEnabled(adminEnabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSpaceAvailabilityState availabilityStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    availabilityStateInstance = WebSpaceAvailabilityState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setAvailabilityState(availabilityStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ComputeMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteComputeMode computeModeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    computeModeInstance = WebSiteComputeMode.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setComputeMode(computeModeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Enabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Enabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean enabledInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    enabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    webSiteInstance.setEnabled(enabledInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "EnabledHostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "EnabledHostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.TEXT) {
                                    webSiteInstance.getEnabledHostNames().add(xmlPullParser.getText());
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostNameSslStates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostNameSslStates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "HostNameSslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSite.WebSiteHostNameSslState hostNameSslStateInstance;
                                    hostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                    webSiteInstance.getHostNameSslStates().add(hostNameSslStateInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "HostNameSslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String nameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    nameInstance = xmlPullParser.getText();
                                                    hostNameSslStateInstance.setName(nameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SslState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                WebSiteSslState sslStateInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    sslStateInstance = WebSiteSslState.valueOf(xmlPullParser.getText());
                                                    hostNameSslStateInstance.setSslState(sslStateInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String thumbprintInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    thumbprintInstance = xmlPullParser.getText();
                                                    hostNameSslStateInstance.setThumbprint(thumbprintInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "VirtualIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                InetAddress virtualIPInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    virtualIPInstance = InetAddress.getByName(xmlPullParser.getText());
                                                    hostNameSslStateInstance.setVirtualIP(virtualIPInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.TEXT) {
                                    webSiteInstance.getHostNames().add(xmlPullParser.getText());
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "LastModifiedTimeUtc".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "LastModifiedTimeUtc".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                Calendar lastModifiedTimeUtcInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    lastModifiedTimeUtcInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                    webSiteInstance.setLastModifiedTimeUtc(lastModifiedTimeUtcInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance2;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance2 = xmlPullParser.getText();
                                    webSiteInstance.setName(nameInstance2);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Owner".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Owner".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String ownerInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    ownerInstance = xmlPullParser.getText();
                                    webSiteInstance.setOwner(ownerInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RepositorySiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RepositorySiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String repositorySiteNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    repositorySiteNameInstance = xmlPullParser.getText();
                                    webSiteInstance.setRepositorySiteName(repositorySiteNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "RuntimeAvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "RuntimeAvailabilityState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    runtimeAvailabilityStateInstance = WebSiteRuntimeAvailabilityState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setRuntimeAvailabilityState(runtimeAvailabilityStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SSLCertificates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SSLCertificates".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Certificate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    WebSite.WebSiteSslCertificate certificateInstance;
                                    certificateInstance = new WebSite.WebSiteSslCertificate();
                                    webSiteInstance.getSslCertificates().add(certificateInstance);
                                    
                                    while ((eventType == XmlPullParser.END_TAG && "Certificate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ExpirationDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExpirationDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil = false;
                                                for (int i = 0; i < xmlPullParser.getAttributeCount(); i = i + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i))) {
                                                        isNil = "true".equals(xmlPullParser.getAttributeValue(i));
                                                    }
                                                }
                                                if (isNil == false) {
                                                    Calendar expirationDateInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        expirationDateInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                        certificateInstance.setExpirationDate(expirationDateInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "FriendlyName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "FriendlyName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String friendlyNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    friendlyNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setFriendlyName(friendlyNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "HostNames".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    certificateInstance.getHostNames().add(xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "IssueDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "IssueDate".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil2 = false;
                                                for (int i2 = 0; i2 < xmlPullParser.getAttributeCount(); i2 = i2 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i2)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i2))) {
                                                        isNil2 = "true".equals(xmlPullParser.getAttributeValue(i2));
                                                    }
                                                }
                                                if (isNil2 == false) {
                                                    Calendar issueDateInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        issueDateInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                        certificateInstance.setIssueDate(issueDateInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Issuer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Issuer".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String issuerInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    issuerInstance = xmlPullParser.getText();
                                                    certificateInstance.setIssuer(issuerInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Password".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String passwordInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    passwordInstance = xmlPullParser.getText();
                                                    certificateInstance.setPassword(passwordInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "PfxBlob".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "PfxBlob".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                byte[] pfxBlobInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    pfxBlobInstance = xmlPullParser.getText() != null ? Base64.decode(xmlPullParser.getText()) : null;
                                                    certificateInstance.setPfxBlob(pfxBlobInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                URI selfLinkInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    selfLinkInstance = new URI(xmlPullParser.getText());
                                                    certificateInstance.setSelfLinkUri(selfLinkInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SiteName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String siteNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    siteNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setSiteName(siteNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "SubjectName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "SubjectName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String subjectNameInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    subjectNameInstance = xmlPullParser.getText();
                                                    certificateInstance.setSubjectName(subjectNameInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Thumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String thumbprintInstance2;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    thumbprintInstance2 = xmlPullParser.getText();
                                                    certificateInstance.setThumbprint(thumbprintInstance2);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "ToDelete".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ToDelete".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil3 = false;
                                                for (int i3 = 0; i3 < xmlPullParser.getAttributeCount(); i3 = i3 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i3)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i3))) {
                                                        isNil3 = "true".equals(xmlPullParser.getAttributeValue(i3));
                                                    }
                                                }
                                                if (isNil3 == false) {
                                                    boolean toDeleteInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        toDeleteInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                        certificateInstance.setIsToBeDeleted(toDeleteInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Valid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Valid".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean isNil4 = false;
                                                for (int i4 = 0; i4 < xmlPullParser.getAttributeCount(); i4 = i4 + 1) {
                                                    if ("nil".equals(xmlPullParser.getAttributeName(i4)) && "http://www.w3.org/2001/XMLSchema-instance".equals(xmlPullParser.getAttributeNamespace(i4))) {
                                                        isNil4 = "true".equals(xmlPullParser.getAttributeValue(i4));
                                                    }
                                                }
                                                if (isNil4 == false) {
                                                    boolean validInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        validInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                        certificateInstance.setIsValid(validInstance);
                                                    }
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SelfLink".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI selfLinkInstance2;
                                if (eventType == XmlPullParser.TEXT) {
                                    selfLinkInstance2 = new URI(xmlPullParser.getText());
                                    webSiteInstance.setUri(selfLinkInstance2);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String serverFarmInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    serverFarmInstance = xmlPullParser.getText();
                                    webSiteInstance.setServerFarm(serverFarmInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SiteMode".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteMode siteModeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    siteModeInstance = WebSiteMode.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setSiteMode(siteModeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SiteProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SiteProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSite.WebSiteProperties sitePropertiesInstance;
                                if (webSiteInstance.getSiteProperties() == null) {
                                    sitePropertiesInstance = new WebSite.WebSiteProperties();
                                    webSiteInstance.setSiteProperties(sitePropertiesInstance);
                                } else {
                                    sitePropertiesInstance = webSiteInstance.getSiteProperties();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AppSettings".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key = null;
                                                String value = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key != null && value != null) {
                                                    sitePropertiesInstance.getAppSettings().put(key, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Metadata".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key2 = null;
                                                String value2 = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value2 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key2 != null && value2 != null) {
                                                    sitePropertiesInstance.getMetadata().put(key2, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Properties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Properties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "NameValuePair".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key3 = null;
                                                String value3 = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key3 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value3 = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key3 != null && value3 != null) {
                                                    sitePropertiesInstance.getProperties().put(key3, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "State".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String stateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    stateInstance = xmlPullParser.getText();
                                    webSiteInstance.setState(stateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "UsageState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "UsageState".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                WebSiteUsageState usageStateInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    usageStateInstance = WebSiteUsageState.valueOf(xmlPullParser.getText());
                                    webSiteInstance.setUsageState(usageStateInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "WebSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "WebSpace".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String webSpaceInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    webSpaceInstance = xmlPullParser.getText();
                                    webSiteInstance.setWebSpace(webSpaceInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can update the config settings for a web site by issuing an HTTP PUT
    * with a request body containing the updated settings.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update
    * Configuration Web Site operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> updateConfigurationAsync(final String webSpaceName, final String webSiteName, final WebSiteUpdateConfigurationParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return updateConfiguration(webSpaceName, webSiteName, parameters);
            }
         });
    }
    
    /**
    * You can update the config settings for a web site by issuing an HTTP PUT
    * with a request body containing the updated settings.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param webSiteName Required. The name of the web site.
    * @param parameters Required. Parameters supplied to the Update
    * Configuration Web Site operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse updateConfiguration(String webSpaceName, String webSiteName, WebSiteUpdateConfigurationParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (webSiteName == null) {
            throw new NullPointerException("webSiteName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("webSiteName", webSiteName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateConfigurationAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/sites/" + webSiteName.trim() + "/config";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "SiteConfig");
        
        if (parameters.getAppSettings() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AppSettings");
            for (Map.Entry<String, String> entry : parameters.getAppSettings().entrySet()) {
                String appSettingsKey = entry.getKey();
                String appSettingsValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NameValuePair");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(appSettingsKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(appSettingsValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NameValuePair");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AppSettings");
        }
        
        if (parameters.getConnectionStrings() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConnectionStrings");
            for (WebSiteUpdateConfigurationParameters.ConnectionStringInfo connectionStringsItem : parameters.getConnectionStrings()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConnStringInfo");
                
                if (connectionStringsItem.getConnectionString() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ConnectionString");
                    xmlSerializer.text(connectionStringsItem.getConnectionString());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConnectionString");
                }
                
                if (connectionStringsItem.getName() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                    xmlSerializer.text(connectionStringsItem.getName());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                }
                
                if (connectionStringsItem.getType() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Type");
                    xmlSerializer.text(connectionStringsItem.getType());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Type");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConnStringInfo");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ConnectionStrings");
        }
        
        if (parameters.getDefaultDocuments() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DefaultDocuments");
            for (String defaultDocumentsItem : parameters.getDefaultDocuments()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string");
                xmlSerializer.text(defaultDocumentsItem);
                xmlSerializer.endTag("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DefaultDocuments");
        }
        
        if (parameters.isDetailedErrorLoggingEnabled() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DetailedErrorLoggingEnabled");
            xmlSerializer.text(Boolean.toString(parameters.isDetailedErrorLoggingEnabled()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DetailedErrorLoggingEnabled");
        }
        
        if (parameters.getDocumentRoot() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "DocumentRoot");
            xmlSerializer.text(parameters.getDocumentRoot());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "DocumentRoot");
        }
        
        if (parameters.getHandlerMappings() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HandlerMappings");
            for (WebSiteUpdateConfigurationParameters.HandlerMapping handlerMappingsItem : parameters.getHandlerMappings()) {
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HandlerMapping");
                
                if (handlerMappingsItem.getArguments() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Arguments");
                    xmlSerializer.text(handlerMappingsItem.getArguments());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Arguments");
                }
                
                if (handlerMappingsItem.getExtension() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Extension");
                    xmlSerializer.text(handlerMappingsItem.getExtension());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Extension");
                }
                
                if (handlerMappingsItem.getScriptProcessor() != null) {
                    xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ScriptProcessor");
                    xmlSerializer.text(handlerMappingsItem.getScriptProcessor());
                    xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ScriptProcessor");
                }
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HandlerMapping");
            }
            
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HandlerMappings");
        }
        
        if (parameters.isHttpLoggingEnabled() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "HttpLoggingEnabled");
            xmlSerializer.text(Boolean.toString(parameters.isHttpLoggingEnabled()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "HttpLoggingEnabled");
        }
        
        if (parameters.getLogsDirectorySizeLimit() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "LogsDirectorySizeLimit");
            xmlSerializer.text(Integer.toString(parameters.getLogsDirectorySizeLimit()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "LogsDirectorySizeLimit");
        }
        
        if (parameters.getManagedPipelineMode() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ManagedPipelineMode");
            xmlSerializer.text(parameters.getManagedPipelineMode().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ManagedPipelineMode");
        }
        
        if (parameters.getMetadata() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Metadata");
            for (Map.Entry<String, String> entry2 : parameters.getMetadata().entrySet()) {
                String metadataKey = entry2.getKey();
                String metadataValue = entry2.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NameValuePair");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(metadataKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(metadataValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NameValuePair");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Metadata");
        }
        
        if (parameters.getNetFrameworkVersion() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NetFrameworkVersion");
            xmlSerializer.text(parameters.getNetFrameworkVersion());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NetFrameworkVersion");
        }
        
        if (parameters.getNumberOfWorkers() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NumberOfWorkers");
            xmlSerializer.text(Integer.toString(parameters.getNumberOfWorkers()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NumberOfWorkers");
        }
        
        if (parameters.getPhpVersion() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PhpVersion");
            xmlSerializer.text(parameters.getPhpVersion());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PhpVersion");
        }
        
        if (parameters.getPublishingPassword() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublishingPassword");
            xmlSerializer.text(parameters.getPublishingPassword());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublishingPassword");
        }
        
        if (parameters.getPublishingUserName() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "PublishingUsername");
            xmlSerializer.text(parameters.getPublishingUserName());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "PublishingUsername");
        }
        
        if (parameters.isRemoteDebuggingEnabled() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RemoteDebuggingEnabled");
            xmlSerializer.text(Boolean.toString(parameters.isRemoteDebuggingEnabled()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RemoteDebuggingEnabled");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RemoteDebuggingVersion");
        xmlSerializer.text(parameters.getRemoteDebuggingVersion().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RemoteDebuggingVersion");
        
        if (parameters.isRequestTracingEnabled() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RequestTracingEnabled");
            xmlSerializer.text(Boolean.toString(parameters.isRequestTracingEnabled()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RequestTracingEnabled");
        }
        
        if (parameters.getRequestTracingExpirationTime() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RequestTracingExpirationTime");
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            xmlSerializer.text(simpleDateFormat.format(parameters.getRequestTracingExpirationTime().getTime()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RequestTracingExpirationTime");
        }
        
        if (parameters.getScmType() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ScmType");
            xmlSerializer.text(parameters.getScmType());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ScmType");
        }
        
        if (parameters.isUse32BitWorkerProcess() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Use32BitWorkerProcess");
            xmlSerializer.text(Boolean.toString(parameters.isUse32BitWorkerProcess()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Use32BitWorkerProcess");
        }
        
        if (parameters.isWebSocketsEnabled() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WebSocketsEnabled");
            xmlSerializer.text(Boolean.toString(parameters.isWebSocketsEnabled()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WebSocketsEnabled");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "SiteConfig");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = null;
                if (httpRequest.getResponseCode() < 400) {
                    ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                } else {
                    ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getErrorStream());
                }
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
}
