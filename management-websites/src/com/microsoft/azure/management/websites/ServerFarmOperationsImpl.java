/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.websites;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.utils.BOMInputStream;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.websites.models.ServerFarmCreateParameters;
import com.microsoft.azure.management.websites.models.ServerFarmCreateResponse;
import com.microsoft.azure.management.websites.models.ServerFarmGetResponse;
import com.microsoft.azure.management.websites.models.ServerFarmListResponse;
import com.microsoft.azure.management.websites.models.ServerFarmStatus;
import com.microsoft.azure.management.websites.models.ServerFarmUpdateParameters;
import com.microsoft.azure.management.websites.models.ServerFarmUpdateResponse;
import com.microsoft.azure.management.websites.models.ServerFarmWorkerSize;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

/**
* Operations for managing the server farm in a web space.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for more
* information)
*/
public class ServerFarmOperationsImpl implements ServiceOperations<WebSiteManagementClientImpl>, ServerFarmOperations {
    /**
    * Initializes a new instance of the ServerFarmOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    ServerFarmOperationsImpl(WebSiteManagementClientImpl client) {
        this.client = client;
    }
    
    private WebSiteManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.websites.WebSiteManagementClientImpl.
    * @return The Client value.
    */
    public WebSiteManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Create Server Farm
    * operation.
    * @return The Create Server Farm operation response.
    */
    @Override
    public Future<ServerFarmCreateResponse> createAsync(final String webSpaceName, final ServerFarmCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<ServerFarmCreateResponse>() { 
            @Override
            public ServerFarmCreateResponse call() throws Exception {
                return create(webSpaceName, parameters);
            }
         });
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Create Server Farm
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Create Server Farm operation response.
    */
    @Override
    public ServerFarmCreateResponse create(String webSpaceName, ServerFarmCreateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/ServerFarms";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
        
        if (parameters.getCurrentNumberOfWorkers() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CurrentNumberOfWorkers");
            xmlSerializer.text(Integer.toString(parameters.getCurrentNumberOfWorkers()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CurrentNumberOfWorkers");
        }
        
        if (parameters.getCurrentWorkerSize() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CurrentWorkerSize");
            xmlSerializer.text(parameters.getCurrentWorkerSize().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CurrentWorkerSize");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
        xmlSerializer.text("DefaultServerFarm");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NumberOfWorkers");
        xmlSerializer.text(Integer.toString(parameters.getNumberOfWorkers()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NumberOfWorkers");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WorkerSize");
        xmlSerializer.text(parameters.getWorkerSize().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WorkerSize");
        
        if (parameters.getStatus() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Status");
            xmlSerializer.text(parameters.getStatus().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Status");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServerFarmCreateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new ServerFarmCreateResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentNumberOfWorkersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentNumberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setCurrentNumberOfWorkers(currentNumberOfWorkersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmWorkerSize currentWorkerSizeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentWorkerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                    result.setCurrentWorkerSize(currentWorkerSizeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance = xmlPullParser.getText();
                                    result.setName(nameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int numberOfWorkersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    numberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setNumberOfWorkers(numberOfWorkersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmWorkerSize workerSizeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    workerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                    result.setWorkerSize(workerSizeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmStatus statusInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    statusInstance = ServerFarmStatus.valueOf(xmlPullParser.getText());
                                    result.setStatus(statusInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String webSpaceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return delete(webSpaceName);
            }
         });
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String webSpaceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/ServerFarms/DefaultServerFarm";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param serverFarmName Required. The name of the server farm.
    * @return The Get Server Farm operation response.
    */
    @Override
    public Future<ServerFarmGetResponse> getAsync(final String webSpaceName, final String serverFarmName) {
        return this.getClient().getExecutorService().submit(new Callable<ServerFarmGetResponse>() { 
            @Override
            public ServerFarmGetResponse call() throws Exception {
                return get(webSpaceName, serverFarmName);
            }
         });
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param serverFarmName Required. The name of the server farm.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Server Farm operation response.
    */
    @Override
    public ServerFarmGetResponse get(String webSpaceName, String serverFarmName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (serverFarmName == null) {
            throw new NullPointerException("serverFarmName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("serverFarmName", serverFarmName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/ServerFarms/" + serverFarmName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServerFarmGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new ServerFarmGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentNumberOfWorkersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentNumberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setCurrentNumberOfWorkers(currentNumberOfWorkersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmWorkerSize currentWorkerSizeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentWorkerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                    result.setCurrentWorkerSize(currentWorkerSizeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance = xmlPullParser.getText();
                                    result.setName(nameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int numberOfWorkersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    numberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setNumberOfWorkers(numberOfWorkersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmWorkerSize workerSizeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    workerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                    result.setWorkerSize(workerSizeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmStatus statusInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    statusInstance = ServerFarmStatus.valueOf(xmlPullParser.getText());
                                    result.setStatus(statusInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @return The List Server Farm operation response.
    */
    @Override
    public Future<ServerFarmListResponse> listAsync(final String webSpaceName) {
        return this.getClient().getExecutorService().submit(new Callable<ServerFarmListResponse>() { 
            @Override
            public ServerFarmListResponse call() throws Exception {
                return list(webSpaceName);
            }
         });
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The List Server Farm operation response.
    */
    @Override
    public ServerFarmListResponse list(String webSpaceName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/ServerFarms";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServerFarmListResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new ServerFarmListResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ServerFarms".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ServerFarms".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            ServerFarmListResponse.ServerFarm serverFarmInstance = new ServerFarmListResponse.ServerFarm();
                            result.getServerFarms().add(serverFarmInstance);
                            
                            while ((eventType == XmlPullParser.END_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        int currentNumberOfWorkersInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            currentNumberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                            serverFarmInstance.setCurrentNumberOfWorkers(currentNumberOfWorkersInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        ServerFarmWorkerSize currentWorkerSizeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            currentWorkerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                            serverFarmInstance.setCurrentWorkerSize(currentWorkerSizeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String nameInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            nameInstance = xmlPullParser.getText();
                                            serverFarmInstance.setName(nameInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        int numberOfWorkersInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            numberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                            serverFarmInstance.setNumberOfWorkers(numberOfWorkersInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        ServerFarmWorkerSize workerSizeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            workerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                            serverFarmInstance.setWorkerSize(workerSizeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        ServerFarmStatus statusInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusInstance = ServerFarmStatus.valueOf(xmlPullParser.getText());
                                            serverFarmInstance.setStatus(statusInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                    
                    eventType = xmlPullParser.next();
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Update Server Farm
    * operation.
    * @return The Update Server Farm operation response.
    */
    @Override
    public Future<ServerFarmUpdateResponse> updateAsync(final String webSpaceName, final ServerFarmUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<ServerFarmUpdateResponse>() { 
            @Override
            public ServerFarmUpdateResponse call() throws Exception {
                return update(webSpaceName, parameters);
            }
         });
    }
    
    /**
    * You can create a server farm by issuing an HTTP POST request. Only one
    * server farm per webspace is permitted. You can retrieve server farm
    * details by using HTTP GET, change server farm properties by using HTTP
    * PUT, and delete a server farm by using HTTP DELETE. A request body is
    * required for server farm creation (HTTP POST) and server farm update
    * (HTTP PUT). Warning: Creating a server farm changes your webspace's
    * Compute Mode from Shared to Dedicated. You will be charged from the
    * moment the server farm is created, even if all your sites are still
    * running in Free mode.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    * more information)
    *
    * @param webSpaceName Required. The name of the web space.
    * @param parameters Required. Parameters supplied to the Update Server Farm
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Update Server Farm operation response.
    */
    @Override
    public ServerFarmUpdateResponse update(String webSpaceName, ServerFarmUpdateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, DatatypeConfigurationException, URISyntaxException {
        // Validate
        if (webSpaceName == null) {
            throw new NullPointerException("webSpaceName");
        }
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("webSpaceName", webSpaceName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/WebSpaces/" + webSpaceName.trim() + "/ServerFarms/DefaultServerFarm";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2013-08-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
        
        if (parameters.getCurrentNumberOfWorkers() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CurrentNumberOfWorkers");
            xmlSerializer.text(Integer.toString(parameters.getCurrentNumberOfWorkers()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CurrentNumberOfWorkers");
        }
        
        if (parameters.getCurrentWorkerSize() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CurrentWorkerSize");
            xmlSerializer.text(parameters.getCurrentWorkerSize().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CurrentWorkerSize");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
        xmlSerializer.text("DefaultServerFarm");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "NumberOfWorkers");
        xmlSerializer.text(Integer.toString(parameters.getNumberOfWorkers()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "NumberOfWorkers");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "WorkerSize");
        xmlSerializer.text(parameters.getWorkerSize().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "WorkerSize");
        
        if (parameters.getStatus() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Status");
            xmlSerializer.text(parameters.getStatus().toString());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Status");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ServerFarm");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            httpRequest.getOutputStream().write(requestContent.getBytes());
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            ServerFarmUpdateResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new ServerFarmUpdateResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "ServerFarm".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentNumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentNumberOfWorkersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentNumberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setCurrentNumberOfWorkers(currentNumberOfWorkersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentWorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmWorkerSize currentWorkerSizeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentWorkerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                    result.setCurrentWorkerSize(currentWorkerSizeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String nameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    nameInstance = xmlPullParser.getText();
                                    result.setName(nameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "NumberOfWorkers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int numberOfWorkersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    numberOfWorkersInstance = Integer.parseInt(xmlPullParser.getText());
                                    result.setNumberOfWorkers(numberOfWorkersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "WorkerSize".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmWorkerSize workerSizeInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    workerSizeInstance = ServerFarmWorkerSize.valueOf(xmlPullParser.getText());
                                    result.setWorkerSize(workerSizeInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                ServerFarmStatus statusInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    statusInstance = ServerFarmStatus.valueOf(xmlPullParser.getText());
                                    result.setStatus(statusInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
}
