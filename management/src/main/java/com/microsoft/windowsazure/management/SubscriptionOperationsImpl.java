/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management;

import com.microsoft.windowsazure.AzureHttpStatus;
import com.microsoft.windowsazure.core.OperationResponse;
import com.microsoft.windowsazure.core.ServiceOperations;
import com.microsoft.windowsazure.core.utils.BOMInputStream;
import com.microsoft.windowsazure.exception.ServiceException;
import com.microsoft.windowsazure.management.models.SubscriptionGetResponse;
import com.microsoft.windowsazure.management.models.SubscriptionListOperationsParameters;
import com.microsoft.windowsazure.management.models.SubscriptionListOperationsResponse;
import com.microsoft.windowsazure.management.models.SubscriptionStatus;
import com.microsoft.windowsazure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.TimeZone;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import javax.xml.bind.DatatypeConverter;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

/**
* Operations for listing subscription details.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/gg715315.aspx for more
* information)
*/
public class SubscriptionOperationsImpl implements ServiceOperations<ManagementClientImpl>, SubscriptionOperations {
    /**
    * Initializes a new instance of the SubscriptionOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    SubscriptionOperationsImpl(ManagementClientImpl client) {
        this.client = client;
    }
    
    private ManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.ManagementClientImpl.
    * @return The Client value.
    */
    public ManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * The Get Subscription operation returns account and resource allocation
    * information for the specified subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh403995.aspx for
    * more information)
    *
    * @return The Get Subscription operation response.
    */
    @Override
    public Future<SubscriptionGetResponse> getAsync() {
        return this.getClient().getExecutorService().submit(new Callable<SubscriptionGetResponse>() { 
            @Override
            public SubscriptionGetResponse call() throws Exception {
                return get();
            }
         });
    }
    
    /**
    * The Get Subscription operation returns account and resource allocation
    * information for the specified subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh403995.aspx for
    * more information)
    *
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The Get Subscription operation response.
    */
    @Override
    public SubscriptionGetResponse get() throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "");
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            SubscriptionGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new SubscriptionGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "Subscription".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "Subscription".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "SubscriptionID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SubscriptionID".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String subscriptionIDInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    subscriptionIDInstance = xmlPullParser.getText();
                                    result.setSubscriptionID(subscriptionIDInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SubscriptionName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SubscriptionName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String subscriptionNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    subscriptionNameInstance = xmlPullParser.getText();
                                    result.setSubscriptionName(subscriptionNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SubscriptionStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SubscriptionStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                SubscriptionStatus subscriptionStatusInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    subscriptionStatusInstance = SubscriptionStatus.valueOf(xmlPullParser.getText());
                                    result.setSubscriptionStatus(subscriptionStatusInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "AccountAdminLiveEmailId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "AccountAdminLiveEmailId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String accountAdminLiveEmailIdInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    accountAdminLiveEmailIdInstance = xmlPullParser.getText();
                                    result.setAccountAdminLiveEmailId(accountAdminLiveEmailIdInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ServiceAdminLiveEmailId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ServiceAdminLiveEmailId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String serviceAdminLiveEmailIdInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    serviceAdminLiveEmailIdInstance = xmlPullParser.getText();
                                    result.setServiceAdminLiveEmailId(serviceAdminLiveEmailIdInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "MaxCoreCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "MaxCoreCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int maxCoreCountInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    maxCoreCountInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setMaximumCoreCount(maxCoreCountInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "MaxStorageAccounts".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "MaxStorageAccounts".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int maxStorageAccountsInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    maxStorageAccountsInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setMaximumStorageAccounts(maxStorageAccountsInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "MaxHostedServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "MaxHostedServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int maxHostedServicesInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    maxHostedServicesInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setMaximumHostedServices(maxHostedServicesInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentCoreCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentCoreCount".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentCoreCountInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentCoreCountInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setCurrentCoreCount(currentCoreCountInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentStorageAccounts".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentStorageAccounts".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentStorageAccountsInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentStorageAccountsInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setCurrentStorageAccounts(currentStorageAccountsInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentHostedServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentHostedServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentHostedServicesInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentHostedServicesInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setCurrentHostedServices(currentHostedServicesInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "MaxVirtualNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "MaxVirtualNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int maxVirtualNetworkSitesInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    maxVirtualNetworkSitesInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setMaximumVirtualNetworkSites(maxVirtualNetworkSitesInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentVirtualNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentVirtualNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentVirtualNetworkSitesInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentVirtualNetworkSitesInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setCurrentVirtualNetworkSites(currentVirtualNetworkSitesInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "MaxLocalNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "MaxLocalNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int maxLocalNetworkSitesInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    maxLocalNetworkSitesInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setMaximumLocalNetworkSites(maxLocalNetworkSitesInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "MaxDnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "MaxDnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int maxDnsServersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    maxDnsServersInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setMaximumDnsServers(maxDnsServersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentLocalNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentLocalNetworkSites".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentLocalNetworkSitesInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentLocalNetworkSitesInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setCurrentLocalNetworkSites(currentLocalNetworkSitesInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "CurrentDnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "CurrentDnsServers".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                int currentDnsServersInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    currentDnsServersInstance = DatatypeConverter.parseInt(xmlPullParser.getText());
                                    result.setCurrentDnsServers(currentDnsServersInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The List Subscription Operations operation returns a list of create,
    * update, and delete operations that were performed on a subscription
    * during the specified timeframe.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715318.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the List Subscription
    * Operations operation.
    * @return The List Subscription Operations operation response.
    */
    @Override
    public Future<SubscriptionListOperationsResponse> listOperationsAsync(final SubscriptionListOperationsParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<SubscriptionListOperationsResponse>() { 
            @Override
            public SubscriptionListOperationsResponse call() throws Exception {
                return listOperations(parameters);
            }
         });
    }
    
    /**
    * The List Subscription Operations operation returns a list of create,
    * update, and delete operations that were performed on a subscription
    * during the specified timeframe.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg715318.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the List Subscription
    * Operations operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The List Subscription Operations operation response.
    */
    @Override
    public SubscriptionListOperationsResponse listOperations(SubscriptionListOperationsParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "listOperationsAsync", tracingParameters);
        }
        
        // Construct URL
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
        simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSS'Z'");
        simpleDateFormat2.setTimeZone(TimeZone.getTimeZone("UTC"));
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/operations" + "?";
        url = url + "&" + "StartTime=" + URLEncoder.encode(simpleDateFormat.format(parameters.getStartTime().getTime()), "UTF-8");
        url = url + "&" + "EndTime=" + URLEncoder.encode(simpleDateFormat2.format(parameters.getEndTime().getTime()), "UTF-8");
        if (parameters.getObjectIdFilter() != null) {
            url = url + "&" + "ObjectIdFilter=" + URLEncoder.encode(parameters.getObjectIdFilter() != null ? parameters.getObjectIdFilter().trim() : "", "UTF-8");
        }
        if (parameters.getOperationStatus() != null) {
            url = url + "&" + "OperationResultFilter=" + URLEncoder.encode(parameters.getOperationStatus().toString(), "UTF-8");
        }
        if (parameters.getContinuationToken() != null) {
            url = url + "&" + "ContinuationToken=" + URLEncoder.encode(parameters.getContinuationToken() != null ? parameters.getContinuationToken().trim() : "", "UTF-8");
        }
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            SubscriptionListOperationsResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new SubscriptionListOperationsResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "SubscriptionOperationCollection".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "SubscriptionOperationCollection".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "ContinuationToken".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ContinuationToken".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String continuationTokenInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    continuationTokenInstance = xmlPullParser.getText();
                                    result.setContinuationToken(continuationTokenInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "SubscriptionOperations".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "SubscriptionOperations".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "SubscriptionOperation".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    SubscriptionListOperationsResponse.SubscriptionOperation subscriptionOperationInstance = new SubscriptionListOperationsResponse.SubscriptionOperation();
                                    result.getSubscriptionOperations().add(subscriptionOperationInstance);
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String operationIdInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                operationIdInstance = xmlPullParser.getText();
                                                subscriptionOperationInstance.setOperationId(operationIdInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationObjectId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationObjectId".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String operationObjectIdInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                operationObjectIdInstance = xmlPullParser.getText();
                                                subscriptionOperationInstance.setOperationObjectId(operationObjectIdInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String operationNameInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                operationNameInstance = xmlPullParser.getText();
                                                subscriptionOperationInstance.setOperationName(operationNameInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationParameters".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationParameters".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            if (eventType == XmlPullParser.START_TAG && "OperationParameter".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "OperationParameter".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String key = null;
                                                    String value = null;
                                                    if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.WindowsAzure.ServiceManagement".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.WindowsAzure.ServiceManagement".equals(xmlPullParser.getNamespace())) != true) {
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                key = xmlPullParser.getText();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.WindowsAzure.ServiceManagement".equals(xmlPullParser.getNamespace())) {
                                                        while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.datacontract.org/2004/07/Microsoft.WindowsAzure.ServiceManagement".equals(xmlPullParser.getNamespace())) != true) {
                                                            if (eventType == XmlPullParser.TEXT) {
                                                                value = xmlPullParser.getText();
                                                            }
                                                            
                                                            eventType = xmlPullParser.next();
                                                        }
                                                    }
                                                    if (key != null && value != null) {
                                                        subscriptionOperationInstance.getOperationParameters().put(key, xmlPullParser.getText());
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationCaller".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationCaller".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            SubscriptionListOperationsResponse.OperationCallerDetails operationCallerInstance = new SubscriptionListOperationsResponse.OperationCallerDetails();
                                            subscriptionOperationInstance.setOperationCaller(operationCallerInstance);
                                            
                                            if (eventType == XmlPullParser.START_TAG && "UsedServiceManagementApi".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "UsedServiceManagementApi".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    boolean usedServiceManagementApiInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        usedServiceManagementApiInstance = DatatypeConverter.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                        operationCallerInstance.setUsedServiceManagementApi(usedServiceManagementApiInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "UserEmailAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "UserEmailAddress".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String userEmailAddressInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        userEmailAddressInstance = xmlPullParser.getText();
                                                        operationCallerInstance.setUserEmailAddress(userEmailAddressInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "SubscriptionCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "SubscriptionCertificateThumbprint".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    String subscriptionCertificateThumbprintInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        subscriptionCertificateThumbprintInstance = xmlPullParser.getText();
                                                        operationCallerInstance.setSubscriptionCertificateThumbprint(subscriptionCertificateThumbprintInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            if (eventType == XmlPullParser.START_TAG && "ClientIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                while ((eventType == XmlPullParser.END_TAG && "ClientIP".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                    InetAddress clientIPInstance;
                                                    if (eventType == XmlPullParser.TEXT) {
                                                        clientIPInstance = InetAddress.getByName(xmlPullParser.getText());
                                                        operationCallerInstance.setClientIPAddress(clientIPInstance);
                                                    }
                                                    
                                                    eventType = xmlPullParser.next();
                                                }
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationStatus".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            String operationStatusInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                operationStatusInstance = xmlPullParser.getText();
                                                subscriptionOperationInstance.setOperationStatus(operationStatusInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationStartedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationStartedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            Calendar operationStartedTimeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                operationStartedTimeInstance = DatatypeConverter.parseDateTime(xmlPullParser.getText());
                                                subscriptionOperationInstance.setOperationStartedTime(operationStartedTimeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    if (eventType == XmlPullParser.START_TAG && "OperationCompletedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                        while ((eventType == XmlPullParser.END_TAG && "OperationCompletedTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                            Calendar operationCompletedTimeInstance;
                                            if (eventType == XmlPullParser.TEXT) {
                                                operationCompletedTimeInstance = DatatypeConverter.parseDateTime(xmlPullParser.getText());
                                                subscriptionOperationInstance.setOperationCompletedTime(operationCompletedTimeInstance);
                                            }
                                            
                                            eventType = xmlPullParser.next();
                                        }
                                    }
                                    
                                    eventType = xmlPullParser.next();
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Register a resource with your subscription.
    *
    * @param resourceName Required. Name of the resource to register.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> registerResourceAsync(final String resourceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return registerResource(resourceName);
            }
         });
    }
    
    /**
    * Register a resource with your subscription.
    *
    * @param resourceName Required. Name of the resource to register.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse registerResource(String resourceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (resourceName == null) {
            throw new NullPointerException("resourceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceName", resourceName);
            CloudTracing.enter(invocationId, this, "registerResourceAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services" + "?";
        url = url + "service=" + URLEncoder.encode(resourceName.trim(), "UTF-8");
        url = url + "&" + "action=register";
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK && statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * Unregister a resource with your subscription.
    *
    * @param resourceName Required. Name of the resource to unregister.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> unregisterResourceAsync(final String resourceName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return unregisterResource(resourceName);
            }
         });
    }
    
    /**
    * Unregister a resource with your subscription.
    *
    * @param resourceName Required. Name of the resource to unregister.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse unregisterResource(String resourceName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (resourceName == null) {
            throw new NullPointerException("resourceName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("resourceName", resourceName);
            CloudTracing.enter(invocationId, this, "unregisterResourceAsync", tracingParameters);
        }
        
        // Construct URL
        String baseUrl = this.getClient().getBaseUri().toString();
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services" + "?";
        url = url + "service=" + URLEncoder.encode(resourceName.trim(), "UTF-8");
        url = url + "&" + "action=unregister";
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(0);
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK && statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
}
