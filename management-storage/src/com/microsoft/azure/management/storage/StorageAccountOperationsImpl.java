/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.azure.management.storage;

import android.util.Xml;
import com.microsoft.azure.AzureHttpStatus;
import com.microsoft.azure.core.OperationResponse;
import com.microsoft.azure.core.OperationStatus;
import com.microsoft.azure.core.OperationStatusResponse;
import com.microsoft.azure.core.ServiceOperations;
import com.microsoft.azure.core.datatype.DatatypeFactoryImpl;
import com.microsoft.azure.core.utils.BOMInputStream;
import com.microsoft.azure.core.utils.Base64;
import com.microsoft.azure.exception.ServiceException;
import com.microsoft.azure.management.storage.models.CheckNameAvailabilityResponse;
import com.microsoft.azure.management.storage.models.GeoRegionStatus;
import com.microsoft.azure.management.storage.models.StorageAccount;
import com.microsoft.azure.management.storage.models.StorageAccountCreateParameters;
import com.microsoft.azure.management.storage.models.StorageAccountGetKeysResponse;
import com.microsoft.azure.management.storage.models.StorageAccountGetResponse;
import com.microsoft.azure.management.storage.models.StorageAccountListResponse;
import com.microsoft.azure.management.storage.models.StorageAccountProperties;
import com.microsoft.azure.management.storage.models.StorageAccountRegenerateKeysParameters;
import com.microsoft.azure.management.storage.models.StorageAccountRegenerateKeysResponse;
import com.microsoft.azure.management.storage.models.StorageAccountStatus;
import com.microsoft.azure.management.storage.models.StorageAccountUpdateParameters;
import com.microsoft.azure.tracing.ClientRequestTrackingHandler;
import com.microsoft.azure.tracing.CloudTracing;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.xml.datatype.DatatypeConfigurationException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

/**
* The Service Management API includes operations for managing the storage
* accounts beneath your subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/ee460790.aspx for more
* information)
*/
public class StorageAccountOperationsImpl implements ServiceOperations<StorageManagementClientImpl>, StorageAccountOperations {
    /**
    * Initializes a new instance of the StorageAccountOperationsImpl class.
    *
    * @param client Reference to the service client.
    */
    StorageAccountOperationsImpl(StorageManagementClientImpl client) {
        this.client = client;
    }
    
    private StorageManagementClientImpl client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.storage.StorageManagementClientImpl.
    * @return The Client value.
    */
    public StorageManagementClientImpl getClient() {
        return this.client;
    }
    
    /**
    * The Begin Creating Storage Account operation creates a new storage
    * account in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Storage Account operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> beginCreatingAsync(final StorageAccountCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return beginCreating(parameters);
            }
         });
    }
    
    /**
    * The Begin Creating Storage Account operation creates a new storage
    * account in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Begin Creating
    * Storage Account operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse beginCreating(StorageAccountCreateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getDescription() != null && parameters.getDescription().length() > 1024) {
            throw new IllegalArgumentException("parameters.Description");
        }
        if (parameters.getLabel() == null) {
            throw new NullPointerException("parameters.Label");
        }
        if (parameters.getLabel().length() > 100) {
            throw new IllegalArgumentException("parameters.Label");
        }
        if (parameters.getName() == null) {
            throw new NullPointerException("parameters.Name");
        }
        if (parameters.getName().length() < 3) {
            throw new IllegalArgumentException("parameters.Name");
        }
        if (parameters.getName().length() > 24) {
            throw new IllegalArgumentException("parameters.Name");
        }
        for (char nameChar : parameters.getName().toCharArray()) {
            if (Character.isLowerCase(nameChar) == false && Character.isDigit(nameChar) == false) {
                throw new IllegalArgumentException("parameters.Name");
            }
        }
        // TODO: Validate parameters.Name is a valid DNS name.
        int locationCount = (parameters.getAffinityGroup() != null ? 1 : 0) + (parameters.getLocation() != null ? 1 : 0);
        if (locationCount != 1) {
            throw new IllegalArgumentException("Only one of parameters.AffinityGroup, parameters.Location may be provided.");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "beginCreatingAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "CreateStorageServiceInput");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ServiceName");
        xmlSerializer.text(parameters.getName());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ServiceName");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
        xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        
        if (parameters.getDescription() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.text(parameters.getDescription());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        } else {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.attribute("http://www.w3.org/2001/XMLSchema-instance", "nil", "true");
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        }
        
        if (parameters.getLocation() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Location");
            xmlSerializer.text(parameters.getLocation());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Location");
        }
        
        if (parameters.getAffinityGroup() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "AffinityGroup");
            xmlSerializer.text(parameters.getAffinityGroup());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "AffinityGroup");
        }
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "GeoReplicationEnabled");
        xmlSerializer.text(Boolean.toString(parameters.isGeoReplicationEnabled()).toLowerCase());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "GeoReplicationEnabled");
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "CreateStorageServiceInput");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.ACCEPTED) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Check Name Availability operation checks if a storage account name is
    * available for use in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154125.aspx for
    * more information)
    *
    * @param accountName Required. The desired storage account name to check
    * for availability.
    * @return The response to a storage account check name availability request.
    */
    @Override
    public Future<CheckNameAvailabilityResponse> checkNameAvailabilityAsync(final String accountName) {
        return this.getClient().getExecutorService().submit(new Callable<CheckNameAvailabilityResponse>() { 
            @Override
            public CheckNameAvailabilityResponse call() throws Exception {
                return checkNameAvailability(accountName);
            }
         });
    }
    
    /**
    * The Check Name Availability operation checks if a storage account name is
    * available for use in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154125.aspx for
    * more information)
    *
    * @param accountName Required. The desired storage account name to check
    * for availability.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @return The response to a storage account check name availability request.
    */
    @Override
    public CheckNameAvailabilityResponse checkNameAvailability(String accountName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException {
        // Validate
        if (accountName == null) {
            throw new NullPointerException("accountName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("accountName", accountName);
            CloudTracing.enter(invocationId, this, "checkNameAvailabilityAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices/operations/isavailable/" + accountName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            CheckNameAvailabilityResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new CheckNameAvailabilityResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "AvailabilityResponse".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "AvailabilityResponse".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Result".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Result".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                boolean resultInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    resultInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                    result.setIsAvailable(resultInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Reason".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Reason".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String reasonInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    reasonInstance = xmlPullParser.getText();
                                    result.setReason(reasonInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Create Storage Account operation creates a new storage account in
    * Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Create Storage
    * Account operation.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public Future<OperationStatusResponse> createAsync(final StorageAccountCreateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationStatusResponse>() { 
            @Override
            public OperationStatusResponse call() throws Exception {
                return create(parameters);
            }
         });
    }
    
    /**
    * The Create Storage Account operation creates a new storage account in
    * Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Create Storage
    * Account operation.
    * @throws InterruptedException Thrown when a thread is waiting, sleeping,
    * or otherwise occupied, and the thread is interrupted, either before or
    * during the activity. Occasionally a method may wish to test whether the
    * current thread has been interrupted, and if so, to immediately throw
    * this exception. The following code can be used to achieve this effect:
    * @throws ExecutionException Thrown when attempting to retrieve the result
    * of a task that aborted by throwing an exception. This exception can be
    * inspected using the Throwable.getCause() method.
    * @throws ServiceException Thrown if the server returned an error for the
    * request.
    * @return The response body contains the status of the specified
    * asynchronous operation, indicating whether it has succeeded, is
    * inprogress, or has failed. Note that this status is distinct from the
    * HTTP status code returned for the Get Operation Status operation itself.
    * If the asynchronous operation succeeded, the response body includes the
    * HTTP status code for the successful request. If the asynchronous
    * operation failed, the response body includes the HTTP status code for
    * the failed request and error information regarding the failure.
    */
    @Override
    public OperationStatusResponse create(StorageAccountCreateParameters parameters) throws InterruptedException, ExecutionException, ServiceException {
        StorageManagementClient client2 = this.getClient();
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "createAsync", tracingParameters);
        }
        if (shouldTrace) {
            client2 = this.getClient().withRequestFilterLast(new ClientRequestTrackingHandler(invocationId)).withResponseFilterLast(new ClientRequestTrackingHandler(invocationId));
        }
        
        OperationResponse response = client2.getStorageAccountsOperations().beginCreatingAsync(parameters).get();
        OperationStatusResponse result = client2.getOperationStatusAsync(response.getRequestId()).get();
        int delayInSeconds = 30;
        if (client2.getLongRunningOperationInitialTimeout() >= 0) {
            delayInSeconds = client2.getLongRunningOperationInitialTimeout();
        }
        while ((result.getStatus() != OperationStatus.InProgress) == false) {
            Thread.sleep(delayInSeconds * 1000);
            result = client2.getOperationStatusAsync(response.getRequestId()).get();
            delayInSeconds = 30;
            if (client2.getLongRunningOperationRetryTimeout() >= 0) {
                delayInSeconds = client2.getLongRunningOperationRetryTimeout();
            }
        }
        
        if (shouldTrace) {
            CloudTracing.exit(invocationId, result);
        }
        
        if (result.getStatus() != OperationStatus.Succeeded) {
            if (result.getError() != null) {
                ServiceException ex = new ServiceException(result.getError().getCode() + " : " + result.getError().getMessage());
                ex.setErrorCode(result.getError().getCode());
                ex.setErrorMessage(result.getError().getMessage());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            } else {
                ServiceException ex = new ServiceException("");
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
        }
        
        return result;
    }
    
    /**
    * The Delete Storage Account operation deletes the specified storage
    * account from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264517.aspx for
    * more information)
    *
    * @param accountName Required. The name of the storage account to be
    * deleted.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> deleteAsync(final String accountName) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return delete(accountName);
            }
         });
    }
    
    /**
    * The Delete Storage Account operation deletes the specified storage
    * account from Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264517.aspx for
    * more information)
    *
    * @param accountName Required. The name of the storage account to be
    * deleted.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse delete(String accountName) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (accountName == null) {
            throw new NullPointerException("accountName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("accountName", accountName);
            CloudTracing.enter(invocationId, this, "deleteAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices/" + accountName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("DELETE");
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Get Storage Account Properties operation returns system properties
    * for the specified storage account.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460802.aspx for
    * more information)
    *
    * @param accountName Required. Name of the storage account to get
    * properties for.
    * @return The Get Storage Account Properties operation response.
    */
    @Override
    public Future<StorageAccountGetResponse> getAsync(final String accountName) {
        return this.getClient().getExecutorService().submit(new Callable<StorageAccountGetResponse>() { 
            @Override
            public StorageAccountGetResponse call() throws Exception {
                return get(accountName);
            }
         });
    }
    
    /**
    * The Get Storage Account Properties operation returns system properties
    * for the specified storage account.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460802.aspx for
    * more information)
    *
    * @param accountName Required. Name of the storage account to get
    * properties for.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The Get Storage Account Properties operation response.
    */
    @Override
    public StorageAccountGetResponse get(String accountName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        if (accountName == null) {
            throw new NullPointerException("accountName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("accountName", accountName);
            CloudTracing.enter(invocationId, this, "getAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices/" + accountName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            StorageAccountGetResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new StorageAccountGetResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        StorageAccount storageServiceInstance;
                        if (result.getStorageAccount() == null) {
                            storageServiceInstance = new StorageAccount();
                            result.setStorageAccount(storageServiceInstance);
                        } else {
                            storageServiceInstance = result.getStorageAccount();
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI urlInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    urlInstance = new URI(xmlPullParser.getText());
                                    storageServiceInstance.setUri(urlInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                String serviceNameInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    serviceNameInstance = xmlPullParser.getText();
                                    storageServiceInstance.setName(serviceNameInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "StorageServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "StorageServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                StorageAccountProperties storageServicePropertiesInstance;
                                if (storageServiceInstance.getProperties() == null) {
                                    storageServicePropertiesInstance = new StorageAccountProperties();
                                    storageServiceInstance.setProperties(storageServicePropertiesInstance);
                                } else {
                                    storageServicePropertiesInstance = storageServiceInstance.getProperties();
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String descriptionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            descriptionInstance = xmlPullParser.getText();
                                            storageServicePropertiesInstance.setDescription(descriptionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String affinityGroupInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            affinityGroupInstance = xmlPullParser.getText();
                                            storageServicePropertiesInstance.setAffinityGroup(affinityGroupInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String locationInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            locationInstance = xmlPullParser.getText();
                                            storageServicePropertiesInstance.setLocation(locationInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String labelInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            labelInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                            storageServicePropertiesInstance.setLabel(labelInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        StorageAccountStatus statusInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusInstance = StorageAccountStatus.valueOf(xmlPullParser.getText());
                                            storageServicePropertiesInstance.setStatus(statusInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Endpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Endpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.TEXT) {
                                            storageServicePropertiesInstance.getEndpoints().add(new URI(xmlPullParser.getText()));
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "GeoReplicationEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "GeoReplicationEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        boolean geoReplicationEnabledInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            geoReplicationEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                            storageServicePropertiesInstance.setGeoReplicationEnabled(geoReplicationEnabledInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "GeoPrimaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "GeoPrimaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String geoPrimaryRegionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            geoPrimaryRegionInstance = xmlPullParser.getText();
                                            storageServicePropertiesInstance.setGeoPrimaryRegion(geoPrimaryRegionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "StatusOfPrimary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "StatusOfPrimary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        GeoRegionStatus statusOfPrimaryInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusOfPrimaryInstance = GeoRegionStatus.valueOf(xmlPullParser.getText());
                                            storageServicePropertiesInstance.setStatusOfGeoPrimaryRegion(statusOfPrimaryInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "LastGeoFailoverTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "LastGeoFailoverTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        Calendar lastGeoFailoverTimeInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            lastGeoFailoverTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                            storageServicePropertiesInstance.setLastGeoFailoverTime(lastGeoFailoverTimeInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "GeoSecondaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "GeoSecondaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String geoSecondaryRegionInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            geoSecondaryRegionInstance = xmlPullParser.getText();
                                            storageServicePropertiesInstance.setGeoSecondaryRegion(geoSecondaryRegionInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "StatusOfSecondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "StatusOfSecondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        GeoRegionStatus statusOfSecondaryInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            statusOfSecondaryInstance = GeoRegionStatus.valueOf(xmlPullParser.getText());
                                            storageServicePropertiesInstance.setStatusOfGeoSecondaryRegion(statusOfSecondaryInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String key = null;
                                        String value = null;
                                        if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    key = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    value = xmlPullParser.getText();
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        if (key != null && value != null) {
                                            storageServiceInstance.getExtendedProperties().put(key, xmlPullParser.getText());
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Get Storage Keys operation returns the primary and secondary access
    * keys for the specified storage account.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460785.aspx for
    * more information)
    *
    * @param accountName Required. The name of the desired storage account.
    * @return The primary and secondary access keys for a storage account.
    */
    @Override
    public Future<StorageAccountGetKeysResponse> getKeysAsync(final String accountName) {
        return this.getClient().getExecutorService().submit(new Callable<StorageAccountGetKeysResponse>() { 
            @Override
            public StorageAccountGetKeysResponse call() throws Exception {
                return getKeys(accountName);
            }
         });
    }
    
    /**
    * The Get Storage Keys operation returns the primary and secondary access
    * keys for the specified storage account.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460785.aspx for
    * more information)
    *
    * @param accountName Required. The name of the desired storage account.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The primary and secondary access keys for a storage account.
    */
    @Override
    public StorageAccountGetKeysResponse getKeys(String accountName) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        if (accountName == null) {
            throw new NullPointerException("accountName");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("accountName", accountName);
            CloudTracing.enter(invocationId, this, "getKeysAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices/" + accountName.trim() + "/keys";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            StorageAccountGetKeysResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new StorageAccountGetKeysResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI urlInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    urlInstance = new URI(xmlPullParser.getText());
                                    result.setUri(urlInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "StorageServiceKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "StorageServiceKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Primary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Primary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String primaryInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            primaryInstance = xmlPullParser.getText();
                                            result.setPrimaryKey(primaryInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Secondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Secondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String secondaryInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            secondaryInstance = xmlPullParser.getText();
                                            result.setSecondaryKey(secondaryInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The List Storage Accounts operation lists the storage accounts available
    * under the current subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460787.aspx for
    * more information)
    *
    * @return The List Storage Accounts operation response.
    */
    @Override
    public Future<StorageAccountListResponse> listAsync() {
        return this.getClient().getExecutorService().submit(new Callable<StorageAccountListResponse>() { 
            @Override
            public StorageAccountListResponse call() throws Exception {
                return list();
            }
         });
    }
    
    /**
    * The List Storage Accounts operation lists the storage accounts available
    * under the current subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460787.aspx for
    * more information)
    *
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @throws DatatypeConfigurationException Invalid datatype configuration
    * @return The List Storage Accounts operation response.
    */
    @Override
    public StorageAccountListResponse list() throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException, DatatypeConfigurationException {
        // Validate
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            CloudTracing.enter(invocationId, this, "listAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("GET");
        httpRequest.setDoInput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Send Request
        try {
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(null, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            StorageAccountListResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new StorageAccountListResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "StorageServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "StorageServices".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            StorageAccount storageServiceInstance;
                            storageServiceInstance = new StorageAccount();
                            result.getStorageAccounts().add(storageServiceInstance);
                            
                            while ((eventType == XmlPullParser.END_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        URI urlInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            urlInstance = new URI(xmlPullParser.getText());
                                            storageServiceInstance.setUri(urlInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ServiceName".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String serviceNameInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            serviceNameInstance = xmlPullParser.getText();
                                            storageServiceInstance.setName(serviceNameInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "StorageServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "StorageServiceProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        StorageAccountProperties storageServicePropertiesInstance;
                                        if (storageServiceInstance.getProperties() == null) {
                                            storageServicePropertiesInstance = new StorageAccountProperties();
                                            storageServiceInstance.setProperties(storageServicePropertiesInstance);
                                        } else {
                                            storageServicePropertiesInstance = storageServiceInstance.getProperties();
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Description".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String descriptionInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    descriptionInstance = xmlPullParser.getText();
                                                    storageServicePropertiesInstance.setDescription(descriptionInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "AffinityGroup".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String affinityGroupInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    affinityGroupInstance = xmlPullParser.getText();
                                                    storageServicePropertiesInstance.setAffinityGroup(affinityGroupInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Location".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String locationInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    locationInstance = xmlPullParser.getText();
                                                    storageServicePropertiesInstance.setLocation(locationInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Label".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String labelInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    labelInstance = xmlPullParser.getText() != null ? new String(Base64.decode(xmlPullParser.getText())) : null;
                                                    storageServicePropertiesInstance.setLabel(labelInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Status".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                StorageAccountStatus statusInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    statusInstance = StorageAccountStatus.valueOf(xmlPullParser.getText());
                                                    storageServicePropertiesInstance.setStatus(statusInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "Endpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "Endpoints".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                if (eventType == XmlPullParser.TEXT) {
                                                    storageServicePropertiesInstance.getEndpoints().add(new URI(xmlPullParser.getText()));
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "GeoReplicationEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "GeoReplicationEnabled".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                boolean geoReplicationEnabledInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    geoReplicationEnabledInstance = Boolean.parseBoolean(xmlPullParser.getText().toLowerCase());
                                                    storageServicePropertiesInstance.setGeoReplicationEnabled(geoReplicationEnabledInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "GeoPrimaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "GeoPrimaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String geoPrimaryRegionInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    geoPrimaryRegionInstance = xmlPullParser.getText();
                                                    storageServicePropertiesInstance.setGeoPrimaryRegion(geoPrimaryRegionInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "StatusOfPrimary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "StatusOfPrimary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                GeoRegionStatus statusOfPrimaryInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    statusOfPrimaryInstance = GeoRegionStatus.valueOf(xmlPullParser.getText());
                                                    storageServicePropertiesInstance.setStatusOfGeoPrimaryRegion(statusOfPrimaryInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "LastGeoFailoverTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "LastGeoFailoverTime".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                Calendar lastGeoFailoverTimeInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    lastGeoFailoverTimeInstance = DatatypeFactoryImpl.newInstance().newXMLGregorianCalendar(xmlPullParser.getText()).toGregorianCalendar();
                                                    storageServicePropertiesInstance.setLastGeoFailoverTime(lastGeoFailoverTimeInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "GeoSecondaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "GeoSecondaryRegion".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String geoSecondaryRegionInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    geoSecondaryRegionInstance = xmlPullParser.getText();
                                                    storageServicePropertiesInstance.setGeoSecondaryRegion(geoSecondaryRegionInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        if (eventType == XmlPullParser.START_TAG && "StatusOfSecondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "StatusOfSecondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                GeoRegionStatus statusOfSecondaryInstance;
                                                if (eventType == XmlPullParser.TEXT) {
                                                    statusOfSecondaryInstance = GeoRegionStatus.valueOf(xmlPullParser.getText());
                                                    storageServicePropertiesInstance.setStatusOfGeoSecondaryRegion(statusOfSecondaryInstance);
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "ExtendedProperties".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        if (eventType == XmlPullParser.START_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                            while ((eventType == XmlPullParser.END_TAG && "ExtendedProperty".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                String key = null;
                                                String value = null;
                                                if (eventType == XmlPullParser.START_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Name".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            key = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                else if (eventType == XmlPullParser.START_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                                    while ((eventType == XmlPullParser.END_TAG && "Value".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                                        if (eventType == XmlPullParser.TEXT) {
                                                            value = xmlPullParser.getText();
                                                        }
                                                        
                                                        eventType = xmlPullParser.next();
                                                    }
                                                }
                                                if (key != null && value != null) {
                                                    storageServiceInstance.getExtendedProperties().put(key, xmlPullParser.getText());
                                                }
                                                
                                                eventType = xmlPullParser.next();
                                            }
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                    
                    eventType = xmlPullParser.next();
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Regenerate Keys operation regenerates the primary or secondary access
    * key for the specified storage account.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460795.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Regenerate Keys
    * operation.
    * @return The primary and secondary access keys for a storage account.
    */
    @Override
    public Future<StorageAccountRegenerateKeysResponse> regenerateKeysAsync(final StorageAccountRegenerateKeysParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<StorageAccountRegenerateKeysResponse>() { 
            @Override
            public StorageAccountRegenerateKeysResponse call() throws Exception {
                return regenerateKeys(parameters);
            }
         });
    }
    
    /**
    * The Regenerate Keys operation regenerates the primary or secondary access
    * key for the specified storage account.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/ee460795.aspx for
    * more information)
    *
    * @param parameters Required. Parameters supplied to the Regenerate Keys
    * operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @throws XmlPullParserException This exception is thrown to signal XML
    * Pull Parser related faults.
    * @throws URISyntaxException Thrown if there was an error parsing a URI in
    * the response.
    * @return The primary and secondary access keys for a storage account.
    */
    @Override
    public StorageAccountRegenerateKeysResponse regenerateKeys(StorageAccountRegenerateKeysParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException, XmlPullParserException, URISyntaxException {
        // Validate
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getName() == null) {
            throw new NullPointerException("parameters.Name");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "regenerateKeysAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices/" + parameters.getName().trim() + "/keys" + "?" + "action=regenerate";
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("POST");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "RegenerateKeys");
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "KeyType");
        xmlSerializer.text(parameters.getKeyType().toString());
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "KeyType");
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "RegenerateKeys");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            StorageAccountRegenerateKeysResponse result = null;
            // Deserialize Response
            InputStream responseContent = httpRequest.getInputStream();
            result = new StorageAccountRegenerateKeysResponse();
            XmlPullParserFactory xmlPullParserFactory = XmlPullParserFactory.newInstance();
            xmlPullParserFactory.setNamespaceAware(true);
            XmlPullParser xmlPullParser = xmlPullParserFactory.newPullParser();
            xmlPullParser.setInput(new InputStreamReader(new BOMInputStream(responseContent)));
            
            int eventType = xmlPullParser.getEventType();
            while ((eventType == XmlPullParser.END_DOCUMENT) != true) {
                if (eventType == XmlPullParser.START_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                    while ((eventType == XmlPullParser.END_TAG && "StorageService".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                        if (eventType == XmlPullParser.START_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "Url".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                URI urlInstance;
                                if (eventType == XmlPullParser.TEXT) {
                                    urlInstance = new URI(xmlPullParser.getText());
                                    result.setUri(urlInstance);
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        if (eventType == XmlPullParser.START_TAG && "StorageServiceKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                            while ((eventType == XmlPullParser.END_TAG && "StorageServiceKeys".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                if (eventType == XmlPullParser.START_TAG && "Primary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Primary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String primaryInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            primaryInstance = xmlPullParser.getText();
                                            result.setPrimaryKey(primaryInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                if (eventType == XmlPullParser.START_TAG && "Secondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) {
                                    while ((eventType == XmlPullParser.END_TAG && "Secondary".equals(xmlPullParser.getName()) && "http://schemas.microsoft.com/windowsazure".equals(xmlPullParser.getNamespace())) != true) {
                                        String secondaryInstance;
                                        if (eventType == XmlPullParser.TEXT) {
                                            secondaryInstance = xmlPullParser.getText();
                                            result.setSecondaryKey(secondaryInstance);
                                        }
                                        
                                        eventType = xmlPullParser.next();
                                    }
                                }
                                
                                eventType = xmlPullParser.next();
                            }
                        }
                        
                        eventType = xmlPullParser.next();
                    }
                }
                
                eventType = xmlPullParser.next();
            }
            
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
    
    /**
    * The Update Storage Account operation updates the label and the
    * description, and enables or disables the geo-replication status for a
    * storage account in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264516.aspx for
    * more information)
    *
    * @param accountName Required. Name of the storage account to update.
    * @param parameters Required. Parameters supplied to the Update Storage
    * Account operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public Future<OperationResponse> updateAsync(final String accountName, final StorageAccountUpdateParameters parameters) {
        return this.getClient().getExecutorService().submit(new Callable<OperationResponse>() { 
            @Override
            public OperationResponse call() throws Exception {
                return update(accountName, parameters);
            }
         });
    }
    
    /**
    * The Update Storage Account operation updates the label and the
    * description, and enables or disables the geo-replication status for a
    * storage account in Azure.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/hh264516.aspx for
    * more information)
    *
    * @param accountName Required. Name of the storage account to update.
    * @param parameters Required. Parameters supplied to the Update Storage
    * Account operation.
    * @throws MalformedURLException Thrown in case of an invalid request URL
    * @throws ProtocolException Thrown if invalid request method
    * @throws ServiceException Thrown if an unexpected response is found.
    * @throws IOException Signals that an I/O exception of some sort has
    * occurred
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    @Override
    public OperationResponse update(String accountName, StorageAccountUpdateParameters parameters) throws MalformedURLException, ProtocolException, ServiceException, IOException {
        // Validate
        if (accountName == null) {
            throw new NullPointerException("accountName");
        }
        if (accountName.length() < 3) {
            throw new IllegalArgumentException("accountName");
        }
        if (accountName.length() > 24) {
            throw new IllegalArgumentException("accountName");
        }
        for (char accountNameChar : accountName.toCharArray()) {
            if (Character.isLowerCase(accountNameChar) == false && Character.isDigit(accountNameChar) == false) {
                throw new IllegalArgumentException("accountName");
            }
        }
        // TODO: Validate accountName is a valid DNS name.
        if (parameters == null) {
            throw new NullPointerException("parameters");
        }
        if (parameters.getDescription() != null && parameters.getDescription().length() > 1024) {
            throw new IllegalArgumentException("parameters.Description");
        }
        
        // Tracing
        boolean shouldTrace = CloudTracing.getIsEnabled();
        String invocationId = null;
        if (shouldTrace) {
            invocationId = Long.toString(CloudTracing.getNextInvocationId());
            HashMap<String, Object> tracingParameters = new HashMap<String, Object>();
            tracingParameters.put("accountName", accountName);
            tracingParameters.put("parameters", parameters);
            CloudTracing.enter(invocationId, this, "updateAsync", tracingParameters);
        }
        
        // Construct URL
        String url = "/" + (this.getClient().getCredentials().getSubscriptionId() != null ? this.getClient().getCredentials().getSubscriptionId().trim() : "") + "/services/storageservices/" + accountName.trim();
        String baseUrl = this.getClient().getBaseUri().toString();
        // Trim '/' character from the end of baseUrl and beginning of url.
        if (baseUrl.charAt(baseUrl.length() - 1) == '/') {
            baseUrl = baseUrl.substring(0, (baseUrl.length() - 1) + 0);
        }
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        url = baseUrl + "/" + url;
        url = url.replace(" ", "%20");
        
        // Create HTTP transport objects
        URL serverAddress = new URL(url);
        HttpURLConnection httpRequest = ((HttpURLConnection) serverAddress.openConnection());
        httpRequest.setRequestMethod("PUT");
        httpRequest.setDoOutput(true);
        
        // Set Headers
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        httpRequest.setRequestProperty("x-ms-version", "2014-05-01");
        
        // Set Credentials
        this.getClient().getCredentials().processRequest(httpRequest);
        
        // Serialize Request
        String requestContent = null;
        XmlSerializer xmlSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        xmlSerializer.setOutput(stringWriter);
        xmlSerializer.startDocument("UTF-8", true);
        
        xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "UpdateStorageServiceInput");
        
        if (parameters.getDescription() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.text(parameters.getDescription());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        } else {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Description");
            xmlSerializer.attribute("http://www.w3.org/2001/XMLSchema-instance", "nil", "true");
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Description");
        }
        
        if (parameters.getLabel() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Label");
            xmlSerializer.text(Base64.encode(parameters.getLabel().getBytes()));
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Label");
        }
        
        if (parameters.isGeoReplicationEnabled() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "GeoReplicationEnabled");
            xmlSerializer.text(Boolean.toString(parameters.isGeoReplicationEnabled()).toLowerCase());
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "GeoReplicationEnabled");
        }
        
        if (parameters.getExtendedProperties() != null) {
            xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
            for (Map.Entry<String, String> entry : parameters.getExtendedProperties().entrySet()) {
                String extendedPropertiesKey = entry.getKey();
                String extendedPropertiesValue = entry.getValue();
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Name");
                xmlSerializer.text(extendedPropertiesKey);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.startTag("http://schemas.microsoft.com/windowsazure", "Value");
                xmlSerializer.text(extendedPropertiesValue);
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "Name");
                
                xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperty");
            }
            xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "ExtendedProperties");
        }
        xmlSerializer.endTag("http://schemas.microsoft.com/windowsazure", "UpdateStorageServiceInput");
        xmlSerializer.endDocument();
        
        requestContent = stringWriter.toString();
        httpRequest.setRequestProperty("Content-Type", "application/xml");
        
        // Send Request
        try {
            httpRequest.setFixedLengthStreamingMode(requestContent.getBytes().length);
            OutputStream outputStream = httpRequest.getOutputStream();
            outputStream.write(requestContent.getBytes());
            outputStream.close();
            int statusCode = httpRequest.getResponseCode();
            if (statusCode != AzureHttpStatus.OK) {
                ServiceException ex = ServiceException.createFromXml(requestContent, httpRequest.getResponseMessage(), httpRequest.getResponseCode(), httpRequest.getContentType(), httpRequest.getInputStream());
                if (shouldTrace) {
                    CloudTracing.error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            OperationResponse result = null;
            result = new OperationResponse();
            result.setStatusCode(statusCode);
            result.setRequestId(httpRequest.getHeaderField("x-ms-request-id"));
            
            if (shouldTrace) {
                CloudTracing.exit(invocationId, result);
            }
            return result;
        } finally {
            if (httpRequest != null) {
                httpRequest.disconnect();
            }
        }
    }
}
